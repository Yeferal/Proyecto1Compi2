
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 25 00:28:27 CST 2020
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import objetos.*;
import java.util.ArrayList;
import analisis.comprobaciones.*;
import lalr.*;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 25 00:28:27 CST 2020
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\002\002\004\000\002\043\002\000\002\044" +
    "\002\000\002\002\021\000\002\002\004\000\002\032\004" +
    "\000\002\032\002\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\002\000\002\010" +
    "\005\000\002\011\005\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\002\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\002\000\002\003\004\000\002\003" +
    "\003\000\002\012\003\000\002\012\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\033\004\000\002\033\002\000\002" +
    "\013\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\002\000\002\015" +
    "\003\000\002\045\002\000\002\046\002\000\002\016\012" +
    "\000\002\047\002\000\002\016\011\000\002\016\002\000" +
    "\002\017\003\000\002\037\003\000\002\037\002\000\002" +
    "\041\007\000\002\041\007\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\040\010\000" +
    "\002\040\010\000\002\040\006\000\002\040\006\000\002" +
    "\040\006\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\002" +
    "\000\002\020\007\000\002\020\007\000\002\020\002\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\023\003\000\002\021\003\000\002\042\003" +
    "\000\002\042\002\000\002\050\002\000\002\051\002\000" +
    "\002\024\013\000\002\052\002\000\002\025\006\000\002" +
    "\025\004\000\002\036\003\000\002\036\003\000\002\026" +
    "\004\000\002\026\002\000\002\027\005\000\002\030\003" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0225\000\024\004\006\016\007\017\012\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\051\013\001\002\000\036" +
    "\004\ufff3\007\ufff3\015\ufff3\016\007\017\012\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\044\ufff3\046\ufff3\047\ufff3" +
    "\051\013\001\002\000\036\004\ufff3\007\ufff3\015\ufff3\016" +
    "\007\017\012\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\044\ufff3\046\ufff3\047\ufff3\051\013\001\002\000\004\004" +
    "\u0225\001\002\000\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec" +
    "\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5\021\u01df\022" +
    "\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff" +
    "\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037" +
    "\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd" +
    "\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054" +
    "\u01e2\001\002\000\014\021\140\022\136\023\135\024\134" +
    "\025\137\001\002\000\004\002\131\001\002\000\116\004" +
    "\031\005\016\006\046\007\035\010\020\011\033\012\025" +
    "\013\041\014\047\020\uffa6\021\021\022\037\023\050\024" +
    "\057\025\053\026\017\027\030\030\062\031\015\032\027" +
    "\033\026\034\052\035\051\036\040\037\061\040\036\041" +
    "\045\042\043\043\032\044\034\045\060\046\056\047\055" +
    "\050\044\051\054\052\023\053\022\054\024\001\002\000" +
    "\036\004\ufff3\007\ufff3\015\ufff3\016\007\017\012\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\044\ufff3\046\ufff3\047" +
    "\ufff3\051\013\001\002\000\030\004\ufff6\007\ufff6\015\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\044\ufff6\046" +
    "\ufff6\047\ufff6\001\002\000\116\004\031\005\016\006\046" +
    "\007\035\010\020\011\033\012\025\013\041\014\047\020" +
    "\uffa6\021\021\022\037\023\050\024\057\025\053\026\017" +
    "\027\030\030\062\031\015\032\027\033\026\034\052\035" +
    "\051\036\040\037\061\040\036\041\045\042\043\043\032" +
    "\044\034\045\060\046\056\047\055\050\044\051\054\052" +
    "\023\053\022\054\024\001\002\000\116\004\031\005\016" +
    "\006\046\007\035\010\020\011\033\012\025\013\041\014" +
    "\047\020\uffa6\021\021\022\037\023\050\024\057\025\053" +
    "\026\017\027\030\030\062\031\015\032\027\033\026\034" +
    "\052\035\051\036\040\037\061\040\036\041\045\042\043" +
    "\043\032\044\034\045\060\046\056\047\055\050\044\051" +
    "\054\052\023\053\022\054\024\001\002\000\116\004\031" +
    "\005\016\006\046\007\035\010\020\011\033\012\025\013" +
    "\041\014\047\020\uffa6\021\021\022\037\023\050\024\057" +
    "\025\053\026\017\027\030\030\062\031\015\032\027\033" +
    "\026\034\052\035\051\036\040\037\061\040\036\041\045" +
    "\042\043\043\032\044\034\045\060\046\056\047\055\050" +
    "\044\051\054\052\023\053\022\054\024\001\002\000\116" +
    "\004\031\005\016\006\046\007\035\010\020\011\033\012" +
    "\025\013\041\014\047\020\uffa6\021\021\022\037\023\050" +
    "\024\057\025\053\026\017\027\030\030\062\031\015\032" +
    "\027\033\026\034\052\035\051\036\040\037\061\040\036" +
    "\041\045\042\043\043\032\044\034\045\060\046\056\047" +
    "\055\050\044\051\054\052\023\053\022\054\024\001\002" +
    "\000\116\004\031\005\016\006\046\007\035\010\020\011" +
    "\033\012\025\013\041\014\047\020\uffa6\021\021\022\037" +
    "\023\050\024\057\025\053\026\017\027\030\030\062\031" +
    "\015\032\027\033\026\034\052\035\051\036\040\037\061" +
    "\040\036\041\045\042\043\043\032\044\034\045\060\046" +
    "\056\047\055\050\044\051\054\052\023\053\022\054\024" +
    "\001\002\000\116\004\031\005\016\006\046\007\035\010" +
    "\020\011\033\012\025\013\041\014\047\020\uffa6\021\021" +
    "\022\037\023\050\024\057\025\053\026\017\027\030\030" +
    "\062\031\015\032\027\033\026\034\052\035\051\036\040" +
    "\037\061\040\036\041\045\042\043\043\032\044\034\045" +
    "\060\046\056\047\055\050\044\051\054\052\023\053\022" +
    "\054\024\001\002\000\116\004\031\005\016\006\046\007" +
    "\035\010\020\011\033\012\025\013\041\014\047\020\uffa6" +
    "\021\021\022\037\023\050\024\057\025\053\026\017\027" +
    "\030\030\062\031\015\032\027\033\026\034\052\035\051" +
    "\036\040\037\061\040\036\041\045\042\043\043\032\044" +
    "\034\045\060\046\056\047\055\050\044\051\054\052\023" +
    "\053\022\054\024\001\002\000\116\004\031\005\016\006" +
    "\046\007\035\010\020\011\033\012\025\013\041\014\047" +
    "\020\uffa6\021\021\022\037\023\050\024\057\025\053\026" +
    "\017\027\030\030\062\031\015\032\027\033\026\034\052" +
    "\035\051\036\040\037\061\040\036\041\045\042\043\043" +
    "\032\044\034\045\060\046\056\047\055\050\044\051\054" +
    "\052\023\053\022\054\024\001\002\000\116\004\031\005" +
    "\016\006\046\007\035\010\020\011\033\012\025\013\041" +
    "\014\047\020\uffa6\021\021\022\037\023\050\024\057\025" +
    "\053\026\017\027\030\030\062\031\015\032\027\033\026" +
    "\034\052\035\051\036\040\037\061\040\036\041\045\042" +
    "\043\043\032\044\034\045\060\046\056\047\055\050\044" +
    "\051\054\052\023\053\022\054\024\001\002\000\116\004" +
    "\031\005\016\006\046\007\035\010\020\011\033\012\025" +
    "\013\041\014\047\020\uffa6\021\021\022\037\023\050\024" +
    "\057\025\053\026\017\027\030\030\062\031\015\032\027" +
    "\033\026\034\052\035\051\036\040\037\061\040\036\041" +
    "\045\042\043\043\032\044\034\045\060\046\056\047\055" +
    "\050\044\051\054\052\023\053\022\054\024\001\002\000" +
    "\116\004\031\005\016\006\046\007\035\010\020\011\033" +
    "\012\025\013\041\014\047\020\uffa6\021\021\022\037\023" +
    "\050\024\057\025\053\026\017\027\030\030\062\031\015" +
    "\032\027\033\026\034\052\035\051\036\040\037\061\040" +
    "\036\041\045\042\043\043\032\044\034\045\060\046\056" +
    "\047\055\050\044\051\054\052\023\053\022\054\024\001" +
    "\002\000\116\004\031\005\016\006\046\007\035\010\020" +
    "\011\033\012\025\013\041\014\047\020\uffa6\021\021\022" +
    "\037\023\050\024\057\025\053\026\017\027\030\030\062" +
    "\031\015\032\027\033\026\034\052\035\051\036\040\037" +
    "\061\040\036\041\045\042\043\043\032\044\034\045\060" +
    "\046\056\047\055\050\044\051\054\052\023\053\022\054" +
    "\024\001\002\000\116\004\031\005\016\006\046\007\035" +
    "\010\020\011\033\012\025\013\041\014\047\020\uffa6\021" +
    "\021\022\037\023\050\024\057\025\053\026\017\027\030" +
    "\030\062\031\015\032\027\033\026\034\052\035\051\036" +
    "\040\037\061\040\036\041\045\042\043\043\032\044\034" +
    "\045\060\046\056\047\055\050\044\051\054\052\023\053" +
    "\022\054\024\001\002\000\116\004\031\005\016\006\046" +
    "\007\035\010\020\011\033\012\025\013\041\014\047\020" +
    "\uffa6\021\021\022\037\023\050\024\057\025\053\026\017" +
    "\027\030\030\062\031\015\032\027\033\026\034\052\035" +
    "\051\036\040\037\061\040\036\041\045\042\043\043\032" +
    "\044\034\045\060\046\056\047\055\050\044\051\054\052" +
    "\023\053\022\054\024\001\002\000\116\004\031\005\016" +
    "\006\046\007\035\010\020\011\033\012\025\013\041\014" +
    "\047\020\uffa6\021\021\022\037\023\050\024\057\025\053" +
    "\026\017\027\030\030\062\031\015\032\027\033\026\034" +
    "\052\035\051\036\040\037\061\040\036\041\045\042\043" +
    "\043\032\044\034\045\060\046\056\047\055\050\044\051" +
    "\054\052\023\053\022\054\024\001\002\000\116\004\031" +
    "\005\016\006\046\007\035\010\020\011\033\012\025\013" +
    "\041\014\047\020\uffa6\021\021\022\037\023\050\024\057" +
    "\025\053\026\017\027\030\030\062\031\015\032\027\033" +
    "\026\034\052\035\051\036\040\037\061\040\036\041\045" +
    "\042\043\043\032\044\034\045\060\046\056\047\055\050" +
    "\044\051\054\052\023\053\022\054\024\001\002\000\116" +
    "\004\031\005\016\006\046\007\035\010\020\011\033\012" +
    "\025\013\041\014\047\020\uffa6\021\021\022\037\023\050" +
    "\024\057\025\053\026\017\027\030\030\062\031\015\032" +
    "\027\033\026\034\052\035\051\036\040\037\061\040\036" +
    "\041\045\042\043\043\032\044\034\045\060\046\056\047" +
    "\055\050\044\051\054\052\023\053\022\054\024\001\002" +
    "\000\116\004\031\005\016\006\046\007\035\010\020\011" +
    "\033\012\025\013\041\014\047\020\uffa6\021\021\022\037" +
    "\023\050\024\057\025\053\026\017\027\030\030\062\031" +
    "\015\032\027\033\026\034\052\035\051\036\040\037\061" +
    "\040\036\041\045\042\043\043\032\044\034\045\060\046" +
    "\056\047\055\050\044\051\054\052\023\053\022\054\024" +
    "\001\002\000\116\004\031\005\016\006\046\007\035\010" +
    "\020\011\033\012\025\013\041\014\047\020\uffa6\021\021" +
    "\022\037\023\050\024\057\025\053\026\017\027\030\030" +
    "\062\031\015\032\027\033\026\034\052\035\051\036\040" +
    "\037\061\040\036\041\045\042\043\043\032\044\034\045" +
    "\060\046\056\047\055\050\044\051\054\052\023\053\022" +
    "\054\024\001\002\000\116\004\031\005\016\006\046\007" +
    "\035\010\020\011\033\012\025\013\041\014\047\020\uffa6" +
    "\021\021\022\037\023\050\024\057\025\053\026\017\027" +
    "\030\030\062\031\015\032\027\033\026\034\052\035\051" +
    "\036\040\037\061\040\036\041\045\042\043\043\032\044" +
    "\034\045\060\046\056\047\055\050\044\051\054\052\023" +
    "\053\022\054\024\001\002\000\116\004\031\005\016\006" +
    "\046\007\035\010\020\011\033\012\025\013\041\014\047" +
    "\020\uffa6\021\021\022\037\023\050\024\057\025\053\026" +
    "\017\027\030\030\062\031\015\032\027\033\026\034\052" +
    "\035\051\036\040\037\061\040\036\041\045\042\043\043" +
    "\032\044\034\045\060\046\056\047\055\050\044\051\054" +
    "\052\023\053\022\054\024\001\002\000\004\020\103\001" +
    "\002\000\116\004\031\005\016\006\046\007\035\010\020" +
    "\011\033\012\025\013\041\014\047\020\uffa6\021\021\022" +
    "\037\023\050\024\057\025\053\026\017\027\030\030\062" +
    "\031\015\032\027\033\026\034\052\035\051\036\040\037" +
    "\061\040\036\041\045\042\043\043\032\044\034\045\060" +
    "\046\056\047\055\050\044\051\054\052\023\053\022\054" +
    "\024\001\002\000\116\004\031\005\016\006\046\007\035" +
    "\010\020\011\033\012\025\013\041\014\047\020\uffa6\021" +
    "\021\022\037\023\050\024\057\025\053\026\017\027\030" +
    "\030\062\031\015\032\027\033\026\034\052\035\051\036" +
    "\040\037\061\040\036\041\045\042\043\043\032\044\034" +
    "\045\060\046\056\047\055\050\044\051\054\052\023\053" +
    "\022\054\024\001\002\000\116\004\031\005\016\006\046" +
    "\007\035\010\020\011\033\012\025\013\041\014\047\020" +
    "\uffa6\021\021\022\037\023\050\024\057\025\053\026\017" +
    "\027\030\030\062\031\015\032\027\033\026\034\052\035" +
    "\051\036\040\037\061\040\036\041\045\042\043\043\032" +
    "\044\034\045\060\046\056\047\055\050\044\051\054\052" +
    "\023\053\022\054\024\001\002\000\116\004\031\005\016" +
    "\006\046\007\035\010\020\011\033\012\025\013\041\014" +
    "\047\020\uffa6\021\021\022\037\023\050\024\057\025\053" +
    "\026\017\027\030\030\062\031\015\032\027\033\026\034" +
    "\052\035\051\036\040\037\061\040\036\041\045\042\043" +
    "\043\032\044\034\045\060\046\056\047\055\050\044\051" +
    "\054\052\023\053\022\054\024\001\002\000\116\004\031" +
    "\005\016\006\046\007\035\010\020\011\033\012\025\013" +
    "\041\014\047\020\uffa6\021\021\022\037\023\050\024\057" +
    "\025\053\026\017\027\030\030\062\031\015\032\027\033" +
    "\026\034\052\035\051\036\040\037\061\040\036\041\045" +
    "\042\043\043\032\044\034\045\060\046\056\047\055\050" +
    "\044\051\054\052\023\053\022\054\024\001\002\000\116" +
    "\004\031\005\016\006\046\007\035\010\020\011\033\012" +
    "\025\013\041\014\047\020\uffa6\021\021\022\037\023\050" +
    "\024\057\025\053\026\017\027\030\030\062\031\015\032" +
    "\027\033\026\034\052\035\051\036\040\037\061\040\036" +
    "\041\045\042\043\043\032\044\034\045\060\046\056\047" +
    "\055\050\044\051\054\052\023\053\022\054\024\001\002" +
    "\000\116\004\031\005\016\006\046\007\035\010\020\011" +
    "\033\012\025\013\041\014\047\020\uffa6\021\021\022\037" +
    "\023\050\024\057\025\053\026\017\027\030\030\062\031" +
    "\015\032\027\033\026\034\052\035\051\036\040\037\061" +
    "\040\036\041\045\042\043\043\032\044\034\045\060\046" +
    "\056\047\055\050\044\051\054\052\023\053\022\054\024" +
    "\001\002\000\116\004\031\005\016\006\046\007\035\010" +
    "\020\011\033\012\025\013\041\014\047\020\uffa6\021\021" +
    "\022\037\023\050\024\057\025\053\026\017\027\030\030" +
    "\062\031\015\032\027\033\026\034\052\035\051\036\040" +
    "\037\061\040\036\041\045\042\043\043\032\044\034\045" +
    "\060\046\056\047\055\050\044\051\054\052\023\053\022" +
    "\054\024\001\002\000\116\004\031\005\016\006\046\007" +
    "\035\010\020\011\033\012\025\013\041\014\047\020\uffa6" +
    "\021\021\022\037\023\050\024\057\025\053\026\017\027" +
    "\030\030\062\031\015\032\027\033\026\034\052\035\051" +
    "\036\040\037\061\040\036\041\045\042\043\043\032\044" +
    "\034\045\060\046\056\047\055\050\044\051\054\052\023" +
    "\053\022\054\024\001\002\000\116\004\031\005\016\006" +
    "\046\007\035\010\020\011\033\012\025\013\041\014\047" +
    "\020\uffa6\021\021\022\037\023\050\024\057\025\053\026" +
    "\017\027\030\030\062\031\015\032\027\033\026\034\052" +
    "\035\051\036\040\037\061\040\036\041\045\042\043\043" +
    "\032\044\034\045\060\046\056\047\055\050\044\051\054" +
    "\052\023\053\022\054\024\001\002\000\116\004\031\005" +
    "\016\006\046\007\035\010\020\011\033\012\025\013\041" +
    "\014\047\020\uffa6\021\021\022\037\023\050\024\057\025" +
    "\053\026\017\027\030\030\062\031\015\032\027\033\026" +
    "\034\052\035\051\036\040\037\061\040\036\041\045\042" +
    "\043\043\032\044\034\045\060\046\056\047\055\050\044" +
    "\051\054\052\023\053\022\054\024\001\002\000\116\004" +
    "\031\005\016\006\046\007\035\010\020\011\033\012\025" +
    "\013\041\014\047\020\uffa6\021\021\022\037\023\050\024" +
    "\057\025\053\026\017\027\030\030\062\031\015\032\027" +
    "\033\026\034\052\035\051\036\040\037\061\040\036\041" +
    "\045\042\043\043\032\044\034\045\060\046\056\047\055" +
    "\050\044\051\054\052\023\053\022\054\024\001\002\000" +
    "\116\004\031\005\016\006\046\007\035\010\020\011\033" +
    "\012\025\013\041\014\047\020\uffa6\021\021\022\037\023" +
    "\050\024\057\025\053\026\017\027\030\030\062\031\015" +
    "\032\027\033\026\034\052\035\051\036\040\037\061\040" +
    "\036\041\045\042\043\043\032\044\034\045\060\046\056" +
    "\047\055\050\044\051\054\052\023\053\022\054\024\001" +
    "\002\000\116\004\031\005\016\006\046\007\035\010\020" +
    "\011\033\012\025\013\041\014\047\020\uffa6\021\021\022" +
    "\037\023\050\024\057\025\053\026\017\027\030\030\062" +
    "\031\015\032\027\033\026\034\052\035\051\036\040\037" +
    "\061\040\036\041\045\042\043\043\032\044\034\045\060" +
    "\046\056\047\055\050\044\051\054\052\023\053\022\054" +
    "\024\001\002\000\116\004\031\005\016\006\046\007\035" +
    "\010\020\011\033\012\025\013\041\014\047\020\uffa6\021" +
    "\021\022\037\023\050\024\057\025\053\026\017\027\030" +
    "\030\062\031\015\032\027\033\026\034\052\035\051\036" +
    "\040\037\061\040\036\041\045\042\043\043\032\044\034" +
    "\045\060\046\056\047\055\050\044\051\054\052\023\053" +
    "\022\054\024\001\002\000\116\004\031\005\016\006\046" +
    "\007\035\010\020\011\033\012\025\013\041\014\047\020" +
    "\uffa6\021\021\022\037\023\050\024\057\025\053\026\017" +
    "\027\030\030\062\031\015\032\027\033\026\034\052\035" +
    "\051\036\040\037\061\040\036\041\045\042\043\043\032" +
    "\044\034\045\060\046\056\047\055\050\044\051\054\052" +
    "\023\053\022\054\024\001\002\000\004\020\uffba\001\002" +
    "\000\004\020\uffb3\001\002\000\004\020\uffad\001\002\000" +
    "\004\020\uffbe\001\002\000\004\020\uffac\001\002\000\004" +
    "\020\uffab\001\002\000\004\020\uffa9\001\002\000\004\020" +
    "\uffbd\001\002\000\004\020\uffb6\001\002\000\004\020\uffb5" +
    "\001\002\000\004\020\uffbf\001\002\000\004\020\uffc2\001" +
    "\002\000\004\020\uffc8\001\002\000\004\020\uffb1\001\002" +
    "\000\004\020\uffaa\001\002\000\004\020\uffb0\001\002\000" +
    "\036\004\ufff1\007\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\044\ufff1\046\ufff1\047" +
    "\ufff1\051\ufff1\001\002\000\004\020\uffc3\001\002\000\004" +
    "\020\uffb4\001\002\000\004\020\uffc0\001\002\000\004\020" +
    "\uffb2\001\002\000\004\020\uffc7\001\002\000\004\020\uffae" +
    "\001\002\000\004\020\uffc5\001\002\000\004\020\uffaf\001" +
    "\002\000\004\020\uffca\001\002\000\004\020\uffbb\001\002" +
    "\000\004\020\uffb8\001\002\000\004\020\uffb7\001\002\000" +
    "\004\020\uffc4\001\002\000\004\020\uffcb\001\002\000\004" +
    "\020\uffa8\001\002\000\004\020\uffa7\001\002\000\004\020" +
    "\uffc1\001\002\000\004\020\uffc6\001\002\000\004\020\uffbc" +
    "\001\002\000\004\020\uffc9\001\002\000\004\020\uffb9\001" +
    "\002\000\004\002\001\001\002\000\004\015\175\001\002" +
    "\000\016\015\uffa4\021\140\022\136\023\135\024\134\025" +
    "\137\001\002\000\004\012\170\001\002\000\004\012\164" +
    "\001\002\000\004\012\155\001\002\000\004\012\151\001" +
    "\002\000\004\012\141\001\002\000\006\004\142\013\uff9b" +
    "\001\002\000\006\004\142\013\uff9b\001\002\000\004\013" +
    "\144\001\002\000\020\015\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\051\146\001\002\000\016\015\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\001\002\000\026" +
    "\002\ufffb\004\ufffb\007\ufffb\015\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\051\146\001\002\000\024\002\ufffc" +
    "\004\ufffc\007\ufffc\015\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\001\002\000\004\013\uff9c\001\002\000\004" +
    "\004\152\001\002\000\004\013\153\001\002\000\020\015" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\051\146" +
    "\001\002\000\016\015\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\001\002\000\004\005\156\001\002\000\006" +
    "\013\uffa3\014\162\001\002\000\004\013\160\001\002\000" +
    "\020\015\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\051\146\001\002\000\016\015\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\001\002\000\004\005\156\001\002" +
    "\000\004\013\uffa2\001\002\000\006\004\142\013\uff9b\001" +
    "\002\000\004\013\166\001\002\000\020\015\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\051\146\001\002\000" +
    "\016\015\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\001\002\000\004\005\171\001\002\000\004\013\172\001" +
    "\002\000\020\015\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\051\146\001\002\000\016\015\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\001\002\000\004\015\uffa5" +
    "\001\002\000\124\004\212\005\177\006\230\007\216\010" +
    "\201\011\214\012\206\013\222\014\232\015\uff71\016\231" +
    "\017\225\020\223\021\202\022\220\023\233\024\243\025" +
    "\236\026\200\027\211\030\247\031\176\032\210\033\207" +
    "\034\235\035\234\036\221\037\246\040\217\041\227\042" +
    "\224\043\213\044\215\045\244\046\242\047\240\050\226" +
    "\051\237\052\204\053\203\054\205\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\214\012\206" +
    "\013\222\014\232\015\uff71\016\231\017\225\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\224\043\213\044\215" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\214\012\206\013\222\014\232\015" +
    "\uff71\016\231\017\225\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\224\043\213\044\215\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\124\004\212\005\177\006\230\007\216\010\201\011" +
    "\214\012\206\013\222\014\232\015\uff71\016\231\017\225" +
    "\020\223\021\202\022\220\023\233\024\243\025\236\026" +
    "\200\027\211\030\247\031\176\032\210\033\207\034\235" +
    "\035\234\036\221\037\246\040\217\041\227\042\224\043" +
    "\213\044\215\045\244\046\242\047\240\050\226\051\237" +
    "\052\204\053\203\054\205\001\002\000\124\004\212\005" +
    "\177\006\230\007\216\010\201\011\214\012\206\013\222" +
    "\014\232\015\uff71\016\231\017\225\020\223\021\202\022" +
    "\220\023\233\024\243\025\236\026\200\027\211\030\247" +
    "\031\176\032\210\033\207\034\235\035\234\036\221\037" +
    "\246\040\217\041\227\042\224\043\213\044\215\045\244" +
    "\046\242\047\240\050\226\051\237\052\204\053\203\054" +
    "\205\001\002\000\124\004\212\005\177\006\230\007\216" +
    "\010\201\011\214\012\206\013\222\014\232\015\uff71\016" +
    "\231\017\225\020\223\021\202\022\220\023\233\024\243" +
    "\025\236\026\200\027\211\030\247\031\176\032\210\033" +
    "\207\034\235\035\234\036\221\037\246\040\217\041\227" +
    "\042\224\043\213\044\215\045\244\046\242\047\240\050" +
    "\226\051\237\052\204\053\203\054\205\001\002\000\124" +
    "\004\212\005\177\006\230\007\216\010\201\011\214\012" +
    "\206\013\222\014\232\015\uff71\016\231\017\225\020\223" +
    "\021\202\022\220\023\233\024\243\025\236\026\200\027" +
    "\211\030\247\031\176\032\210\033\207\034\235\035\234" +
    "\036\221\037\246\040\217\041\227\042\224\043\213\044" +
    "\215\045\244\046\242\047\240\050\226\051\237\052\204" +
    "\053\203\054\205\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\214\012\206\013\222\014\232" +
    "\015\uff71\016\231\017\225\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\224\043\213\044\215\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\214\012\206\013\222\014\232\015\uff71\016\231\017" +
    "\225\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\224" +
    "\043\213\044\215\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\214\012\206\013" +
    "\222\014\232\015\uff71\016\231\017\225\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\224\043\213\044\215\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\124\004\212\005\177\006\230\007" +
    "\216\010\201\011\214\012\206\013\222\014\232\015\uff71" +
    "\016\231\017\225\020\223\021\202\022\220\023\233\024" +
    "\243\025\236\026\200\027\211\030\247\031\176\032\210" +
    "\033\207\034\235\035\234\036\221\037\246\040\217\041" +
    "\227\042\224\043\213\044\215\045\244\046\242\047\240" +
    "\050\226\051\237\052\204\053\203\054\205\001\002\000" +
    "\124\004\212\005\177\006\230\007\216\010\201\011\214" +
    "\012\206\013\222\014\232\015\uff71\016\231\017\225\020" +
    "\223\021\202\022\220\023\233\024\243\025\236\026\200" +
    "\027\211\030\247\031\176\032\210\033\207\034\235\035" +
    "\234\036\221\037\246\040\217\041\227\042\224\043\213" +
    "\044\215\045\244\046\242\047\240\050\226\051\237\052" +
    "\204\053\203\054\205\001\002\000\124\004\212\005\177" +
    "\006\230\007\216\010\201\011\214\012\206\013\222\014" +
    "\232\015\uff71\016\231\017\225\020\223\021\202\022\220" +
    "\023\233\024\243\025\236\026\200\027\211\030\247\031" +
    "\176\032\210\033\207\034\235\035\234\036\221\037\246" +
    "\040\217\041\227\042\224\043\213\044\215\045\244\046" +
    "\242\047\240\050\226\051\237\052\204\053\203\054\205" +
    "\001\002\000\124\004\212\005\177\006\230\007\216\010" +
    "\201\011\214\012\206\013\222\014\232\015\uff71\016\231" +
    "\017\225\020\223\021\202\022\220\023\233\024\243\025" +
    "\236\026\200\027\211\030\247\031\176\032\210\033\207" +
    "\034\235\035\234\036\221\037\246\040\217\041\227\042" +
    "\224\043\213\044\215\045\244\046\242\047\240\050\226" +
    "\051\237\052\204\053\203\054\205\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\214\012\206" +
    "\013\222\014\232\015\uff71\016\231\017\225\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\224\043\213\044\215" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\214\012\206\013\222\014\232\015" +
    "\uff71\016\231\017\225\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\224\043\213\044\215\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\124\004\212\005\177\006\230\007\216\010\201\011" +
    "\214\012\206\013\222\014\232\015\uff71\016\231\017\225" +
    "\020\223\021\202\022\220\023\233\024\243\025\236\026" +
    "\200\027\211\030\247\031\176\032\210\033\207\034\235" +
    "\035\234\036\221\037\246\040\217\041\227\042\224\043" +
    "\213\044\215\045\244\046\242\047\240\050\226\051\237" +
    "\052\204\053\203\054\205\001\002\000\124\004\212\005" +
    "\177\006\230\007\216\010\201\011\214\012\206\013\222" +
    "\014\232\015\uff71\016\231\017\225\020\223\021\202\022" +
    "\220\023\233\024\243\025\236\026\200\027\211\030\247" +
    "\031\176\032\210\033\207\034\235\035\234\036\221\037" +
    "\246\040\217\041\227\042\224\043\213\044\215\045\244" +
    "\046\242\047\240\050\226\051\237\052\204\053\203\054" +
    "\205\001\002\000\124\004\212\005\177\006\230\007\216" +
    "\010\201\011\214\012\206\013\222\014\232\015\uff71\016" +
    "\231\017\225\020\223\021\202\022\220\023\233\024\243" +
    "\025\236\026\200\027\211\030\247\031\176\032\210\033" +
    "\207\034\235\035\234\036\221\037\246\040\217\041\227" +
    "\042\224\043\213\044\215\045\244\046\242\047\240\050" +
    "\226\051\237\052\204\053\203\054\205\001\002\000\124" +
    "\004\212\005\177\006\230\007\216\010\201\011\214\012" +
    "\206\013\222\014\232\015\uff71\016\231\017\225\020\223" +
    "\021\202\022\220\023\233\024\243\025\236\026\200\027" +
    "\211\030\247\031\176\032\210\033\207\034\235\035\234" +
    "\036\221\037\246\040\217\041\227\042\224\043\213\044" +
    "\215\045\244\046\242\047\240\050\226\051\237\052\204" +
    "\053\203\054\205\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\214\012\206\013\222\014\232" +
    "\015\uff71\016\231\017\225\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\224\043\213\044\215\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\214\012\206\013\222\014\232\015\uff71\016\231\017" +
    "\225\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\224" +
    "\043\213\044\215\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\214\012\206\013" +
    "\222\014\232\015\uff71\016\231\017\225\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\224\043\213\044\215\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\124\004\212\005\177\006\230\007" +
    "\216\010\201\011\214\012\206\013\222\014\232\015\uff71" +
    "\016\231\017\225\020\223\021\202\022\220\023\233\024" +
    "\243\025\236\026\200\027\211\030\247\031\176\032\210" +
    "\033\207\034\235\035\234\036\221\037\246\040\217\041" +
    "\227\042\224\043\213\044\215\045\244\046\242\047\240" +
    "\050\226\051\237\052\204\053\203\054\205\001\002\000" +
    "\124\004\212\005\177\006\230\007\216\010\201\011\214" +
    "\012\206\013\222\014\232\015\uff71\016\231\017\225\020" +
    "\223\021\202\022\220\023\233\024\243\025\236\026\200" +
    "\027\211\030\247\031\176\032\210\033\207\034\235\035" +
    "\234\036\221\037\246\040\217\041\227\042\224\043\213" +
    "\044\215\045\244\046\242\047\240\050\226\051\237\052" +
    "\204\053\203\054\205\001\002\000\124\004\212\005\177" +
    "\006\230\007\216\010\201\011\214\012\206\013\222\014" +
    "\232\015\uff71\016\231\017\225\020\223\021\202\022\220" +
    "\023\233\024\243\025\236\026\200\027\211\030\247\031" +
    "\176\032\210\033\207\034\235\035\234\036\221\037\246" +
    "\040\217\041\227\042\224\043\213\044\215\045\244\046" +
    "\242\047\240\050\226\051\237\052\204\053\203\054\205" +
    "\001\002\000\124\004\212\005\177\006\230\007\216\010" +
    "\201\011\214\012\206\013\222\014\232\015\uff71\016\231" +
    "\017\225\020\223\021\202\022\220\023\233\024\243\025" +
    "\236\026\200\027\211\030\247\031\176\032\210\033\207" +
    "\034\235\035\234\036\221\037\246\040\217\041\227\042" +
    "\224\043\213\044\215\045\244\046\242\047\240\050\226" +
    "\051\237\052\204\053\203\054\205\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\214\012\206" +
    "\013\222\014\232\015\uff71\016\231\017\225\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\224\043\213\044\215" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\214\012\206\013\222\014\232\015" +
    "\uff71\016\231\017\225\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\224\043\213\044\215\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\124\004\212\005\177\006\230\007\216\010\201\011" +
    "\214\012\206\013\222\014\232\015\uff71\016\231\017\225" +
    "\020\223\021\202\022\220\023\233\024\243\025\236\026" +
    "\200\027\211\030\247\031\176\032\210\033\207\034\235" +
    "\035\234\036\221\037\246\040\217\041\227\042\224\043" +
    "\213\044\215\045\244\046\242\047\240\050\226\051\237" +
    "\052\204\053\203\054\205\001\002\000\124\004\212\005" +
    "\177\006\230\007\216\010\201\011\214\012\206\013\222" +
    "\014\232\015\uff71\016\231\017\225\020\223\021\202\022" +
    "\220\023\233\024\243\025\236\026\200\027\211\030\247" +
    "\031\176\032\210\033\207\034\235\035\234\036\221\037" +
    "\246\040\217\041\227\042\224\043\213\044\215\045\244" +
    "\046\242\047\240\050\226\051\237\052\204\053\203\054" +
    "\205\001\002\000\124\004\212\005\177\006\230\007\216" +
    "\010\201\011\214\012\206\013\222\014\232\015\uff71\016" +
    "\231\017\225\020\223\021\202\022\220\023\233\024\243" +
    "\025\236\026\200\027\211\030\247\031\176\032\210\033" +
    "\207\034\235\035\234\036\221\037\246\040\217\041\227" +
    "\042\224\043\213\044\215\045\244\046\242\047\240\050" +
    "\226\051\237\052\204\053\203\054\205\001\002\000\124" +
    "\004\212\005\177\006\230\007\216\010\201\011\214\012" +
    "\206\013\222\014\232\015\uff71\016\231\017\225\020\223" +
    "\021\202\022\220\023\233\024\243\025\236\026\200\027" +
    "\211\030\247\031\176\032\210\033\207\034\235\035\234" +
    "\036\221\037\246\040\217\041\227\042\224\043\213\044" +
    "\215\045\244\046\242\047\240\050\226\051\237\052\204" +
    "\053\203\054\205\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\214\012\206\013\222\014\232" +
    "\015\uff71\016\231\017\225\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\224\043\213\044\215\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\214\012\206\013\222\014\232\015\uff71\016\231\017" +
    "\225\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\224" +
    "\043\213\044\215\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\214\012\206\013" +
    "\222\014\232\015\uff71\016\231\017\225\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\224\043\213\044\215\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\004\015\255\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\214\012\206" +
    "\013\222\014\232\015\uff71\016\231\017\225\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\224\043\213\044\215" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\214\012\206\013\222\014\232\015" +
    "\uff71\016\231\017\225\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\224\043\213\044\215\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\124\004\212\005\177\006\230\007\216\010\201\011" +
    "\214\012\206\013\222\014\232\015\uff71\016\231\017\225" +
    "\020\223\021\202\022\220\023\233\024\243\025\236\026" +
    "\200\027\211\030\247\031\176\032\210\033\207\034\235" +
    "\035\234\036\221\037\246\040\217\041\227\042\224\043" +
    "\213\044\215\045\244\046\242\047\240\050\226\051\237" +
    "\052\204\053\203\054\205\001\002\000\004\015\uff9a\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\214\012\206\013\222\014\232\015\uff71\016\231\017" +
    "\225\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\224" +
    "\043\213\044\215\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\214\012\206\013" +
    "\222\014\232\015\uff71\016\231\017\225\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\224\043\213\044\215\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\004\015\uff88\001\002\000\004\015" +
    "\uff81\001\002\000\004\015\uff7b\001\002\000\004\015\uff8c" +
    "\001\002\000\004\015\uff7a\001\002\000\016\004\ufff3\015" +
    "\ufff3\016\007\017\012\044\ufff3\051\013\001\002\000\010" +
    "\004\260\015\uff6a\044\262\001\002\000\004\015\uff70\001" +
    "\002\000\004\043\uff6f\001\002\000\004\015\000\001\002" +
    "\000\004\043\263\001\002\000\020\014\265\032\270\034" +
    "\274\037\272\040\267\041\271\042\273\001\002\000\006" +
    "\013\uff69\045\303\001\002\000\036\013\uff67\014\265\026" +
    "\uff5f\027\uff5f\030\uff5f\032\270\033\uff67\034\274\035\uff67" +
    "\037\272\040\267\041\271\042\273\045\uff67\001\002\000" +
    "\004\013\u0125\001\002\000\036\013\uff67\014\265\026\uff60" +
    "\027\uff60\030\uff60\032\270\033\uff67\034\274\035\uff67\037" +
    "\272\040\267\041\271\042\273\045\uff67\001\002\000\024" +
    "\005\u0119\007\u0118\014\265\032\270\034\274\037\272\040" +
    "\267\041\271\042\273\001\002\000\036\013\uff67\014\265" +
    "\026\uff5e\027\uff5e\030\uff5e\032\270\033\uff67\034\274\035" +
    "\uff67\037\272\040\267\041\271\042\273\045\uff67\001\002" +
    "\000\036\013\uff67\014\265\026\uff61\027\uff61\030\uff61\032" +
    "\270\033\uff67\034\274\035\uff67\037\272\040\267\041\271" +
    "\042\273\045\uff67\001\002\000\114\004\326\005\313\006" +
    "\341\007\332\010\315\011\330\012\322\013\336\014\343" +
    "\021\316\022\334\023\344\024\353\025\347\026\314\027" +
    "\325\030\356\031\312\032\324\033\323\034\346\035\345" +
    "\036\335\037\355\040\333\041\340\042\uff2c\043\327\044" +
    "\331\045\354\046\352\047\351\050\337\051\350\052\320" +
    "\053\317\054\321\001\002\000\020\014\265\032\270\034" +
    "\274\037\272\040\267\041\271\042\273\001\002\000\010" +
    "\026\300\027\276\030\277\001\002\000\030\013\uff67\014" +
    "\265\032\270\033\uff67\034\274\035\uff67\037\272\040\267" +
    "\041\271\042\273\045\uff67\001\002\000\030\013\uff67\014" +
    "\265\032\270\033\uff67\034\274\035\uff67\037\272\040\267" +
    "\041\271\042\273\045\uff67\001\002\000\030\013\uff67\014" +
    "\265\032\270\033\uff67\034\274\035\uff67\037\272\040\267" +
    "\041\271\042\273\045\uff67\001\002\000\012\013\uff68\033" +
    "\uff68\035\uff68\045\303\001\002\000\012\013\uff54\033\uff54" +
    "\035\uff54\045\uff54\001\002\000\020\014\265\032\270\034" +
    "\274\037\272\040\267\041\271\042\273\001\002\000\012" +
    "\013\uff51\033\uff51\035\uff51\045\uff51\001\002\000\012\013" +
    "\uff52\033\uff52\035\uff52\045\uff52\001\002\000\012\013\uff53" +
    "\033\uff53\035\uff53\045\uff53\001\002\000\006\035\310\045" +
    "\303\001\002\000\036\013\uff67\014\265\026\uff64\027\uff64" +
    "\030\uff64\032\270\033\uff67\034\274\035\uff67\037\272\040" +
    "\267\041\271\042\273\045\uff67\001\002\000\012\013\uff5b" +
    "\033\uff5b\035\uff5b\045\uff5b\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\114\004\326\005" +
    "\313\006\341\007\332\010\315\011\330\012\322\013\336" +
    "\014\343\021\316\022\334\023\344\024\353\025\347\026" +
    "\314\027\325\030\356\031\312\032\324\033\323\034\346" +
    "\035\345\036\335\037\355\040\333\041\340\042\uff2c\043" +
    "\327\044\331\045\354\046\352\047\351\050\337\051\350" +
    "\052\320\053\317\054\321\001\002\000\004\042\373\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\114\004\326\005\313\006\341\007\332\010\315" +
    "\011\330\012\322\013\336\014\343\021\316\022\334\023" +
    "\344\024\353\025\347\026\314\027\325\030\356\031\312" +
    "\032\324\033\323\034\346\035\345\036\335\037\355\040" +
    "\333\041\340\042\uff2c\043\327\044\331\045\354\046\352" +
    "\047\351\050\337\051\350\052\320\053\317\054\321\001" +
    "\002\000\004\042\uff3f\001\002\000\004\042\uff38\001\002" +
    "\000\004\042\uff33\001\002\000\004\042\uff43\001\002\000" +
    "\004\042\uff32\001\002\000\004\042\uff31\001\002\000\004" +
    "\042\uff2f\001\002\000\004\042\uff42\001\002\000\004\042" +
    "\uff3b\001\002\000\004\042\uff3a\001\002\000\004\042\uff44" +
    "\001\002\000\004\042\uff47\001\002\000\036\013\uff67\014" +
    "\265\026\uff62\027\uff62\030\uff62\032\270\033\uff67\034\274" +
    "\035\uff67\037\272\040\267\041\271\042\273\045\uff67\001" +
    "\002\000\012\013\uff59\033\uff59\035\uff59\045\uff59\001\002" +
    "\000\004\042\uff4d\001\002\000\004\042\uff36\001\002\000" +
    "\004\042\uff30\001\002\000\004\042\uff48\001\002\000\004" +
    "\042\uff39\001\002\000\004\042\uff45\001\002\000\004\042" +
    "\uff37\001\002\000\004\042\uff4c\001\002\000\004\042\uff34" +
    "\001\002\000\004\042\uff4a\001\002\000\004\042\uff35\001" +
    "\002\000\004\042\uff4f\001\002\000\004\042\uff40\001\002" +
    "\000\004\042\uff3d\001\002\000\004\042\uff3c\001\002\000" +
    "\004\042\uff49\001\002\000\004\042\uff50\001\002\000\004" +
    "\042\uff2e\001\002\000\004\042\uff2d\001\002\000\004\042" +
    "\uff46\001\002\000\004\042\uff4b\001\002\000\004\042\uff41" +
    "\001\002\000\004\042\uff4e\001\002\000\004\042\uff3e\001" +
    "\002\000\012\013\uff58\033\uff58\035\uff58\045\uff58\001\002" +
    "\000\012\013\uff56\033\uff56\035\uff56\045\uff56\001\002\000" +
    "\006\033\u0122\045\303\001\002\000\004\036\u011e\001\002" +
    "\000\004\036\u011a\001\002\000\004\005\u011b\001\002\000" +
    "\004\033\u011c\001\002\000\036\013\uff67\014\265\026\uff66" +
    "\027\uff66\030\uff66\032\270\033\uff67\034\274\035\uff67\037" +
    "\272\040\267\041\271\042\273\045\uff67\001\002\000\012" +
    "\013\uff5d\033\uff5d\035\uff5d\045\uff5d\001\002\000\004\007" +
    "\u011f\001\002\000\004\033\u0120\001\002\000\036\013\uff67" +
    "\014\265\026\uff65\027\uff65\030\uff65\032\270\033\uff67\034" +
    "\274\035\uff67\037\272\040\267\041\271\042\273\045\uff67" +
    "\001\002\000\012\013\uff5c\033\uff5c\035\uff5c\045\uff5c\001" +
    "\002\000\036\013\uff67\014\265\026\uff63\027\uff63\030\uff63" +
    "\032\270\033\uff67\034\274\035\uff67\037\272\040\267\041" +
    "\271\042\273\045\uff67\001\002\000\012\013\uff5a\033\uff5a" +
    "\035\uff5a\045\uff5a\001\002\000\012\013\uff57\033\uff57\035" +
    "\uff57\045\uff57\001\002\000\010\016\uff6c\017\uff6c\051\uff6c" +
    "\001\002\000\010\016\007\017\012\051\u012a\001\002\000" +
    "\010\016\007\017\012\051\u012a\001\002\000\010\016\007" +
    "\017\012\051\u012a\001\002\000\010\004\260\015\uff6a\044" +
    "\262\001\002\000\016\004\ufff7\015\ufff7\016\007\017\012" +
    "\044\ufff7\051\u012a\001\002\000\010\004\ufffa\015\ufffa\044" +
    "\ufffa\001\002\000\004\015\uff6b\001\002\000\010\004\ufff9" +
    "\015\ufff9\044\ufff9\001\002\000\010\004\ufff8\015\ufff8\044" +
    "\ufff8\001\002\000\012\013\uff55\033\uff55\035\uff55\045\uff55" +
    "\001\002\000\004\015\u0131\001\002\000\016\015\ufff3\016" +
    "\007\017\012\046\ufff3\047\ufff3\051\013\001\002\000\010" +
    "\015\uff29\046\u0133\047\u0135\001\002\000\006\004\u01a8\007" +
    "\u01a7\001\002\000\004\015\uffff\001\002\000\006\004\u0138" +
    "\007\u0136\001\002\000\006\013\uff22\050\u013e\001\002\000" +
    "\004\013\u013b\001\002\000\006\013\uff21\050\u0139\001\002" +
    "\000\006\004\u0138\007\u0136\001\002\000\004\013\uff24\001" +
    "\002\000\016\015\ufff3\016\007\017\012\046\ufff3\047\ufff3" +
    "\051\013\001\002\000\010\015\uff29\046\u0133\047\u0135\001" +
    "\002\000\004\015\uff2a\001\002\000\006\004\u0138\007\u0136" +
    "\001\002\000\004\013\uff23\001\002\000\004\015\u0141\001" +
    "\002\000\014\004\ufff3\007\ufff3\016\007\017\012\051\013" +
    "\001\002\000\006\004\u0145\007\u0143\001\002\000\014\004" +
    "\uff16\007\uff16\010\uff16\012\uff16\052\uff16\001\002\000\004" +
    "\002\uff20\001\002\000\014\004\uff17\007\uff17\010\uff17\012" +
    "\uff17\052\uff17\001\002\000\004\002\ufffe\001\002\000\004" +
    "\010\uff1d\001\002\000\004\010\u0149\001\002\000\006\004" +
    "\u0145\007\u0143\001\002\000\004\052\u0151\001\002\000\012" +
    "\004\uff14\007\uff14\012\u014d\052\uff14\001\002\000\010\004" +
    "\uff1a\007\uff1a\052\uff18\001\002\000\006\004\u0145\007\u0143" +
    "\001\002\000\010\004\uff15\007\uff15\052\uff15\001\002\000" +
    "\006\004\u0145\007\u0143\001\002\000\004\052\uff19\001\002" +
    "\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011" +
    "\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c" +
    "\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027" +
    "\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176" +
    "\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044" +
    "\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb" +
    "\054\u015e\001\002\000\004\013\u0153\001\002\000\012\002" +
    "\uff1c\004\uff1c\007\uff1c\051\uff1c\001\002\000\012\002\ufffb" +
    "\004\ufffb\007\ufffb\051\146\001\002\000\010\002\uff1e\004" +
    "\u0145\007\u0143\001\002\000\004\002\uff1f\001\002\000\004" +
    "\002\uff1b\001\002\000\120\004\u0163\005\u015a\006\u0172\007" +
    "\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173" +
    "\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025" +
    "\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160" +
    "\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042" +
    "\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f" +
    "\051\u0179\053\ufeeb\054\u015e\001\002\000\004\053\uff12\001" +
    "\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c" +
    "\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020" +
    "\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b" +
    "\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035" +
    "\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164" +
    "\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053" +
    "\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172" +
    "\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016" +
    "\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c" +
    "\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033" +
    "\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171" +
    "\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050" +
    "\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163" +
    "\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013" +
    "\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169" +
    "\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031" +
    "\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e" +
    "\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046" +
    "\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002" +
    "\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011" +
    "\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c" +
    "\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027" +
    "\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176" +
    "\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044" +
    "\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb" +
    "\054\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172\007" +
    "\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173" +
    "\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025" +
    "\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160" +
    "\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042" +
    "\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f" +
    "\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005" +
    "\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b" +
    "\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023" +
    "\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158" +
    "\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040" +
    "\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b" +
    "\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000" +
    "\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165" +
    "\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021" +
    "\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162" +
    "\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036" +
    "\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166" +
    "\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054" +
    "\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167" +
    "\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017" +
    "\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178" +
    "\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034" +
    "\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e" +
    "\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051" +
    "\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a" +
    "\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014" +
    "\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175" +
    "\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032" +
    "\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168" +
    "\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047" +
    "\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120" +
    "\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012" +
    "\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d" +
    "\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030" +
    "\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a" +
    "\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045" +
    "\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e" +
    "\001\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010" +
    "\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d" +
    "\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026" +
    "\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177" +
    "\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043" +
    "\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179" +
    "\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a\006" +
    "\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174" +
    "\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024" +
    "\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161" +
    "\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041" +
    "\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a" +
    "\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004" +
    "\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f" +
    "\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022" +
    "\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f" +
    "\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037" +
    "\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d" +
    "\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001" +
    "\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c" +
    "\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020" +
    "\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b" +
    "\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035" +
    "\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164" +
    "\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053" +
    "\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172" +
    "\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016" +
    "\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c" +
    "\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033" +
    "\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171" +
    "\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050" +
    "\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163" +
    "\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013" +
    "\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169" +
    "\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031" +
    "\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e" +
    "\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046" +
    "\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002" +
    "\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011" +
    "\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c" +
    "\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027" +
    "\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176" +
    "\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044" +
    "\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb" +
    "\054\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172\007" +
    "\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173" +
    "\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025" +
    "\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160" +
    "\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042" +
    "\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f" +
    "\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005" +
    "\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b" +
    "\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023" +
    "\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158" +
    "\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040" +
    "\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b" +
    "\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000" +
    "\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165" +
    "\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021" +
    "\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162" +
    "\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036" +
    "\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166" +
    "\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054" +
    "\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167" +
    "\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017" +
    "\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178" +
    "\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034" +
    "\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e" +
    "\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051" +
    "\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a" +
    "\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014" +
    "\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175" +
    "\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032" +
    "\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168" +
    "\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047" +
    "\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\004" +
    "\053\u018f\001\002\000\120\004\u0163\005\u015a\006\u0172\007" +
    "\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173" +
    "\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025" +
    "\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160" +
    "\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042" +
    "\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f" +
    "\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005" +
    "\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b" +
    "\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023" +
    "\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158" +
    "\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040" +
    "\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b" +
    "\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000" +
    "\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165" +
    "\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021" +
    "\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162" +
    "\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036" +
    "\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166" +
    "\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054" +
    "\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167" +
    "\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017" +
    "\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178" +
    "\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034" +
    "\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e" +
    "\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051" +
    "\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a" +
    "\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014" +
    "\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175" +
    "\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032" +
    "\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168" +
    "\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047" +
    "\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120" +
    "\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012" +
    "\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d" +
    "\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030" +
    "\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a" +
    "\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045" +
    "\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e" +
    "\001\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010" +
    "\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d" +
    "\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026" +
    "\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177" +
    "\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043" +
    "\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179" +
    "\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a\006" +
    "\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174" +
    "\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024" +
    "\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161" +
    "\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041" +
    "\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a" +
    "\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004" +
    "\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f" +
    "\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022" +
    "\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f" +
    "\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037" +
    "\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d" +
    "\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001" +
    "\002\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c" +
    "\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020" +
    "\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b" +
    "\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035" +
    "\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164" +
    "\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053" +
    "\ufeeb\054\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172" +
    "\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016" +
    "\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c" +
    "\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033" +
    "\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171" +
    "\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050" +
    "\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163" +
    "\005\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013" +
    "\u016b\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169" +
    "\023\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031" +
    "\u0158\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e" +
    "\040\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046" +
    "\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002" +
    "\000\120\004\u0163\005\u015a\006\u0172\007\u0167\010\u015c\011" +
    "\u0165\012\u015f\013\u016b\014\u0174\016\u0173\017\u016d\020\u016c" +
    "\021\u015d\022\u0169\023\u0175\024\u017c\025\u0178\026\u015b\027" +
    "\u0162\030\u017f\031\u0158\032\u0161\033\u0160\034\u0177\035\u0176" +
    "\036\u016a\037\u017e\040\u0168\041\u0171\042\u016e\043\u0164\044" +
    "\u0166\045\u017d\046\u017b\047\u017a\050\u016f\051\u0179\053\ufeeb" +
    "\054\u015e\001\002\000\120\004\u0163\005\u015a\006\u0172\007" +
    "\u0167\010\u015c\011\u0165\012\u015f\013\u016b\014\u0174\016\u0173" +
    "\017\u016d\020\u016c\021\u015d\022\u0169\023\u0175\024\u017c\025" +
    "\u0178\026\u015b\027\u0162\030\u017f\031\u0158\032\u0161\033\u0160" +
    "\034\u0177\035\u0176\036\u016a\037\u017e\040\u0168\041\u0171\042" +
    "\u016e\043\u0164\044\u0166\045\u017d\046\u017b\047\u017a\050\u016f" +
    "\051\u0179\053\ufeeb\054\u015e\001\002\000\120\004\u0163\005" +
    "\u015a\006\u0172\007\u0167\010\u015c\011\u0165\012\u015f\013\u016b" +
    "\014\u0174\016\u0173\017\u016d\020\u016c\021\u015d\022\u0169\023" +
    "\u0175\024\u017c\025\u0178\026\u015b\027\u0162\030\u017f\031\u0158" +
    "\032\u0161\033\u0160\034\u0177\035\u0176\036\u016a\037\u017e\040" +
    "\u0168\041\u0171\042\u016e\043\u0164\044\u0166\045\u017d\046\u017b" +
    "\047\u017a\050\u016f\051\u0179\053\ufeeb\054\u015e\001\002\000" +
    "\004\053\uff00\001\002\000\004\053\ufef9\001\002\000\004" +
    "\053\ufef3\001\002\000\004\053\uff04\001\002\000\004\053" +
    "\ufef2\001\002\000\004\053\ufef1\001\002\000\004\053\ufeec" +
    "\001\002\000\004\053\uff03\001\002\000\004\053\ufefc\001" +
    "\002\000\004\053\ufefb\001\002\000\004\053\uff05\001\002" +
    "\000\004\053\uff08\001\002\000\004\053\ufeef\001\002\000" +
    "\004\053\uff0e\001\002\000\004\053\ufef7\001\002\000\004" +
    "\013\uff13\001\002\000\004\053\ufef0\001\002\000\004\053" +
    "\ufef6\001\002\000\004\053\ufeee\001\002\000\004\053\ufeed" +
    "\001\002\000\004\053\uff09\001\002\000\004\053\ufefa\001" +
    "\002\000\004\053\uff06\001\002\000\004\053\ufef8\001\002" +
    "\000\004\053\uff0d\001\002\000\004\053\ufef4\001\002\000" +
    "\004\053\uff0b\001\002\000\004\053\ufef5\001\002\000\004" +
    "\053\uff10\001\002\000\004\053\uff01\001\002\000\004\053" +
    "\ufefe\001\002\000\004\053\ufefd\001\002\000\004\053\uff0a" +
    "\001\002\000\004\053\uff11\001\002\000\004\053\uff07\001" +
    "\002\000\004\053\uff0c\001\002\000\004\053\uff02\001\002" +
    "\000\004\053\uff0f\001\002\000\004\053\ufeff\001\002\000" +
    "\006\013\uff26\050\u01af\001\002\000\006\013\uff25\050\u01ad" +
    "\001\002\000\004\013\u01aa\001\002\000\016\015\ufff3\016" +
    "\007\017\012\046\ufff3\047\ufff3\051\013\001\002\000\010" +
    "\015\uff29\046\u0133\047\u0135\001\002\000\004\015\uff2b\001" +
    "\002\000\006\004\u01a8\007\u01a7\001\002\000\004\013\uff28" +
    "\001\002\000\006\004\u01a8\007\u01a7\001\002\000\004\013" +
    "\uff27\001\002\000\004\043\u01b2\001\002\000\020\014\265" +
    "\032\270\034\274\037\272\040\267\041\271\042\273\001" +
    "\002\000\004\013\u01b4\001\002\000\010\016\uff6e\017\uff6e" +
    "\051\uff6e\001\002\000\010\016\007\017\012\051\u012a\001" +
    "\002\000\010\004\260\015\uff6a\044\262\001\002\000\004" +
    "\015\uff6d\001\002\000\004\015\uff79\001\002\000\004\015" +
    "\uff72\001\002\000\004\015\uff8b\001\002\000\004\015\uff84" +
    "\001\002\000\004\015\uff83\001\002\000\004\015\uff8d\001" +
    "\002\000\004\015\uff90\001\002\000\004\015\uff75\001\002" +
    "\000\004\015\uff96\001\002\000\004\015\uff7f\001\002\000" +
    "\004\015\uff78\001\002\000\004\015\uff74\001\002\000\004" +
    "\015\uff7e\001\002\000\004\015\uff73\001\002\000\004\015" +
    "\uff91\001\002\000\004\015\uff82\001\002\000\004\015\uff8e" +
    "\001\002\000\004\015\uff80\001\002\000\004\015\uff95\001" +
    "\002\000\004\015\uff7c\001\002\000\004\015\uff93\001\002" +
    "\000\004\015\uff7d\001\002\000\004\015\uff98\001\002\000" +
    "\004\015\uff89\001\002\000\004\015\uff86\001\002\000\004" +
    "\015\uff85\001\002\000\004\015\uff92\001\002\000\004\015" +
    "\uff99\001\002\000\004\015\uff77\001\002\000\004\015\uff76" +
    "\001\002\000\004\015\uff8f\001\002\000\004\015\uff94\001" +
    "\002\000\004\015\uff8a\001\002\000\004\015\uff97\001\002" +
    "\000\004\015\uff87\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\114\004\u01e8\005\u01dc\006" +
    "\u01f4\007\u01ec\010\u01de\011\u01ea\012\u01e3\013\u01f0\014\u01f5" +
    "\021\u01df\022\u01ee\023\u01f6\024\u01fc\025\u01f9\026\u01dd\027" +
    "\u01e7\030\u01ff\031\u01db\032\u01e6\033\u01e5\034\u01f8\035\u01f7" +
    "\036\u01ef\037\u01fe\040\u01ed\041\u01f3\042\u01f1\043\u01e9\044" +
    "\u01eb\045\u01fd\046\u01fb\047\u01fa\050\u01f2\051\uffcc\052\u01e1" +
    "\053\u01e0\054\u01e2\001\002\000\004\051\u021b\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\114\004\u01e8\005\u01dc\006\u01f4\007\u01ec\010\u01de\011\u01ea" +
    "\012\u01e3\013\u01f0\014\u01f5\021\u01df\022\u01ee\023\u01f6\024" +
    "\u01fc\025\u01f9\026\u01dd\027\u01e7\030\u01ff\031\u01db\032\u01e6" +
    "\033\u01e5\034\u01f8\035\u01f7\036\u01ef\037\u01fe\040\u01ed\041" +
    "\u01f3\042\u01f1\043\u01e9\044\u01eb\045\u01fd\046\u01fb\047\u01fa" +
    "\050\u01f2\051\uffcc\052\u01e1\053\u01e0\054\u01e2\001\002\000" +
    "\004\051\uffdf\001\002\000\004\051\uffd8\001\002\000\004" +
    "\051\uffd2\001\002\000\004\051\uffe3\001\002\000\004\051" +
    "\uffd1\001\002\000\004\051\uffd0\001\002\000\004\051\uffe2" +
    "\001\002\000\004\051\uffdb\001\002\000\004\051\uffda\001" +
    "\002\000\004\051\uffe4\001\002\000\004\051\uffe7\001\002" +
    "\000\004\051\uffed\001\002\000\004\051\uffd6\001\002\000" +
    "\004\051\uffcf\001\002\000\004\051\uffd5\001\002\000\004" +
    "\051\uffe8\001\002\000\004\051\uffd9\001\002\000\004\051" +
    "\uffe5\001\002\000\004\051\uffd7\001\002\000\004\051\uffec" +
    "\001\002\000\004\051\uffd3\001\002\000\004\051\uffea\001" +
    "\002\000\004\051\uffd4\001\002\000\004\051\uffef\001\002" +
    "\000\004\051\uffe0\001\002\000\004\051\uffdd\001\002\000" +
    "\004\051\uffdc\001\002\000\036\004\ufff2\007\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\044\ufff2\046\ufff2\047\ufff2\051\ufff2\001\002\000\004" +
    "\051\uffe9\001\002\000\004\051\ufff0\001\002\000\004\051" +
    "\uffce\001\002\000\004\051\uffcd\001\002\000\004\051\uffe6" +
    "\001\002\000\004\051\uffeb\001\002\000\004\051\uffe1\001" +
    "\002\000\004\051\uffee\001\002\000\004\051\uffde\001\002" +
    "\000\004\002\ufffd\001\002\000\030\004\ufff4\007\ufff4\015" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\044\ufff4" +
    "\046\ufff4\047\ufff4\001\002\000\030\004\ufff5\007\ufff5\015" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\044\ufff5" +
    "\046\ufff5\047\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0225\000\012\002\010\005\007\010\003\011\004\001" +
    "\001\000\010\005\u0226\010\003\011\004\001\001\000\010" +
    "\005\u0225\010\003\011\004\001\001\000\002\001\001\000" +
    "\004\006\u01e3\001\001\000\006\003\131\004\132\001\001" +
    "\000\002\001\001\000\004\007\041\001\001\000\010\005" +
    "\013\010\003\011\004\001\001\000\002\001\001\000\004" +
    "\007\127\001\001\000\004\007\126\001\001\000\004\007" +
    "\125\001\001\000\004\007\124\001\001\000\004\007\123" +
    "\001\001\000\004\007\122\001\001\000\004\007\121\001" +
    "\001\000\004\007\120\001\001\000\004\007\117\001\001" +
    "\000\004\007\116\001\001\000\004\007\115\001\001\000" +
    "\004\007\114\001\001\000\004\007\113\001\001\000\004" +
    "\007\112\001\001\000\004\007\111\001\001\000\004\007" +
    "\110\001\001\000\004\007\107\001\001\000\004\007\106" +
    "\001\001\000\004\007\105\001\001\000\004\007\104\001" +
    "\001\000\004\007\103\001\001\000\002\001\001\000\004" +
    "\007\101\001\001\000\004\007\100\001\001\000\004\007" +
    "\077\001\001\000\004\007\076\001\001\000\004\007\075" +
    "\001\001\000\004\007\074\001\001\000\004\007\073\001" +
    "\001\000\004\007\072\001\001\000\004\007\071\001\001" +
    "\000\004\007\070\001\001\000\004\007\067\001\001\000" +
    "\004\007\066\001\001\000\004\007\065\001\001\000\004" +
    "\007\064\001\001\000\004\007\063\001\001\000\004\007" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\173\004\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\142" +
    "\001\001\000\004\033\147\001\001\000\002\001\001\000" +
    "\004\032\144\001\001\000\002\001\001\000\004\032\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\153\001\001\000\002" +
    "\001\001\000\004\012\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\160\001\001\000\002\001\001" +
    "\000\004\012\162\001\001\000\002\001\001\000\004\033" +
    "\164\001\001\000\002\001\001\000\004\032\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\240\014\244\001\001\000\004\014\u01d9\001" +
    "\001\000\004\014\u01d8\001\001\000\004\014\u01d7\001\001" +
    "\000\004\014\u01d6\001\001\000\004\014\u01d5\001\001\000" +
    "\004\014\u01d4\001\001\000\004\014\u01d3\001\001\000\004" +
    "\014\u01d2\001\001\000\004\014\u01d1\001\001\000\004\014" +
    "\u01d0\001\001\000\004\014\u01cf\001\001\000\004\014\u01ce" +
    "\001\001\000\004\014\u01cd\001\001\000\004\014\u01cc\001" +
    "\001\000\004\014\u01cb\001\001\000\004\014\u01ca\001\001" +
    "\000\004\014\u01c9\001\001\000\004\014\u01c8\001\001\000" +
    "\004\014\u01c7\001\001\000\004\014\u01c6\001\001\000\004" +
    "\014\u01c5\001\001\000\004\014\u01c4\001\001\000\004\014" +
    "\u01c3\001\001\000\004\014\u01c2\001\001\000\004\014\u01c1" +
    "\001\001\000\004\014\u01c0\001\001\000\004\014\u01bf\001" +
    "\001\000\004\014\u01be\001\001\000\004\014\u01bd\001\001" +
    "\000\004\014\u01bc\001\001\000\004\014\u01bb\001\001\000" +
    "\004\014\u01ba\001\001\000\004\014\u01b9\001\001\000\004" +
    "\014\u01b8\001\001\000\004\014\u01b7\001\001\000\002\001" +
    "\001\000\004\014\253\001\001\000\004\014\252\001\001" +
    "\000\004\014\251\001\001\000\002\001\001\000\004\014" +
    "\250\001\001\000\004\014\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\255\010\003\011\004\001\001" +
    "\000\006\015\260\016\256\001\001\000\002\001\001\000" +
    "\004\045\u01b0\001\001\000\004\043\u012f\001\001\000\002" +
    "\001\001\000\010\017\265\040\263\041\274\001\001\000" +
    "\002\001\001\000\010\037\u012e\040\300\041\274\001\001" +
    "\000\002\001\001\000\010\037\u0123\040\300\041\274\001" +
    "\001\000\006\040\u0116\041\274\001\001\000\010\037\u0115" +
    "\040\300\041\274\001\001\000\010\037\u0114\040\300\041" +
    "\274\001\001\000\004\035\341\001\001\000\006\040\306" +
    "\041\274\001\001\000\002\001\001\000\010\037\305\040" +
    "\300\041\274\001\001\000\010\037\304\040\300\041\274" +
    "\001\001\000\010\037\301\040\300\041\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\303\041\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\037\310\040\300\041\274" +
    "\001\001\000\002\001\001\000\004\035\u0113\001\001\000" +
    "\004\035\u0112\001\001\000\004\035\u0111\001\001\000\004" +
    "\035\u0110\001\001\000\004\035\u010f\001\001\000\004\035" +
    "\u010e\001\001\000\004\035\u010d\001\001\000\004\035\u010c" +
    "\001\001\000\004\035\u010b\001\001\000\004\035\u010a\001" +
    "\001\000\004\035\u0109\001\001\000\004\035\u0108\001\001" +
    "\000\004\035\u0107\001\001\000\004\035\u0106\001\001\000" +
    "\004\035\u0105\001\001\000\004\035\u0104\001\001\000\004" +
    "\035\u0103\001\001\000\004\035\u0102\001\001\000\004\035" +
    "\u0101\001\001\000\004\035\u0100\001\001\000\004\035\377" +
    "\001\001\000\004\035\376\001\001\000\004\035\375\001" +
    "\001\000\004\035\374\001\001\000\002\001\001\000\004" +
    "\035\371\001\001\000\004\035\370\001\001\000\004\035" +
    "\367\001\001\000\004\035\366\001\001\000\004\035\365" +
    "\001\001\000\004\035\364\001\001\000\004\035\363\001" +
    "\001\000\004\035\362\001\001\000\004\035\361\001\001" +
    "\000\004\035\360\001\001\000\004\035\357\001\001\000" +
    "\004\035\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\373\040\300\041\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\037\u011c" +
    "\040\300\041\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\037\u0120\040\300\041\274" +
    "\001\001\000\002\001\001\000\010\037\u0122\040\300\041" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0125\001\001\000\010\010\u0127\011\u0126\034\u0128\001" +
    "\001\000\010\010\u0127\011\u0126\034\u012d\001\001\000\010" +
    "\010\u0127\011\u0126\034\u012c\001\001\000\004\016\u012b\001" +
    "\001\000\010\010\u0127\011\u0126\034\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\u0131" +
    "\010\003\011\004\001\001\000\004\020\u0133\001\001\000" +
    "\004\022\u01a8\001\001\000\004\044\u013f\001\001\000\004" +
    "\023\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0139\001\001\000\002\001\001" +
    "\000\010\005\u013b\010\003\011\004\001\001\000\004\020" +
    "\u013c\001\001\000\002\001\001\000\004\023\u013e\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u0141\010" +
    "\003\011\004\001\001\000\010\021\u0145\024\u0143\036\u0146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0147\001\001\000\002" +
    "\001\001\000\006\025\u0149\036\u014a\001\001\000\004\027" +
    "\u0151\001\001\000\004\026\u014b\001\001\000\004\052\u014e" +
    "\001\001\000\004\036\u014d\001\001\000\002\001\001\000" +
    "\006\025\u014f\036\u014a\001\001\000\002\001\001\000\006" +
    "\030\u016f\031\u0158\001\001\000\002\001\001\000\004\051" +
    "\u0153\001\001\000\004\032\u0154\001\001\000\010\024\u0155" +
    "\036\u0146\042\u0156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u01a5\001\001\000\002\001\001\000\004" +
    "\031\u01a4\001\001\000\004\031\u01a3\001\001\000\004\031" +
    "\u01a2\001\001\000\004\031\u01a1\001\001\000\004\031\u01a0" +
    "\001\001\000\004\031\u019f\001\001\000\004\031\u019e\001" +
    "\001\000\004\031\u019d\001\001\000\004\031\u019c\001\001" +
    "\000\004\031\u019b\001\001\000\004\031\u019a\001\001\000" +
    "\004\031\u0199\001\001\000\004\031\u0198\001\001\000\004" +
    "\031\u0197\001\001\000\004\031\u0196\001\001\000\004\031" +
    "\u0195\001\001\000\004\031\u0194\001\001\000\004\031\u0193" +
    "\001\001\000\004\031\u0192\001\001\000\004\031\u0191\001" +
    "\001\000\004\031\u0190\001\001\000\004\031\u018f\001\001" +
    "\000\002\001\001\000\004\031\u018d\001\001\000\004\031" +
    "\u018c\001\001\000\004\031\u018b\001\001\000\004\031\u018a" +
    "\001\001\000\004\031\u0189\001\001\000\004\031\u0188\001" +
    "\001\000\004\031\u0187\001\001\000\004\031\u0186\001\001" +
    "\000\004\031\u0185\001\001\000\004\031\u0184\001\001\000" +
    "\004\031\u0183\001\001\000\004\031\u0182\001\001\000\004" +
    "\031\u0181\001\001\000\004\031\u0180\001\001\000\004\031" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\u01aa\010\003\011\004\001\001\000" +
    "\004\020\u01ab\001\001\000\002\001\001\000\004\022\u01ad" +
    "\001\001\000\002\001\001\000\004\022\u01af\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u01b2\040\263" +
    "\041\274\001\001\000\002\001\001\000\004\046\u01b4\001" +
    "\001\000\010\010\u0127\011\u0126\034\u01b5\001\001\000\004" +
    "\016\u01b6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0223\001\001\000\004" +
    "\006\u0222\001\001\000\004\006\u0221\001\001\000\004\006" +
    "\u0220\001\001\000\004\006\u021f\001\001\000\004\006\u021e" +
    "\001\001\000\004\006\u021d\001\001\000\004\006\u021c\001" +
    "\001\000\004\006\u021b\001\001\000\002\001\001\000\004" +
    "\006\u0219\001\001\000\004\006\u0218\001\001\000\004\006" +
    "\u0217\001\001\000\004\006\u0216\001\001\000\004\006\u0215" +
    "\001\001\000\004\006\u0214\001\001\000\004\006\u0213\001" +
    "\001\000\004\006\u0212\001\001\000\004\006\u0211\001\001" +
    "\000\004\006\u0210\001\001\000\004\006\u020f\001\001\000" +
    "\004\006\u020e\001\001\000\004\006\u020d\001\001\000\004" +
    "\006\u020c\001\001\000\004\006\u020b\001\001\000\004\006" +
    "\u020a\001\001\000\004\006\u0209\001\001\000\004\006\u0208" +
    "\001\001\000\004\006\u0207\001\001\000\004\006\u0206\001" +
    "\001\000\004\006\u0205\001\001\000\004\006\u0204\001\001" +
    "\000\004\006\u0203\001\001\000\004\006\u0202\001\001\000" +
    "\004\006\u0201\001\001\000\004\006\u0200\001\001\000\004" +
    "\006\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<ExpresionRegular> listaExpReg = new ArrayList<>();
    public TablaTerminalesNoT tablaTerminalesNoT;
    public TablaProducciones tablaProducciones;
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    ManejadorNodos manejadorNodos = new ManejadorNodos();
    ArrayList<Arbol> listaArboles = new ArrayList<>();
    ArrayList<ExpresionRegular> listaExpReg = new ArrayList<>();
    Arbol arbol;
    String nombreToken;
    boolean corretaProduccion;
    TablaTerminalesNoT tablaTerminalesNoT = new TablaTerminalesNoT();
    AnalizadorLexicoC analizadorLexicoC;
    AnalizadorSintacticoC analizadorSintacticoC;
    Produccion produccion;
    TablaProducciones tablaProducciones;
    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // lo_quesea_semantica ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // lo_quesea_semantica ::= SALTO_LINEA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // lo_quesea_semantica ::= COMENTARIO_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // lo_quesea_semantica ::= COMENTARIO_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // lo_quesea_semantica ::= COMENTARIO_SIMPLE lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // lo_quesea_semantica ::= COMA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // lo_quesea_semantica ::= NO_TERMINAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // lo_quesea_semantica ::= TERMINAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // lo_quesea_semantica ::= LINEA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // lo_quesea_semantica ::= IGNORAR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // lo_quesea_semantica ::= IGUAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // lo_quesea_semantica ::= COMILLAS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // lo_quesea_semantica ::= ESPACIO_BLANCO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // lo_quesea_semantica ::= TAB_RESERV lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // lo_quesea_semantica ::= SALTO_RESERV lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // lo_quesea_semantica ::= GUION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // lo_quesea_semantica ::= PARENTESIS_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // lo_quesea_semantica ::= PARENTESIS_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // lo_quesea_semantica ::= CORCHETE_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // lo_quesea_semantica ::= CORCHETE_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // lo_quesea_semantica ::= BETA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // lo_quesea_semantica ::= MAS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // lo_quesea_semantica ::= ASTERISCO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // lo_quesea_semantica ::= INTERROGACION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // lo_quesea_semantica ::= EXTENSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // lo_quesea_semantica ::= LANZAMIENTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // lo_quesea_semantica ::= AUTOR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // lo_quesea_semantica ::= VERSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // lo_quesea_semantica ::= NOMBRE lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // lo_quesea_semantica ::= PUNTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // lo_quesea_semantica ::= PUNTO_COMA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // lo_quesea_semantica ::= DOS_PUNTOS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // lo_quesea_semantica ::= NUM_VERSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // lo_quesea_semantica ::= DOBLE_PUNTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // lo_quesea_semantica ::= LETRA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // lo_quesea_semantica ::= NUM_VER lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // lo_quesea_semantica ::= NUMERO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // lo_quesea_semantica ::= IDENTIFICADOR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // lo_quesea_semantica ::= CUALQUIER_SIM lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // reglas_semanticas ::= lo_quesea_semantica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("reglas_semanticas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // estructura_semantica ::= LLAVES_A reglas_semanticas LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_semantica",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // valor ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // valor ::= DOS_PUNTOS ids 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ids ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String) a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ids ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String) a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // estructura_produccion ::= ids valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                            if(tablaTerminalesNoT.buscarExpresion((String)a)){
                                produccion.agregarNuevaExpresion(new Expresion((String)a, tablaTerminalesNoT.getBandera()));
                            }else{
                               //error
                               corretaProduccion = false;
                            }
                            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_produccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // estructura_produccion ::= ids valor NT$7 estructura_produccion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_produccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                            if(tablaTerminalesNoT.buscarExpresion((String)a)){
                                produccion.agregarNuevaExpresion(new Expresion((String)a, tablaTerminalesNoT.getBandera()));
                                
                            }else{
                               System.out.println("ERROR: "+(String)a);
                               corretaProduccion = false;
                            }
                            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // estructura_gramatica ::= ids NT$5 DOBLE_PUNTO estructura_produccion estructura_semantica PUNTO_COMA NT$6 saltos1 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_gramatica",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;

                            if(tablaTerminalesNoT.buscarNoTerminal((String)a)){
                                if(corretaProduccion){
                                    tablaProducciones.agregarProduccion(produccion);
                                }
                            }else{
                               System.out.println("ERROR: "+(String)a);
                            }
                            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
corretaProduccion = true; produccion = new Produccion((String)a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("s1",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // s1 ::= estructura_gramatica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("s1",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // bloque_gramatica ::= estructura_gramatica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_gramatica",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // letras_may ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 1:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // letras_may ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 1:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // letras_may ::= LETRA COMA letras_may 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 1:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // letras_may ::= IDENTIFICADOR COMA letras_may 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 1:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // letras_min ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 2:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // letras_min ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 2:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // letras_min ::= LETRA COMA letras_min 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 2:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // letras_min ::= IDENTIFICADOR COMA letras_min 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(!tablaTerminalesNoT.isExistTerminal((String) a)){
                                
                            }
                            break;
                        case 0:
                        case 2:
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // bloque_simbolos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // bloque_simbolos ::= NO_TERMINAL letras_may PUNTO_COMA saltos bloque_simbolos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // bloque_simbolos ::= TERMINAL letras_min PUNTO_COMA saltos bloque_simbolos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // lo_que_sea_exp ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // lo_que_sea_exp ::= LLAVES_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // lo_que_sea_exp ::= LLAVES_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // lo_que_sea_exp ::= SALTO_LINEA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // lo_que_sea_exp ::= COMA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // lo_que_sea_exp ::= NO_TERMINAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // lo_que_sea_exp ::= TERMINAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // lo_que_sea_exp ::= LINEA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // lo_que_sea_exp ::= IGNORAR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // lo_que_sea_exp ::= IGUAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // lo_que_sea_exp ::= ESPACIO_BLANCO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // lo_que_sea_exp ::= TAB_RESERV lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // lo_que_sea_exp ::= SALTO_RESERV lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // lo_que_sea_exp ::= GUION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // lo_que_sea_exp ::= PARENTESIS_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // lo_que_sea_exp ::= PARENTESIS_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // lo_que_sea_exp ::= CORCHETE_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // lo_que_sea_exp ::= CORCHETE_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // lo_que_sea_exp ::= BETA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // lo_que_sea_exp ::= MAS lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // lo_que_sea_exp ::= ASTERISCO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // lo_que_sea_exp ::= INTERROGACION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // lo_que_sea_exp ::= EXTENSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // lo_que_sea_exp ::= LANZAMIENTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // lo_que_sea_exp ::= AUTOR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // lo_que_sea_exp ::= VERSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // lo_que_sea_exp ::= NOMBRE lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // lo_que_sea_exp ::= PUNTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // lo_que_sea_exp ::= PUNTO_COMA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // lo_que_sea_exp ::= DOS_PUNTOS lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // lo_que_sea_exp ::= NUM_VERSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // lo_que_sea_exp ::= DOBLE_PUNTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // lo_que_sea_exp ::= LETRA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // lo_que_sea_exp ::= NUM_VER lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // lo_que_sea_exp ::= NUMERO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // lo_que_sea_exp ::= IDENTIFICADOR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // lo_que_sea_exp ::= CUALQUIER_SIM lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // exp_regular_despues ::= exp_regular_despues LINEA exp_regular_despues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,4,"|",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b), nombreToken); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // exp_regular_despues ::= exp_regular_p MAS exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 /*Nodo nodeMas = new Nodo(3,"+",true, nombreToken); nodeMas.setIzquierdaNodo((Nodo)a);*/
                                Nodo node = (Nodo)a ;
                                Nodo nuevo = new Nodo (node.getTipo(),node.getLexema(),node.isAnulable(), nombreToken);
                                nuevo.listaCaracteres = node.listaCaracteres;
                                Nodo nodeAs = new Nodo(2,"*",true, nombreToken); nodeAs.setIzquierdaNodo(node);
                                Nodo nodoConcat = manejadorNodos.generarPadre(nuevo,nodeAs ,1,".",manejadorNodos.determinarAnulabilidad(nuevo, nodeAs), nombreToken);
                                if(b==null ){
                                    RESULT = (Nodo) nodoConcat;
                                }else{
                                    Nodo node2 = manejadorNodos.generarPadre(nodoConcat, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(nodoConcat, (Nodo)b), nombreToken);
                                    RESULT = (Nodo) node2;
                                }            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // exp_regular_despues ::= exp_regular_p ASTERISCO exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo nodeAs = new Nodo(2,"*",true, nombreToken);
                                if(b==null ){
                                    RESULT = (Nodo) nodeAs;
                                }else{
                                    Nodo node2 = manejadorNodos.generarPadre(nodeAs, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(nodeAs, (Nodo)b), nombreToken);
                                    RESULT = (Nodo) node2;
                                }  
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exp_regular_despues ::= exp_regular_p INTERROGACION exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, new Nodo(8,"",true, nombreToken),4,"|",true, nombreToken); 
                                if(b==null ){
                                    RESULT = (Nodo) node1;
                                }else{
                                    Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken);
                                    RESULT = (Nodo) node2;
                                }  
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exp_regular_despues ::= PUNTO exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // exp_regular_despues ::= ESPACIO_BLANCO exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // exp_regular_despues ::= TAB_RESERV exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // exp_regular_despues ::= SALTO_RESERV exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // exp_regular_despues ::= COMILLAS lo_que_sea_exp COMILLAS exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            Nodo node1 = manejadorNodos.generarNodosTexto((String) a, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // exp_regular_despues ::= CORCHETE_A exp_regular_despues CORCHETE_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                            if(b==null){
                                RESULT = (Nodo)a;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // exp_regular_despues ::= PARENTESIS_A exp_regular_despues PARENTESIS_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                            if(b==null){
                                RESULT = (Nodo)a;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // exp_regular_despues ::= CORCHETE_A LETRA GUION LETRA CORCHETE_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                if(c == null){
                                    RESULT = (Nodo) nodo1;
                                }else{
                                    Nodo nodo2 = manejadorNodos.generarPadre(nodo1, (Nodo)c,1,".",false, nombreToken); RESULT = (Nodo) nodo2;
                                    RESULT = (Nodo) nodo2;
                                }
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // exp_regular_despues ::= CORCHETE_A NUMERO GUION NUMERO CORCHETE_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                if(c == null){
                                    RESULT = (Nodo) nodo1;
                                }else{
                                    Nodo nodo2 = manejadorNodos.generarPadre(nodo1, (Nodo)c,1,".",false, nombreToken); RESULT = (Nodo) nodo2;
                                    RESULT = (Nodo) nodo2;
                                }
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // exp_regular_p ::= ESPACIO_BLANCO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // exp_regular_p ::= PUNTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // exp_regular_p ::= TAB_RESERV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // exp_regular_p ::= SALTO_RESERV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // exp_regular_p ::= COMILLAS lo_que_sea_exp COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 Nodo node1 = manejadorNodos.generarNodosTexto((String) a, nombreToken); RESULT = node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // exp_regular_p ::= CORCHETE_A exp_regular_despues CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // exp_regular_p ::= PARENTESIS_A exp_regular_despues PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // exp_regular_p ::= CORCHETE_A LETRA GUION LETRA CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                RESULT = (Nodo) nodo1;
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // exp_regular_p ::= CORCHETE_A NUMERO GUION NUMERO CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                //Nodo nuevoNodo = manejadorNodos.generarPadreCadenas(nodo1,);
                                RESULT = (Nodo) nodo1;
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // exp_regular_contenido ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_contenido",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // exp_regular_contenido ::= exp_regular_despues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_contenido",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // exp_regular ::= exp_regular_despues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // estructura_exp_regular ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // estructura_exp_regular ::= IGNORAR IGUAL exp_regular PUNTO_COMA NT$4 salto_simple estructura_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 ExpresionRegular exp = new ExpresionRegular(new Arbol((Nodo)b),(String)a); /*listaExpReg.add(exp);*/
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // estructura_exp_regular ::= IDENTIFICADOR NT$2 IGUAL exp_regular PUNTO_COMA NT$3 salto_simple estructura_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 
                                Nodo node = new Nodo(6,"#",false, nombreToken);
                                 Nodo raiz = manejadorNodos.generarPadre((Nodo)b, node,1,".",manejadorNodos.determinarAnulabilidad((Nodo)b, node), nombreToken);
                               //ExpresionRegular exp = new ExpresionRegular(new Arbol(raiz),(String)a); listaExpReg.add(exp);
                                ExpresionRegular exp = new ExpresionRegular(new Arbol((Nodo)b),(String)a); listaExpReg.add(exp);
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
nombreToken = (String)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bloque_exp_regular ::= estructura_exp_regular 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_exp_regular",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // lo_que_sea_bloque_code ::= 
            {
              Object RESULT =null;
		RESULT = (String)"";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // lo_que_sea_bloque_code ::= SALTO_LINEA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lo_que_sea_bloque_code ::= COMENTARIO_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lo_que_sea_bloque_code ::= COMENTARIO_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lo_que_sea_bloque_code ::= COMENTARIO_SIMPLE lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lo_que_sea_bloque_code ::= LLAVES_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lo_que_sea_bloque_code ::= LLAVES_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lo_que_sea_bloque_code ::= COMA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lo_que_sea_bloque_code ::= NO_TERMINAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lo_que_sea_bloque_code ::= TERMINAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lo_que_sea_bloque_code ::= LINEA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lo_que_sea_bloque_code ::= IGNORAR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lo_que_sea_bloque_code ::= IGUAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lo_que_sea_bloque_code ::= COMILLAS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lo_que_sea_bloque_code ::= ESPACIO_BLANCO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lo_que_sea_bloque_code ::= TAB_RESERV lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lo_que_sea_bloque_code ::= SALTO_RESERV lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lo_que_sea_bloque_code ::= GUION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lo_que_sea_bloque_code ::= PARENTESIS_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lo_que_sea_bloque_code ::= PARENTESIS_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lo_que_sea_bloque_code ::= CORCHETE_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lo_que_sea_bloque_code ::= CORCHETE_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lo_que_sea_bloque_code ::= BETA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lo_que_sea_bloque_code ::= MAS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lo_que_sea_bloque_code ::= ASTERISCO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lo_que_sea_bloque_code ::= INTERROGACION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lo_que_sea_bloque_code ::= EXTENSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lo_que_sea_bloque_code ::= LANZAMIENTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lo_que_sea_bloque_code ::= AUTOR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lo_que_sea_bloque_code ::= VERSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lo_que_sea_bloque_code ::= NOMBRE lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lo_que_sea_bloque_code ::= PUNTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lo_que_sea_bloque_code ::= PUNTO_COMA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lo_que_sea_bloque_code ::= DOS_PUNTOS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lo_que_sea_bloque_code ::= NUM_VERSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lo_que_sea_bloque_code ::= DOBLE_PUNTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lo_que_sea_bloque_code ::= LETRA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lo_que_sea_bloque_code ::= NUM_VER lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lo_que_sea_bloque_code ::= NUMERO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lo_que_sea_bloque_code ::= IDENTIFICADOR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lo_que_sea_bloque_code ::= CUALQUIER_SIM lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloque_code ::= lo_que_sea_bloque_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_code",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cadena_identificadores ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena_identificadores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cadena_identificadores ::= IDENTIFICADOR cadena_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena_identificadores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // datos_info ::= EXTENSION DOS_PUNTOS IDENTIFICADOR PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // datos_info ::= LANZAMIENTO DOS_PUNTOS NUMERO PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // datos_info ::= AUTOR DOS_PUNTOS cadena_identificadores PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // datos_info ::= VERSION DOS_PUNTOS num_version PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // datos_info ::= NOMBRE DOS_PUNTOS cadena_identificadores PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // num_version ::= NUMERO PUNTO num_version 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("num_version",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // num_version ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("num_version",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bloque_inf ::= datos_info 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bloque_inf ::= datos_info bloque_inf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lo_que_sea_v ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lo_que_sea_v ::= LLAVES_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lo_que_sea_v ::= LLAVES_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lo_que_sea_v ::= SALTO_LINEA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lo_que_sea_v ::= COMA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lo_que_sea_v ::= NO_TERMINAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lo_que_sea_v ::= TERMINAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lo_que_sea_v ::= LINEA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lo_que_sea_v ::= IGNORAR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lo_que_sea_v ::= IGUAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lo_que_sea_v ::= COMILLAS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lo_que_sea_v ::= ESPACIO_BLANCO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lo_que_sea_v ::= TAB_RESERV lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lo_que_sea_v ::= SALTO_RESERV lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lo_que_sea_v ::= GUION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lo_que_sea_v ::= PARENTESIS_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lo_que_sea_v ::= PARENTESIS_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lo_que_sea_v ::= CORCHETE_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lo_que_sea_v ::= CORCHETE_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lo_que_sea_v ::= BETA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lo_que_sea_v ::= MAS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lo_que_sea_v ::= ASTERISCO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lo_que_sea_v ::= INTERROGACION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lo_que_sea_v ::= EXTENSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lo_que_sea_v ::= LANZAMIENTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lo_que_sea_v ::= AUTOR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lo_que_sea_v ::= VERSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lo_que_sea_v ::= NOMBRE lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lo_que_sea_v ::= PUNTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lo_que_sea_v ::= PUNTO_COMA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lo_que_sea_v ::= DOS_PUNTOS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lo_que_sea_v ::= NUM_VERSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lo_que_sea_v ::= DOBLE_PUNTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lo_que_sea_v ::= LETRA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lo_que_sea_v ::= NUM_VER lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lo_que_sea_v ::= NUMERO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lo_que_sea_v ::= IDENTIFICADOR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lo_que_sea_v ::= CUALQUIER_SIM lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lo_que_sea_1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lo_que_sea_1 ::= LLAVES_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lo_que_sea_1 ::= LLAVES_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lo_que_sea_1 ::= COMA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lo_que_sea_1 ::= NO_TERMINAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lo_que_sea_1 ::= TERMINAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lo_que_sea_1 ::= LINEA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lo_que_sea_1 ::= IGNORAR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lo_que_sea_1 ::= IGUAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lo_que_sea_1 ::= COMILLAS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lo_que_sea_1 ::= ESPACIO_BLANCO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lo_que_sea_1 ::= TAB_RESERV lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lo_que_sea_1 ::= SALTO_RESERV lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lo_que_sea_1 ::= GUION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lo_que_sea_1 ::= PARENTESIS_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lo_que_sea_1 ::= PARENTESIS_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lo_que_sea_1 ::= CORCHETE_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lo_que_sea_1 ::= CORCHETE_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lo_que_sea_1 ::= BETA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lo_que_sea_1 ::= MAS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lo_que_sea_1 ::= ASTERISCO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lo_que_sea_1 ::= INTERROGACION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lo_que_sea_1 ::= EXTENSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lo_que_sea_1 ::= LANZAMIENTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lo_que_sea_1 ::= AUTOR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lo_que_sea_1 ::= VERSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lo_que_sea_1 ::= NOMBRE lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lo_que_sea_1 ::= PUNTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lo_que_sea_1 ::= PUNTO_COMA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lo_que_sea_1 ::= DOS_PUNTOS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lo_que_sea_1 ::= NUM_VERSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lo_que_sea_1 ::= DOBLE_PUNTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lo_que_sea_1 ::= LETRA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lo_que_sea_1 ::= NUM_VER lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lo_que_sea_1 ::= NUMERO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lo_que_sea_1 ::= IDENTIFICADOR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lo_que_sea_1 ::= CUALQUIER_SIM lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comentario_varias_lineas ::= COMENTARIO_A lo_que_sea_v COMENTARIO_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comentario_varias_lineas",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comentario_linea ::= COMENTARIO_SIMPLE lo_que_sea_1 SALTO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comentario_linea",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // saltos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // saltos ::= comentario_varias_lineas saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saltos ::= comentario_linea saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // saltos ::= SALTO_LINEA saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // salto_simple ::= SALTO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // salto_simple ::= comentario_varias_lineas salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // salto_simple ::= comentario_linea salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // salto_simple ::= SALTO_LINEA salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // saltos1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // saltos1 ::= SALTO_LINEA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= saltos bloque_inf SEPARACION bloque_code SEPARACION saltos bloque_exp_regular NT$0 SEPARACION saltos bloque_simbolos NT$1 SEPARACION saltos bloque_gramatica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		parser.tablaProducciones = tablaProducciones; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
parser.tablaTerminalesNoT = tablaTerminalesNoT; tablaProducciones = new TablaProducciones();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
parser.listaExpReg = listaExpReg; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

