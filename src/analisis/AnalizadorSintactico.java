
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 17 22:46:27 CST 2020
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import objetos.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 17 22:46:27 CST 2020
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\002\002\004\000\002\002\017\000\002\002" +
    "\004\000\002\032\004\000\002\032\002\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\002\000\002\010\005\000\002\011\005\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\002\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\003\004\000\002\003\003\000\002\012\003\000\002\012" +
    "\005\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\033\004\000" +
    "\002\033\002\000\002\013\003\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\002\000\002\015\003\000\002\037\002\000\002\016" +
    "\011\000\002\040\002\000\002\016\011\000\002\016\002" +
    "\000\002\017\006\000\002\017\006\000\002\017\010\000" +
    "\002\017\010\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\006\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\002\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\002\000\002\020\007\000\002\020\007\000" +
    "\002\020\002\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\021\003" +
    "\000\002\024\011\000\002\024\007\000\002\025\005\000" +
    "\002\025\004\000\002\036\003\000\002\036\003\000\002" +
    "\026\004\000\002\026\002\000\002\027\005\000\002\030" +
    "\003\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021f\000\024\004\006\016\007\017\013\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\051\012\001\002\000\036" +
    "\004\ufff5\007\ufff5\015\ufff5\016\007\017\013\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\044\ufff5\046\ufff5\047\ufff5" +
    "\051\012\001\002\000\036\004\ufff5\007\ufff5\015\ufff5\016" +
    "\007\017\013\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\044\ufff5\046\ufff5\047\ufff5\051\012\001\002\000\004\004" +
    "\u021f\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\014\021\137\022\136\023\135\024\134" +
    "\025\140\001\002\000\004\002\131\001\002\000\036\004" +
    "\ufff5\007\ufff5\015\ufff5\016\007\017\013\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\044\ufff5\046\ufff5\047\ufff5\051" +
    "\012\001\002\000\116\004\030\005\015\006\045\007\034" +
    "\010\017\011\032\012\024\013\040\014\046\020\uffa8\021" +
    "\020\022\036\023\047\024\056\025\052\026\016\027\027" +
    "\030\061\031\014\032\026\033\025\034\051\035\050\036" +
    "\037\037\060\040\035\041\044\042\042\043\031\044\033" +
    "\045\057\046\055\047\054\050\043\051\053\052\022\053" +
    "\021\054\023\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa8\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\116\004\030\005\015" +
    "\006\045\007\034\010\017\011\032\012\024\013\040\014" +
    "\046\020\uffa8\021\020\022\036\023\047\024\056\025\052" +
    "\026\016\027\027\030\061\031\014\032\026\033\025\034" +
    "\051\035\050\036\037\037\060\040\035\041\044\042\042" +
    "\043\031\044\033\045\057\046\055\047\054\050\043\051" +
    "\053\052\022\053\021\054\023\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa8\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\116" +
    "\004\030\005\015\006\045\007\034\010\017\011\032\012" +
    "\024\013\040\014\046\020\uffa8\021\020\022\036\023\047" +
    "\024\056\025\052\026\016\027\027\030\061\031\014\032" +
    "\026\033\025\034\051\035\050\036\037\037\060\040\035" +
    "\041\044\042\042\043\031\044\033\045\057\046\055\047" +
    "\054\050\043\051\053\052\022\053\021\054\023\001\002" +
    "\000\116\004\030\005\015\006\045\007\034\010\017\011" +
    "\032\012\024\013\040\014\046\020\uffa8\021\020\022\036" +
    "\023\047\024\056\025\052\026\016\027\027\030\061\031" +
    "\014\032\026\033\025\034\051\035\050\036\037\037\060" +
    "\040\035\041\044\042\042\043\031\044\033\045\057\046" +
    "\055\047\054\050\043\051\053\052\022\053\021\054\023" +
    "\001\002\000\116\004\030\005\015\006\045\007\034\010" +
    "\017\011\032\012\024\013\040\014\046\020\uffa8\021\020" +
    "\022\036\023\047\024\056\025\052\026\016\027\027\030" +
    "\061\031\014\032\026\033\025\034\051\035\050\036\037" +
    "\037\060\040\035\041\044\042\042\043\031\044\033\045" +
    "\057\046\055\047\054\050\043\051\053\052\022\053\021" +
    "\054\023\001\002\000\116\004\030\005\015\006\045\007" +
    "\034\010\017\011\032\012\024\013\040\014\046\020\uffa8" +
    "\021\020\022\036\023\047\024\056\025\052\026\016\027" +
    "\027\030\061\031\014\032\026\033\025\034\051\035\050" +
    "\036\037\037\060\040\035\041\044\042\042\043\031\044" +
    "\033\045\057\046\055\047\054\050\043\051\053\052\022" +
    "\053\021\054\023\001\002\000\116\004\030\005\015\006" +
    "\045\007\034\010\017\011\032\012\024\013\040\014\046" +
    "\020\uffa8\021\020\022\036\023\047\024\056\025\052\026" +
    "\016\027\027\030\061\031\014\032\026\033\025\034\051" +
    "\035\050\036\037\037\060\040\035\041\044\042\042\043" +
    "\031\044\033\045\057\046\055\047\054\050\043\051\053" +
    "\052\022\053\021\054\023\001\002\000\116\004\030\005" +
    "\015\006\045\007\034\010\017\011\032\012\024\013\040" +
    "\014\046\020\uffa8\021\020\022\036\023\047\024\056\025" +
    "\052\026\016\027\027\030\061\031\014\032\026\033\025" +
    "\034\051\035\050\036\037\037\060\040\035\041\044\042" +
    "\042\043\031\044\033\045\057\046\055\047\054\050\043" +
    "\051\053\052\022\053\021\054\023\001\002\000\116\004" +
    "\030\005\015\006\045\007\034\010\017\011\032\012\024" +
    "\013\040\014\046\020\uffa8\021\020\022\036\023\047\024" +
    "\056\025\052\026\016\027\027\030\061\031\014\032\026" +
    "\033\025\034\051\035\050\036\037\037\060\040\035\041" +
    "\044\042\042\043\031\044\033\045\057\046\055\047\054" +
    "\050\043\051\053\052\022\053\021\054\023\001\002\000" +
    "\116\004\030\005\015\006\045\007\034\010\017\011\032" +
    "\012\024\013\040\014\046\020\uffa8\021\020\022\036\023" +
    "\047\024\056\025\052\026\016\027\027\030\061\031\014" +
    "\032\026\033\025\034\051\035\050\036\037\037\060\040" +
    "\035\041\044\042\042\043\031\044\033\045\057\046\055" +
    "\047\054\050\043\051\053\052\022\053\021\054\023\001" +
    "\002\000\116\004\030\005\015\006\045\007\034\010\017" +
    "\011\032\012\024\013\040\014\046\020\uffa8\021\020\022" +
    "\036\023\047\024\056\025\052\026\016\027\027\030\061" +
    "\031\014\032\026\033\025\034\051\035\050\036\037\037" +
    "\060\040\035\041\044\042\042\043\031\044\033\045\057" +
    "\046\055\047\054\050\043\051\053\052\022\053\021\054" +
    "\023\001\002\000\116\004\030\005\015\006\045\007\034" +
    "\010\017\011\032\012\024\013\040\014\046\020\uffa8\021" +
    "\020\022\036\023\047\024\056\025\052\026\016\027\027" +
    "\030\061\031\014\032\026\033\025\034\051\035\050\036" +
    "\037\037\060\040\035\041\044\042\042\043\031\044\033" +
    "\045\057\046\055\047\054\050\043\051\053\052\022\053" +
    "\021\054\023\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa8\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\116\004\030\005\015" +
    "\006\045\007\034\010\017\011\032\012\024\013\040\014" +
    "\046\020\uffa8\021\020\022\036\023\047\024\056\025\052" +
    "\026\016\027\027\030\061\031\014\032\026\033\025\034" +
    "\051\035\050\036\037\037\060\040\035\041\044\042\042" +
    "\043\031\044\033\045\057\046\055\047\054\050\043\051" +
    "\053\052\022\053\021\054\023\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa8\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\116" +
    "\004\030\005\015\006\045\007\034\010\017\011\032\012" +
    "\024\013\040\014\046\020\uffa8\021\020\022\036\023\047" +
    "\024\056\025\052\026\016\027\027\030\061\031\014\032" +
    "\026\033\025\034\051\035\050\036\037\037\060\040\035" +
    "\041\044\042\042\043\031\044\033\045\057\046\055\047" +
    "\054\050\043\051\053\052\022\053\021\054\023\001\002" +
    "\000\116\004\030\005\015\006\045\007\034\010\017\011" +
    "\032\012\024\013\040\014\046\020\uffa8\021\020\022\036" +
    "\023\047\024\056\025\052\026\016\027\027\030\061\031" +
    "\014\032\026\033\025\034\051\035\050\036\037\037\060" +
    "\040\035\041\044\042\042\043\031\044\033\045\057\046" +
    "\055\047\054\050\043\051\053\052\022\053\021\054\023" +
    "\001\002\000\116\004\030\005\015\006\045\007\034\010" +
    "\017\011\032\012\024\013\040\014\046\020\uffa8\021\020" +
    "\022\036\023\047\024\056\025\052\026\016\027\027\030" +
    "\061\031\014\032\026\033\025\034\051\035\050\036\037" +
    "\037\060\040\035\041\044\042\042\043\031\044\033\045" +
    "\057\046\055\047\054\050\043\051\053\052\022\053\021" +
    "\054\023\001\002\000\116\004\030\005\015\006\045\007" +
    "\034\010\017\011\032\012\024\013\040\014\046\020\uffa8" +
    "\021\020\022\036\023\047\024\056\025\052\026\016\027" +
    "\027\030\061\031\014\032\026\033\025\034\051\035\050" +
    "\036\037\037\060\040\035\041\044\042\042\043\031\044" +
    "\033\045\057\046\055\047\054\050\043\051\053\052\022" +
    "\053\021\054\023\001\002\000\116\004\030\005\015\006" +
    "\045\007\034\010\017\011\032\012\024\013\040\014\046" +
    "\020\uffa8\021\020\022\036\023\047\024\056\025\052\026" +
    "\016\027\027\030\061\031\014\032\026\033\025\034\051" +
    "\035\050\036\037\037\060\040\035\041\044\042\042\043" +
    "\031\044\033\045\057\046\055\047\054\050\043\051\053" +
    "\052\022\053\021\054\023\001\002\000\004\020\102\001" +
    "\002\000\116\004\030\005\015\006\045\007\034\010\017" +
    "\011\032\012\024\013\040\014\046\020\uffa8\021\020\022" +
    "\036\023\047\024\056\025\052\026\016\027\027\030\061" +
    "\031\014\032\026\033\025\034\051\035\050\036\037\037" +
    "\060\040\035\041\044\042\042\043\031\044\033\045\057" +
    "\046\055\047\054\050\043\051\053\052\022\053\021\054" +
    "\023\001\002\000\116\004\030\005\015\006\045\007\034" +
    "\010\017\011\032\012\024\013\040\014\046\020\uffa8\021" +
    "\020\022\036\023\047\024\056\025\052\026\016\027\027" +
    "\030\061\031\014\032\026\033\025\034\051\035\050\036" +
    "\037\037\060\040\035\041\044\042\042\043\031\044\033" +
    "\045\057\046\055\047\054\050\043\051\053\052\022\053" +
    "\021\054\023\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa8\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\116\004\030\005\015" +
    "\006\045\007\034\010\017\011\032\012\024\013\040\014" +
    "\046\020\uffa8\021\020\022\036\023\047\024\056\025\052" +
    "\026\016\027\027\030\061\031\014\032\026\033\025\034" +
    "\051\035\050\036\037\037\060\040\035\041\044\042\042" +
    "\043\031\044\033\045\057\046\055\047\054\050\043\051" +
    "\053\052\022\053\021\054\023\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa8\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\116" +
    "\004\030\005\015\006\045\007\034\010\017\011\032\012" +
    "\024\013\040\014\046\020\uffa8\021\020\022\036\023\047" +
    "\024\056\025\052\026\016\027\027\030\061\031\014\032" +
    "\026\033\025\034\051\035\050\036\037\037\060\040\035" +
    "\041\044\042\042\043\031\044\033\045\057\046\055\047" +
    "\054\050\043\051\053\052\022\053\021\054\023\001\002" +
    "\000\116\004\030\005\015\006\045\007\034\010\017\011" +
    "\032\012\024\013\040\014\046\020\uffa8\021\020\022\036" +
    "\023\047\024\056\025\052\026\016\027\027\030\061\031" +
    "\014\032\026\033\025\034\051\035\050\036\037\037\060" +
    "\040\035\041\044\042\042\043\031\044\033\045\057\046" +
    "\055\047\054\050\043\051\053\052\022\053\021\054\023" +
    "\001\002\000\116\004\030\005\015\006\045\007\034\010" +
    "\017\011\032\012\024\013\040\014\046\020\uffa8\021\020" +
    "\022\036\023\047\024\056\025\052\026\016\027\027\030" +
    "\061\031\014\032\026\033\025\034\051\035\050\036\037" +
    "\037\060\040\035\041\044\042\042\043\031\044\033\045" +
    "\057\046\055\047\054\050\043\051\053\052\022\053\021" +
    "\054\023\001\002\000\116\004\030\005\015\006\045\007" +
    "\034\010\017\011\032\012\024\013\040\014\046\020\uffa8" +
    "\021\020\022\036\023\047\024\056\025\052\026\016\027" +
    "\027\030\061\031\014\032\026\033\025\034\051\035\050" +
    "\036\037\037\060\040\035\041\044\042\042\043\031\044" +
    "\033\045\057\046\055\047\054\050\043\051\053\052\022" +
    "\053\021\054\023\001\002\000\116\004\030\005\015\006" +
    "\045\007\034\010\017\011\032\012\024\013\040\014\046" +
    "\020\uffa8\021\020\022\036\023\047\024\056\025\052\026" +
    "\016\027\027\030\061\031\014\032\026\033\025\034\051" +
    "\035\050\036\037\037\060\040\035\041\044\042\042\043" +
    "\031\044\033\045\057\046\055\047\054\050\043\051\053" +
    "\052\022\053\021\054\023\001\002\000\116\004\030\005" +
    "\015\006\045\007\034\010\017\011\032\012\024\013\040" +
    "\014\046\020\uffa8\021\020\022\036\023\047\024\056\025" +
    "\052\026\016\027\027\030\061\031\014\032\026\033\025" +
    "\034\051\035\050\036\037\037\060\040\035\041\044\042" +
    "\042\043\031\044\033\045\057\046\055\047\054\050\043" +
    "\051\053\052\022\053\021\054\023\001\002\000\116\004" +
    "\030\005\015\006\045\007\034\010\017\011\032\012\024" +
    "\013\040\014\046\020\uffa8\021\020\022\036\023\047\024" +
    "\056\025\052\026\016\027\027\030\061\031\014\032\026" +
    "\033\025\034\051\035\050\036\037\037\060\040\035\041" +
    "\044\042\042\043\031\044\033\045\057\046\055\047\054" +
    "\050\043\051\053\052\022\053\021\054\023\001\002\000" +
    "\116\004\030\005\015\006\045\007\034\010\017\011\032" +
    "\012\024\013\040\014\046\020\uffa8\021\020\022\036\023" +
    "\047\024\056\025\052\026\016\027\027\030\061\031\014" +
    "\032\026\033\025\034\051\035\050\036\037\037\060\040" +
    "\035\041\044\042\042\043\031\044\033\045\057\046\055" +
    "\047\054\050\043\051\053\052\022\053\021\054\023\001" +
    "\002\000\116\004\030\005\015\006\045\007\034\010\017" +
    "\011\032\012\024\013\040\014\046\020\uffa8\021\020\022" +
    "\036\023\047\024\056\025\052\026\016\027\027\030\061" +
    "\031\014\032\026\033\025\034\051\035\050\036\037\037" +
    "\060\040\035\041\044\042\042\043\031\044\033\045\057" +
    "\046\055\047\054\050\043\051\053\052\022\053\021\054" +
    "\023\001\002\000\116\004\030\005\015\006\045\007\034" +
    "\010\017\011\032\012\024\013\040\014\046\020\uffa8\021" +
    "\020\022\036\023\047\024\056\025\052\026\016\027\027" +
    "\030\061\031\014\032\026\033\025\034\051\035\050\036" +
    "\037\037\060\040\035\041\044\042\042\043\031\044\033" +
    "\045\057\046\055\047\054\050\043\051\053\052\022\053" +
    "\021\054\023\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa8\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\004\020\uffbc\001\002" +
    "\000\004\020\uffb5\001\002\000\004\020\uffaf\001\002\000" +
    "\004\020\uffc0\001\002\000\004\020\uffae\001\002\000\004" +
    "\020\uffad\001\002\000\004\020\uffab\001\002\000\004\020" +
    "\uffbf\001\002\000\004\020\uffb8\001\002\000\004\020\uffb7" +
    "\001\002\000\004\020\uffc1\001\002\000\004\020\uffc4\001" +
    "\002\000\004\020\uffca\001\002\000\004\020\uffb3\001\002" +
    "\000\004\020\uffac\001\002\000\004\020\uffb2\001\002\000" +
    "\036\004\ufff3\007\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\044\ufff3\046\ufff3\047" +
    "\ufff3\051\ufff3\001\002\000\004\020\uffc5\001\002\000\004" +
    "\020\uffb6\001\002\000\004\020\uffc2\001\002\000\004\020" +
    "\uffb4\001\002\000\004\020\uffc9\001\002\000\004\020\uffb0" +
    "\001\002\000\004\020\uffc7\001\002\000\004\020\uffb1\001" +
    "\002\000\004\020\uffcc\001\002\000\004\020\uffbd\001\002" +
    "\000\004\020\uffba\001\002\000\004\020\uffb9\001\002\000" +
    "\004\020\uffc6\001\002\000\004\020\uffcd\001\002\000\004" +
    "\020\uffaa\001\002\000\004\020\uffa9\001\002\000\004\020" +
    "\uffc3\001\002\000\004\020\uffc8\001\002\000\004\020\uffbe" +
    "\001\002\000\004\020\uffcb\001\002\000\004\020\uffbb\001" +
    "\002\000\030\004\ufff8\007\ufff8\015\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\044\ufff8\046\ufff8\047\ufff8\001" +
    "\002\000\004\002\001\001\002\000\004\015\175\001\002" +
    "\000\016\015\uffa6\021\137\022\136\023\135\024\134\025" +
    "\140\001\002\000\004\012\170\001\002\000\004\012\164" +
    "\001\002\000\004\012\155\001\002\000\004\012\147\001" +
    "\002\000\004\012\141\001\002\000\004\004\142\001\002" +
    "\000\004\013\143\001\002\000\020\015\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\051\145\001\002\000\016" +
    "\015\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\001" +
    "\002\000\024\004\ufffd\007\ufffd\015\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\051\145\001\002\000\022\004" +
    "\ufffe\007\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\001\002\000\006\004\150\013\uff9d\001\002\000" +
    "\006\004\150\013\uff9d\001\002\000\004\013\152\001\002" +
    "\000\020\015\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\051\145\001\002\000\016\015\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\001\002\000\004\013\uff9e\001" +
    "\002\000\004\005\156\001\002\000\006\013\uffa5\014\162" +
    "\001\002\000\004\013\160\001\002\000\020\015\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\051\145\001\002" +
    "\000\016\015\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\001\002\000\004\005\156\001\002\000\004\013\uffa4" +
    "\001\002\000\006\004\150\013\uff9d\001\002\000\004\013" +
    "\166\001\002\000\020\015\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\051\145\001\002\000\016\015\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\001\002\000\004" +
    "\005\171\001\002\000\004\013\172\001\002\000\020\015" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\051\145" +
    "\001\002\000\016\015\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\001\002\000\004\015\uffa7\001\002\000\124" +
    "\004\212\005\177\006\230\007\216\010\201\011\215\012" +
    "\206\013\222\014\232\015\uff73\016\231\017\224\020\223" +
    "\021\202\022\220\023\233\024\243\025\236\026\200\027" +
    "\211\030\247\031\176\032\210\033\207\034\235\035\234" +
    "\036\221\037\246\040\217\041\227\042\225\043\213\044" +
    "\214\045\244\046\242\047\240\050\226\051\237\052\204" +
    "\053\203\054\205\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\215\012\206\013\222\014\232" +
    "\015\uff73\016\231\017\224\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\225\043\213\044\214\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\215\012\206\013\222\014\232\015\uff73\016\231\017" +
    "\224\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\225" +
    "\043\213\044\214\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\215\012\206\013" +
    "\222\014\232\015\uff73\016\231\017\224\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\225\043\213\044\214\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\124\004\212\005\177\006\230\007" +
    "\216\010\201\011\215\012\206\013\222\014\232\015\uff73" +
    "\016\231\017\224\020\223\021\202\022\220\023\233\024" +
    "\243\025\236\026\200\027\211\030\247\031\176\032\210" +
    "\033\207\034\235\035\234\036\221\037\246\040\217\041" +
    "\227\042\225\043\213\044\214\045\244\046\242\047\240" +
    "\050\226\051\237\052\204\053\203\054\205\001\002\000" +
    "\124\004\212\005\177\006\230\007\216\010\201\011\215" +
    "\012\206\013\222\014\232\015\uff73\016\231\017\224\020" +
    "\223\021\202\022\220\023\233\024\243\025\236\026\200" +
    "\027\211\030\247\031\176\032\210\033\207\034\235\035" +
    "\234\036\221\037\246\040\217\041\227\042\225\043\213" +
    "\044\214\045\244\046\242\047\240\050\226\051\237\052" +
    "\204\053\203\054\205\001\002\000\124\004\212\005\177" +
    "\006\230\007\216\010\201\011\215\012\206\013\222\014" +
    "\232\015\uff73\016\231\017\224\020\223\021\202\022\220" +
    "\023\233\024\243\025\236\026\200\027\211\030\247\031" +
    "\176\032\210\033\207\034\235\035\234\036\221\037\246" +
    "\040\217\041\227\042\225\043\213\044\214\045\244\046" +
    "\242\047\240\050\226\051\237\052\204\053\203\054\205" +
    "\001\002\000\124\004\212\005\177\006\230\007\216\010" +
    "\201\011\215\012\206\013\222\014\232\015\uff73\016\231" +
    "\017\224\020\223\021\202\022\220\023\233\024\243\025" +
    "\236\026\200\027\211\030\247\031\176\032\210\033\207" +
    "\034\235\035\234\036\221\037\246\040\217\041\227\042" +
    "\225\043\213\044\214\045\244\046\242\047\240\050\226" +
    "\051\237\052\204\053\203\054\205\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\215\012\206" +
    "\013\222\014\232\015\uff73\016\231\017\224\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\225\043\213\044\214" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\215\012\206\013\222\014\232\015" +
    "\uff73\016\231\017\224\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\225\043\213\044\214\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\124\004\212\005\177\006\230\007\216\010\201\011" +
    "\215\012\206\013\222\014\232\015\uff73\016\231\017\224" +
    "\020\223\021\202\022\220\023\233\024\243\025\236\026" +
    "\200\027\211\030\247\031\176\032\210\033\207\034\235" +
    "\035\234\036\221\037\246\040\217\041\227\042\225\043" +
    "\213\044\214\045\244\046\242\047\240\050\226\051\237" +
    "\052\204\053\203\054\205\001\002\000\124\004\212\005" +
    "\177\006\230\007\216\010\201\011\215\012\206\013\222" +
    "\014\232\015\uff73\016\231\017\224\020\223\021\202\022" +
    "\220\023\233\024\243\025\236\026\200\027\211\030\247" +
    "\031\176\032\210\033\207\034\235\035\234\036\221\037" +
    "\246\040\217\041\227\042\225\043\213\044\214\045\244" +
    "\046\242\047\240\050\226\051\237\052\204\053\203\054" +
    "\205\001\002\000\124\004\212\005\177\006\230\007\216" +
    "\010\201\011\215\012\206\013\222\014\232\015\uff73\016" +
    "\231\017\224\020\223\021\202\022\220\023\233\024\243" +
    "\025\236\026\200\027\211\030\247\031\176\032\210\033" +
    "\207\034\235\035\234\036\221\037\246\040\217\041\227" +
    "\042\225\043\213\044\214\045\244\046\242\047\240\050" +
    "\226\051\237\052\204\053\203\054\205\001\002\000\124" +
    "\004\212\005\177\006\230\007\216\010\201\011\215\012" +
    "\206\013\222\014\232\015\uff73\016\231\017\224\020\223" +
    "\021\202\022\220\023\233\024\243\025\236\026\200\027" +
    "\211\030\247\031\176\032\210\033\207\034\235\035\234" +
    "\036\221\037\246\040\217\041\227\042\225\043\213\044" +
    "\214\045\244\046\242\047\240\050\226\051\237\052\204" +
    "\053\203\054\205\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\215\012\206\013\222\014\232" +
    "\015\uff73\016\231\017\224\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\225\043\213\044\214\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\215\012\206\013\222\014\232\015\uff73\016\231\017" +
    "\224\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\225" +
    "\043\213\044\214\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\215\012\206\013" +
    "\222\014\232\015\uff73\016\231\017\224\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\225\043\213\044\214\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\124\004\212\005\177\006\230\007" +
    "\216\010\201\011\215\012\206\013\222\014\232\015\uff73" +
    "\016\231\017\224\020\223\021\202\022\220\023\233\024" +
    "\243\025\236\026\200\027\211\030\247\031\176\032\210" +
    "\033\207\034\235\035\234\036\221\037\246\040\217\041" +
    "\227\042\225\043\213\044\214\045\244\046\242\047\240" +
    "\050\226\051\237\052\204\053\203\054\205\001\002\000" +
    "\124\004\212\005\177\006\230\007\216\010\201\011\215" +
    "\012\206\013\222\014\232\015\uff73\016\231\017\224\020" +
    "\223\021\202\022\220\023\233\024\243\025\236\026\200" +
    "\027\211\030\247\031\176\032\210\033\207\034\235\035" +
    "\234\036\221\037\246\040\217\041\227\042\225\043\213" +
    "\044\214\045\244\046\242\047\240\050\226\051\237\052" +
    "\204\053\203\054\205\001\002\000\124\004\212\005\177" +
    "\006\230\007\216\010\201\011\215\012\206\013\222\014" +
    "\232\015\uff73\016\231\017\224\020\223\021\202\022\220" +
    "\023\233\024\243\025\236\026\200\027\211\030\247\031" +
    "\176\032\210\033\207\034\235\035\234\036\221\037\246" +
    "\040\217\041\227\042\225\043\213\044\214\045\244\046" +
    "\242\047\240\050\226\051\237\052\204\053\203\054\205" +
    "\001\002\000\124\004\212\005\177\006\230\007\216\010" +
    "\201\011\215\012\206\013\222\014\232\015\uff73\016\231" +
    "\017\224\020\223\021\202\022\220\023\233\024\243\025" +
    "\236\026\200\027\211\030\247\031\176\032\210\033\207" +
    "\034\235\035\234\036\221\037\246\040\217\041\227\042" +
    "\225\043\213\044\214\045\244\046\242\047\240\050\226" +
    "\051\237\052\204\053\203\054\205\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\215\012\206" +
    "\013\222\014\232\015\uff73\016\231\017\224\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\225\043\213\044\214" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\215\012\206\013\222\014\232\015" +
    "\uff73\016\231\017\224\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\225\043\213\044\214\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\124\004\212\005\177\006\230\007\216\010\201\011" +
    "\215\012\206\013\222\014\232\015\uff73\016\231\017\224" +
    "\020\223\021\202\022\220\023\233\024\243\025\236\026" +
    "\200\027\211\030\247\031\176\032\210\033\207\034\235" +
    "\035\234\036\221\037\246\040\217\041\227\042\225\043" +
    "\213\044\214\045\244\046\242\047\240\050\226\051\237" +
    "\052\204\053\203\054\205\001\002\000\124\004\212\005" +
    "\177\006\230\007\216\010\201\011\215\012\206\013\222" +
    "\014\232\015\uff73\016\231\017\224\020\223\021\202\022" +
    "\220\023\233\024\243\025\236\026\200\027\211\030\247" +
    "\031\176\032\210\033\207\034\235\035\234\036\221\037" +
    "\246\040\217\041\227\042\225\043\213\044\214\045\244" +
    "\046\242\047\240\050\226\051\237\052\204\053\203\054" +
    "\205\001\002\000\124\004\212\005\177\006\230\007\216" +
    "\010\201\011\215\012\206\013\222\014\232\015\uff73\016" +
    "\231\017\224\020\223\021\202\022\220\023\233\024\243" +
    "\025\236\026\200\027\211\030\247\031\176\032\210\033" +
    "\207\034\235\035\234\036\221\037\246\040\217\041\227" +
    "\042\225\043\213\044\214\045\244\046\242\047\240\050" +
    "\226\051\237\052\204\053\203\054\205\001\002\000\124" +
    "\004\212\005\177\006\230\007\216\010\201\011\215\012" +
    "\206\013\222\014\232\015\uff73\016\231\017\224\020\223" +
    "\021\202\022\220\023\233\024\243\025\236\026\200\027" +
    "\211\030\247\031\176\032\210\033\207\034\235\035\234" +
    "\036\221\037\246\040\217\041\227\042\225\043\213\044" +
    "\214\045\244\046\242\047\240\050\226\051\237\052\204" +
    "\053\203\054\205\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\215\012\206\013\222\014\232" +
    "\015\uff73\016\231\017\224\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\225\043\213\044\214\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\215\012\206\013\222\014\232\015\uff73\016\231\017" +
    "\224\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\225" +
    "\043\213\044\214\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\215\012\206\013" +
    "\222\014\232\015\uff73\016\231\017\224\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\225\043\213\044\214\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\124\004\212\005\177\006\230\007" +
    "\216\010\201\011\215\012\206\013\222\014\232\015\uff73" +
    "\016\231\017\224\020\223\021\202\022\220\023\233\024" +
    "\243\025\236\026\200\027\211\030\247\031\176\032\210" +
    "\033\207\034\235\035\234\036\221\037\246\040\217\041" +
    "\227\042\225\043\213\044\214\045\244\046\242\047\240" +
    "\050\226\051\237\052\204\053\203\054\205\001\002\000" +
    "\124\004\212\005\177\006\230\007\216\010\201\011\215" +
    "\012\206\013\222\014\232\015\uff73\016\231\017\224\020" +
    "\223\021\202\022\220\023\233\024\243\025\236\026\200" +
    "\027\211\030\247\031\176\032\210\033\207\034\235\035" +
    "\234\036\221\037\246\040\217\041\227\042\225\043\213" +
    "\044\214\045\244\046\242\047\240\050\226\051\237\052" +
    "\204\053\203\054\205\001\002\000\124\004\212\005\177" +
    "\006\230\007\216\010\201\011\215\012\206\013\222\014" +
    "\232\015\uff73\016\231\017\224\020\223\021\202\022\220" +
    "\023\233\024\243\025\236\026\200\027\211\030\247\031" +
    "\176\032\210\033\207\034\235\035\234\036\221\037\246" +
    "\040\217\041\227\042\225\043\213\044\214\045\244\046" +
    "\242\047\240\050\226\051\237\052\204\053\203\054\205" +
    "\001\002\000\124\004\212\005\177\006\230\007\216\010" +
    "\201\011\215\012\206\013\222\014\232\015\uff73\016\231" +
    "\017\224\020\223\021\202\022\220\023\233\024\243\025" +
    "\236\026\200\027\211\030\247\031\176\032\210\033\207" +
    "\034\235\035\234\036\221\037\246\040\217\041\227\042" +
    "\225\043\213\044\214\045\244\046\242\047\240\050\226" +
    "\051\237\052\204\053\203\054\205\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\215\012\206" +
    "\013\222\014\232\015\uff73\016\231\017\224\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\225\043\213\044\214" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\215\012\206\013\222\014\232\015" +
    "\uff73\016\231\017\224\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\225\043\213\044\214\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\004\015\255\001\002\000\124\004\212\005\177\006" +
    "\230\007\216\010\201\011\215\012\206\013\222\014\232" +
    "\015\uff73\016\231\017\224\020\223\021\202\022\220\023" +
    "\233\024\243\025\236\026\200\027\211\030\247\031\176" +
    "\032\210\033\207\034\235\035\234\036\221\037\246\040" +
    "\217\041\227\042\225\043\213\044\214\045\244\046\242" +
    "\047\240\050\226\051\237\052\204\053\203\054\205\001" +
    "\002\000\124\004\212\005\177\006\230\007\216\010\201" +
    "\011\215\012\206\013\222\014\232\015\uff73\016\231\017" +
    "\224\020\223\021\202\022\220\023\233\024\243\025\236" +
    "\026\200\027\211\030\247\031\176\032\210\033\207\034" +
    "\235\035\234\036\221\037\246\040\217\041\227\042\225" +
    "\043\213\044\214\045\244\046\242\047\240\050\226\051" +
    "\237\052\204\053\203\054\205\001\002\000\124\004\212" +
    "\005\177\006\230\007\216\010\201\011\215\012\206\013" +
    "\222\014\232\015\uff73\016\231\017\224\020\223\021\202" +
    "\022\220\023\233\024\243\025\236\026\200\027\211\030" +
    "\247\031\176\032\210\033\207\034\235\035\234\036\221" +
    "\037\246\040\217\041\227\042\225\043\213\044\214\045" +
    "\244\046\242\047\240\050\226\051\237\052\204\053\203" +
    "\054\205\001\002\000\004\015\uff9c\001\002\000\124\004" +
    "\212\005\177\006\230\007\216\010\201\011\215\012\206" +
    "\013\222\014\232\015\uff73\016\231\017\224\020\223\021" +
    "\202\022\220\023\233\024\243\025\236\026\200\027\211" +
    "\030\247\031\176\032\210\033\207\034\235\035\234\036" +
    "\221\037\246\040\217\041\227\042\225\043\213\044\214" +
    "\045\244\046\242\047\240\050\226\051\237\052\204\053" +
    "\203\054\205\001\002\000\124\004\212\005\177\006\230" +
    "\007\216\010\201\011\215\012\206\013\222\014\232\015" +
    "\uff73\016\231\017\224\020\223\021\202\022\220\023\233" +
    "\024\243\025\236\026\200\027\211\030\247\031\176\032" +
    "\210\033\207\034\235\035\234\036\221\037\246\040\217" +
    "\041\227\042\225\043\213\044\214\045\244\046\242\047" +
    "\240\050\226\051\237\052\204\053\203\054\205\001\002" +
    "\000\004\015\uff8a\001\002\000\004\015\uff83\001\002\000" +
    "\004\015\uff7d\001\002\000\004\015\uff8e\001\002\000\004" +
    "\015\uff7c\001\002\000\016\004\ufff5\015\ufff5\016\007\017" +
    "\013\044\ufff5\051\012\001\002\000\010\004\260\015\uff6d" +
    "\044\262\001\002\000\004\015\uff72\001\002\000\004\043" +
    "\u01ac\001\002\000\004\015\u0133\001\002\000\004\043\263" +
    "\001\002\000\040\004\276\007\266\013\uff5d\014\265\026" +
    "\uff5d\027\uff5d\030\uff5d\032\271\034\275\037\273\040\270" +
    "\041\272\042\274\045\uff5d\054\277\001\002\000\044\004" +
    "\276\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d" +
    "\032\271\033\uff5d\034\275\035\uff5d\037\273\040\270\041" +
    "\272\042\274\045\uff5d\054\277\001\002\000\044\004\276" +
    "\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d\032" +
    "\271\033\uff5d\034\275\035\uff5d\037\273\040\270\041\272" +
    "\042\274\045\uff5d\054\277\001\002\000\052\004\uff26\007" +
    "\uff26\010\uff26\012\uff26\013\uff26\014\uff26\026\uff26\027\uff26" +
    "\030\uff26\032\uff26\033\uff26\034\uff26\035\uff26\037\uff26\040" +
    "\uff26\041\uff26\042\uff26\045\uff26\052\uff26\054\uff26\001\002" +
    "\000\014\013\u0127\026\303\027\301\030\302\045\304\001" +
    "\002\000\044\004\276\007\266\013\uff5d\014\265\026\uff5d" +
    "\027\uff5d\030\uff5d\032\271\033\uff5d\034\275\035\uff5d\037" +
    "\273\040\270\041\272\042\274\045\uff5d\054\277\001\002" +
    "\000\042\004\276\005\u011b\007\u011a\014\265\026\uff5d\027" +
    "\uff5d\030\uff5d\032\271\033\uff5d\034\275\037\273\040\270" +
    "\041\272\042\274\045\uff5d\054\277\001\002\000\044\004" +
    "\276\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d" +
    "\032\271\033\uff5d\034\275\035\uff5d\037\273\040\270\041" +
    "\272\042\274\045\uff5d\054\277\001\002\000\044\004\276" +
    "\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d\032" +
    "\271\033\uff5d\034\275\035\uff5d\037\273\040\270\041\272" +
    "\042\274\045\uff5d\054\277\001\002\000\114\004\330\005" +
    "\315\006\343\007\334\010\317\011\332\012\324\013\340" +
    "\014\345\021\320\022\336\023\346\024\355\025\351\026" +
    "\316\027\327\030\360\031\314\032\326\033\325\034\350" +
    "\035\347\036\337\037\357\040\335\041\342\042\uff38\043" +
    "\331\044\333\045\356\046\354\047\353\050\341\051\352" +
    "\052\322\053\321\054\323\001\002\000\040\004\276\007" +
    "\266\014\265\026\uff5d\027\uff5d\030\uff5d\032\271\034\275" +
    "\035\uff5d\037\273\040\270\041\272\042\274\045\uff5d\054" +
    "\277\001\002\000\052\004\uff27\007\uff27\010\uff27\012\uff27" +
    "\013\uff27\014\uff27\026\uff27\027\uff27\030\uff27\032\uff27\033" +
    "\uff27\034\uff27\035\uff27\037\uff27\040\uff27\041\uff27\042\uff27" +
    "\045\uff27\052\uff27\054\uff27\001\002\000\044\004\276\007" +
    "\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d\032\271" +
    "\033\uff5d\034\275\035\uff5d\037\273\040\270\041\272\042" +
    "\274\045\uff5d\054\277\001\002\000\020\013\uff60\026\303" +
    "\027\301\030\302\033\uff60\035\uff60\045\304\001\002\000" +
    "\044\004\276\007\266\013\uff5d\014\265\026\uff5d\027\uff5d" +
    "\030\uff5d\032\271\033\uff5d\034\275\035\uff5d\037\273\040" +
    "\270\041\272\042\274\045\uff5d\054\277\001\002\000\044" +
    "\004\276\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030" +
    "\uff5d\032\271\033\uff5d\034\275\035\uff5d\037\273\040\270" +
    "\041\272\042\274\045\uff5d\054\277\001\002\000\044\004" +
    "\276\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d" +
    "\032\271\033\uff5d\034\275\035\uff5d\037\273\040\270\041" +
    "\272\042\274\045\uff5d\054\277\001\002\000\044\004\276" +
    "\007\266\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d\032" +
    "\271\033\uff5d\034\275\035\uff5d\037\273\040\270\041\272" +
    "\042\274\045\uff5d\054\277\001\002\000\020\013\uff65\026" +
    "\uff65\027\uff65\030\uff65\033\uff65\035\uff65\045\uff65\001\002" +
    "\000\020\013\uff68\026\uff68\027\uff68\030\uff68\033\uff68\035" +
    "\uff68\045\uff68\001\002\000\020\013\uff66\026\uff66\027\uff66" +
    "\030\uff66\033\uff66\035\uff66\045\uff66\001\002\000\020\013" +
    "\uff67\026\uff67\027\uff67\030\uff67\033\uff67\035\uff67\045\uff67" +
    "\001\002\000\014\026\303\027\301\030\302\035\312\045" +
    "\304\001\002\000\044\004\276\007\266\013\uff5d\014\265" +
    "\026\uff5d\027\uff5d\030\uff5d\032\271\033\uff5d\034\275\035" +
    "\uff5d\037\273\040\270\041\272\042\274\045\uff5d\054\277" +
    "\001\002\000\020\013\uff6c\026\uff6c\027\uff6c\030\uff6c\033" +
    "\uff6c\035\uff6c\045\uff6c\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\114\004\330\005\315" +
    "\006\343\007\334\010\317\011\332\012\324\013\340\014" +
    "\345\021\320\022\336\023\346\024\355\025\351\026\316" +
    "\027\327\030\360\031\314\032\326\033\325\034\350\035" +
    "\347\036\337\037\357\040\335\041\342\042\uff38\043\331" +
    "\044\333\045\356\046\354\047\353\050\341\051\352\052" +
    "\322\053\321\054\323\001\002\000\004\042\375\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\114\004\330\005\315\006\343\007\334\010\317\011" +
    "\332\012\324\013\340\014\345\021\320\022\336\023\346" +
    "\024\355\025\351\026\316\027\327\030\360\031\314\032" +
    "\326\033\325\034\350\035\347\036\337\037\357\040\335" +
    "\041\342\042\uff38\043\331\044\333\045\356\046\354\047" +
    "\353\050\341\051\352\052\322\053\321\054\323\001\002" +
    "\000\004\042\uff4b\001\002\000\004\042\uff44\001\002\000" +
    "\004\042\uff3f\001\002\000\004\042\uff4f\001\002\000\004" +
    "\042\uff3e\001\002\000\004\042\uff3d\001\002\000\004\042" +
    "\uff3b\001\002\000\004\042\uff4e\001\002\000\004\042\uff47" +
    "\001\002\000\004\042\uff46\001\002\000\004\042\uff50\001" +
    "\002\000\004\042\uff53\001\002\000\044\004\276\007\266" +
    "\013\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d\032\271\033" +
    "\uff5d\034\275\035\uff5d\037\273\040\270\041\272\042\274" +
    "\045\uff5d\054\277\001\002\000\020\013\uff61\026\303\027" +
    "\301\030\302\033\uff61\035\uff61\045\304\001\002\000\004" +
    "\042\uff59\001\002\000\004\042\uff42\001\002\000\004\042" +
    "\uff3c\001\002\000\004\042\uff54\001\002\000\004\042\uff45" +
    "\001\002\000\004\042\uff51\001\002\000\004\042\uff43\001" +
    "\002\000\004\042\uff58\001\002\000\004\042\uff40\001\002" +
    "\000\004\042\uff56\001\002\000\004\042\uff41\001\002\000" +
    "\004\042\uff5b\001\002\000\004\042\uff4c\001\002\000\004" +
    "\042\uff49\001\002\000\004\042\uff48\001\002\000\004\042" +
    "\uff55\001\002\000\004\042\uff5c\001\002\000\004\042\uff3a" +
    "\001\002\000\004\042\uff39\001\002\000\004\042\uff52\001" +
    "\002\000\004\042\uff57\001\002\000\004\042\uff4d\001\002" +
    "\000\004\042\uff5a\001\002\000\004\042\uff4a\001\002\000" +
    "\020\013\uff64\026\303\027\301\030\302\033\uff64\035\uff64" +
    "\045\304\001\002\000\020\013\uff62\026\303\027\301\030" +
    "\302\033\uff62\035\uff62\045\304\001\002\000\014\026\303" +
    "\027\301\030\302\033\u0124\045\304\001\002\000\042\004" +
    "\uff26\007\uff26\014\uff26\026\uff26\027\uff26\030\uff26\032\uff26" +
    "\033\uff26\034\uff26\036\u0120\037\uff26\040\uff26\041\uff26\042" +
    "\uff26\045\uff26\054\uff26\001\002\000\004\036\u011c\001\002" +
    "\000\004\005\u011d\001\002\000\004\033\u011e\001\002\000" +
    "\044\004\276\007\266\013\uff5d\014\265\026\uff5d\027\uff5d" +
    "\030\uff5d\032\271\033\uff5d\034\275\035\uff5d\037\273\040" +
    "\270\041\272\042\274\045\uff5d\054\277\001\002\000\020" +
    "\013\uff6a\026\303\027\301\030\302\033\uff6a\035\uff6a\045" +
    "\304\001\002\000\004\007\u0121\001\002\000\004\033\u0122" +
    "\001\002\000\044\004\276\007\266\013\uff5d\014\265\026" +
    "\uff5d\027\uff5d\030\uff5d\032\271\033\uff5d\034\275\035\uff5d" +
    "\037\273\040\270\041\272\042\274\045\uff5d\054\277\001" +
    "\002\000\020\013\uff69\026\303\027\301\030\302\033\uff69" +
    "\035\uff69\045\304\001\002\000\044\004\276\007\266\013" +
    "\uff5d\014\265\026\uff5d\027\uff5d\030\uff5d\032\271\033\uff5d" +
    "\034\275\035\uff5d\037\273\040\270\041\272\042\274\045" +
    "\uff5d\054\277\001\002\000\020\013\uff6b\026\303\027\301" +
    "\030\302\033\uff6b\035\uff6b\045\304\001\002\000\020\013" +
    "\uff63\026\303\027\301\030\302\033\uff63\035\uff63\045\304" +
    "\001\002\000\010\016\uff6f\017\uff6f\051\uff6f\001\002\000" +
    "\010\016\007\017\013\051\u012c\001\002\000\010\016\007" +
    "\017\013\051\u012c\001\002\000\010\016\007\017\013\051" +
    "\u012c\001\002\000\010\004\260\015\uff6d\044\262\001\002" +
    "\000\016\004\ufff9\015\ufff9\016\007\017\013\044\ufff9\051" +
    "\u012c\001\002\000\010\004\ufffc\015\ufffc\044\ufffc\001\002" +
    "\000\004\015\uff6e\001\002\000\010\004\ufffa\015\ufffa\044" +
    "\ufffa\001\002\000\010\004\ufffb\015\ufffb\044\ufffb\001\002" +
    "\000\020\013\uff5e\026\303\027\301\030\302\033\uff5e\035" +
    "\uff5e\045\304\001\002\000\020\013\uff5f\026\303\027\301" +
    "\030\302\033\uff5f\035\uff5f\045\304\001\002\000\016\015" +
    "\ufff5\016\007\017\013\046\ufff5\047\ufff5\051\012\001\002" +
    "\000\010\015\uff35\046\u0135\047\u0137\001\002\000\006\004" +
    "\u01a3\007\u01a2\001\002\000\004\015\u0142\001\002\000\006" +
    "\004\u013a\007\u0138\001\002\000\006\013\uff2e\050\u0140\001" +
    "\002\000\004\013\u013d\001\002\000\006\013\uff2d\050\u013b" +
    "\001\002\000\006\004\u013a\007\u0138\001\002\000\004\013" +
    "\uff30\001\002\000\016\015\ufff5\016\007\017\013\046\ufff5" +
    "\047\ufff5\051\012\001\002\000\010\015\uff35\046\u0135\047" +
    "\u0137\001\002\000\004\015\uff36\001\002\000\006\004\u013a" +
    "\007\u0138\001\002\000\004\013\uff2f\001\002\000\014\004" +
    "\ufff5\007\ufff5\016\007\017\013\051\012\001\002\000\006" +
    "\004\276\007\266\001\002\000\004\002\uff2c\001\002\000" +
    "\004\002\000\001\002\000\004\010\u0147\001\002\000\006" +
    "\004\276\007\266\001\002\000\004\052\u014e\001\002\000" +
    "\012\004\uff24\007\uff24\012\u014b\052\uff24\001\002\000\010" +
    "\004\276\007\266\052\uff28\001\002\000\006\004\276\007" +
    "\266\001\002\000\010\004\uff25\007\uff25\052\uff25\001\002" +
    "\000\004\052\uff29\001\002\000\120\004\u015e\005\u0155\006" +
    "\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f" +
    "\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024" +
    "\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c" +
    "\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041" +
    "\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175" +
    "\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\004\013" +
    "\u0150\001\002\000\012\002\uff2a\004\ufffd\007\ufffd\051\145" +
    "\001\002\000\006\004\276\007\266\001\002\000\004\002" +
    "\uff2b\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162" +
    "\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017" +
    "\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173" +
    "\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034" +
    "\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169" +
    "\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051" +
    "\u0174\053\ufefb\054\u0159\001\002\000\004\053\uff22\001\002" +
    "\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011" +
    "\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167" +
    "\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027" +
    "\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171" +
    "\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044" +
    "\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb" +
    "\054\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d\007" +
    "\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e" +
    "\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025" +
    "\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b" +
    "\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042" +
    "\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a" +
    "\051\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005" +
    "\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166" +
    "\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023" +
    "\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153" +
    "\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040" +
    "\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176" +
    "\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000" +
    "\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161" +
    "\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021" +
    "\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d" +
    "\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036" +
    "\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160" +
    "\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054" +
    "\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162" +
    "\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017" +
    "\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173" +
    "\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034" +
    "\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169" +
    "\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051" +
    "\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155" +
    "\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014" +
    "\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170" +
    "\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032" +
    "\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163" +
    "\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047" +
    "\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120" +
    "\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012" +
    "\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158" +
    "\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030" +
    "\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165" +
    "\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045" +
    "\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159" +
    "\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010" +
    "\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168" +
    "\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026" +
    "\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172" +
    "\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043" +
    "\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174" +
    "\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155\006" +
    "\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f" +
    "\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024" +
    "\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c" +
    "\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041" +
    "\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175" +
    "\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120\004" +
    "\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a" +
    "\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022" +
    "\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a" +
    "\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037" +
    "\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178" +
    "\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001" +
    "\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157" +
    "\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020" +
    "\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156" +
    "\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035" +
    "\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f" +
    "\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053" +
    "\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d" +
    "\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016" +
    "\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177" +
    "\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033" +
    "\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c" +
    "\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050" +
    "\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e" +
    "\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013" +
    "\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164" +
    "\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031" +
    "\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179" +
    "\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046" +
    "\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002" +
    "\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011" +
    "\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167" +
    "\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027" +
    "\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171" +
    "\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044" +
    "\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb" +
    "\054\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d\007" +
    "\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e" +
    "\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025" +
    "\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b" +
    "\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042" +
    "\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a" +
    "\051\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005" +
    "\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166" +
    "\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023" +
    "\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153" +
    "\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040" +
    "\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176" +
    "\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000" +
    "\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161" +
    "\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021" +
    "\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d" +
    "\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036" +
    "\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160" +
    "\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054" +
    "\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162" +
    "\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017" +
    "\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173" +
    "\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034" +
    "\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169" +
    "\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051" +
    "\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155" +
    "\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014" +
    "\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170" +
    "\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032" +
    "\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163" +
    "\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047" +
    "\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120" +
    "\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012" +
    "\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158" +
    "\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030" +
    "\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165" +
    "\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045" +
    "\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159" +
    "\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010" +
    "\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168" +
    "\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026" +
    "\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172" +
    "\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043" +
    "\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174" +
    "\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155\006" +
    "\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f" +
    "\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024" +
    "\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c" +
    "\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041" +
    "\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175" +
    "\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\004\053" +
    "\u018a\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162" +
    "\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017" +
    "\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173" +
    "\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034" +
    "\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169" +
    "\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051" +
    "\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155" +
    "\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014" +
    "\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170" +
    "\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032" +
    "\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163" +
    "\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047" +
    "\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120" +
    "\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012" +
    "\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158" +
    "\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030" +
    "\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165" +
    "\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045" +
    "\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159" +
    "\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010" +
    "\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168" +
    "\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026" +
    "\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172" +
    "\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043" +
    "\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174" +
    "\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155\006" +
    "\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f" +
    "\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024" +
    "\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c" +
    "\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041" +
    "\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175" +
    "\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120\004" +
    "\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a" +
    "\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022" +
    "\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a" +
    "\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037" +
    "\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178" +
    "\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001" +
    "\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157" +
    "\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020" +
    "\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156" +
    "\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035" +
    "\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f" +
    "\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053" +
    "\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d" +
    "\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016" +
    "\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177" +
    "\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033" +
    "\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c" +
    "\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050" +
    "\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e" +
    "\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013" +
    "\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164" +
    "\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031" +
    "\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179" +
    "\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046" +
    "\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002" +
    "\000\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011" +
    "\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167" +
    "\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027" +
    "\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171" +
    "\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044" +
    "\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb" +
    "\054\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d\007" +
    "\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e" +
    "\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025" +
    "\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b" +
    "\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042" +
    "\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a" +
    "\051\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005" +
    "\u0155\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166" +
    "\014\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023" +
    "\u0170\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153" +
    "\032\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040" +
    "\u0163\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176" +
    "\047\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000" +
    "\120\004\u015e\005\u0155\006\u016d\007\u0162\010\u0157\011\u0161" +
    "\012\u015a\013\u0166\014\u016f\016\u016e\017\u0168\020\u0167\021" +
    "\u0158\022\u0164\023\u0170\024\u0177\025\u0173\026\u0156\027\u015d" +
    "\030\u017a\031\u0153\032\u015c\033\u015b\034\u0172\035\u0171\036" +
    "\u0165\037\u0179\040\u0163\041\u016c\042\u0169\043\u015f\044\u0160" +
    "\045\u0178\046\u0176\047\u0175\050\u016a\051\u0174\053\ufefb\054" +
    "\u0159\001\002\000\120\004\u015e\005\u0155\006\u016d\007\u0162" +
    "\010\u0157\011\u0161\012\u015a\013\u0166\014\u016f\016\u016e\017" +
    "\u0168\020\u0167\021\u0158\022\u0164\023\u0170\024\u0177\025\u0173" +
    "\026\u0156\027\u015d\030\u017a\031\u0153\032\u015c\033\u015b\034" +
    "\u0172\035\u0171\036\u0165\037\u0179\040\u0163\041\u016c\042\u0169" +
    "\043\u015f\044\u0160\045\u0178\046\u0176\047\u0175\050\u016a\051" +
    "\u0174\053\ufefb\054\u0159\001\002\000\120\004\u015e\005\u0155" +
    "\006\u016d\007\u0162\010\u0157\011\u0161\012\u015a\013\u0166\014" +
    "\u016f\016\u016e\017\u0168\020\u0167\021\u0158\022\u0164\023\u0170" +
    "\024\u0177\025\u0173\026\u0156\027\u015d\030\u017a\031\u0153\032" +
    "\u015c\033\u015b\034\u0172\035\u0171\036\u0165\037\u0179\040\u0163" +
    "\041\u016c\042\u0169\043\u015f\044\u0160\045\u0178\046\u0176\047" +
    "\u0175\050\u016a\051\u0174\053\ufefb\054\u0159\001\002\000\004" +
    "\053\uff10\001\002\000\004\053\uff09\001\002\000\004\053" +
    "\uff03\001\002\000\004\053\uff14\001\002\000\004\053\uff02" +
    "\001\002\000\004\053\uff01\001\002\000\004\053\ufefc\001" +
    "\002\000\004\053\uff13\001\002\000\004\053\uff0c\001\002" +
    "\000\004\053\uff0b\001\002\000\004\053\uff15\001\002\000" +
    "\004\053\uff18\001\002\000\004\053\ufeff\001\002\000\004" +
    "\053\uff1e\001\002\000\004\053\uff07\001\002\000\004\013" +
    "\uff23\001\002\000\004\053\uff00\001\002\000\004\053\uff06" +
    "\001\002\000\004\053\ufefe\001\002\000\004\053\ufefd\001" +
    "\002\000\004\053\uff19\001\002\000\004\053\uff0a\001\002" +
    "\000\004\053\uff16\001\002\000\004\053\uff08\001\002\000" +
    "\004\053\uff1d\001\002\000\004\053\uff1b\001\002\000\004" +
    "\053\uff04\001\002\000\004\053\uff05\001\002\000\004\053" +
    "\uff20\001\002\000\004\053\uff11\001\002\000\004\053\uff0e" +
    "\001\002\000\004\053\uff0d\001\002\000\004\053\uff1a\001" +
    "\002\000\004\053\uff21\001\002\000\004\053\uff17\001\002" +
    "\000\004\053\uff1c\001\002\000\004\053\uff12\001\002\000" +
    "\004\053\uff1f\001\002\000\004\053\uff0f\001\002\000\006" +
    "\013\uff32\050\u01aa\001\002\000\006\013\uff31\050\u01a8\001" +
    "\002\000\004\013\u01a5\001\002\000\016\015\ufff5\016\007" +
    "\017\013\046\ufff5\047\ufff5\051\012\001\002\000\010\015" +
    "\uff35\046\u0135\047\u0137\001\002\000\004\015\uff37\001\002" +
    "\000\006\004\u01a3\007\u01a2\001\002\000\004\013\uff34\001" +
    "\002\000\006\004\u01a3\007\u01a2\001\002\000\004\013\uff33" +
    "\001\002\000\040\004\276\007\266\013\uff5d\014\265\026" +
    "\uff5d\027\uff5d\030\uff5d\032\271\034\275\037\273\040\270" +
    "\041\272\042\274\045\uff5d\054\277\001\002\000\014\013" +
    "\u01ae\026\303\027\301\030\302\045\304\001\002\000\010" +
    "\016\uff71\017\uff71\051\uff71\001\002\000\010\016\007\017" +
    "\013\051\u012c\001\002\000\010\004\260\015\uff6d\044\262" +
    "\001\002\000\004\015\uff70\001\002\000\004\015\uff7b\001" +
    "\002\000\004\015\uff74\001\002\000\004\015\uff8d\001\002" +
    "\000\004\015\uff86\001\002\000\004\015\uff85\001\002\000" +
    "\004\015\uff8f\001\002\000\004\015\uff92\001\002\000\004" +
    "\015\uff77\001\002\000\004\015\uff98\001\002\000\004\015" +
    "\uff81\001\002\000\004\015\uff7a\001\002\000\004\015\uff80" +
    "\001\002\000\004\015\uff76\001\002\000\004\015\uff75\001" +
    "\002\000\004\015\uff93\001\002\000\004\015\uff84\001\002" +
    "\000\004\015\uff90\001\002\000\004\015\uff82\001\002\000" +
    "\004\015\uff97\001\002\000\004\015\uff95\001\002\000\004" +
    "\015\uff7e\001\002\000\004\015\uff7f\001\002\000\004\015" +
    "\uff9a\001\002\000\004\015\uff8b\001\002\000\004\015\uff88" +
    "\001\002\000\004\015\uff87\001\002\000\004\015\uff94\001" +
    "\002\000\004\015\uff9b\001\002\000\004\015\uff79\001\002" +
    "\000\004\015\uff78\001\002\000\004\015\uff91\001\002\000" +
    "\004\015\uff96\001\002\000\004\015\uff8c\001\002\000\004" +
    "\015\uff99\001\002\000\004\015\uff89\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\114\004" +
    "\u01e2\005\u01d6\006\u01ee\007\u01e6\010\u01d8\011\u01e4\012\u01dd" +
    "\013\u01ea\014\u01ef\021\u01d9\022\u01e8\023\u01f0\024\u01f6\025" +
    "\u01f3\026\u01d7\027\u01e1\030\u01f9\031\u01d5\032\u01e0\033\u01df" +
    "\034\u01f2\035\u01f1\036\u01e9\037\u01f8\040\u01e7\041\u01ed\042" +
    "\u01eb\043\u01e3\044\u01e5\045\u01f7\046\u01f5\047\u01f4\050\u01ec" +
    "\051\uffce\052\u01db\053\u01da\054\u01dc\001\002\000\004\051" +
    "\u0215\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\114\004\u01e2\005\u01d6\006\u01ee\007\u01e6" +
    "\010\u01d8\011\u01e4\012\u01dd\013\u01ea\014\u01ef\021\u01d9\022" +
    "\u01e8\023\u01f0\024\u01f6\025\u01f3\026\u01d7\027\u01e1\030\u01f9" +
    "\031\u01d5\032\u01e0\033\u01df\034\u01f2\035\u01f1\036\u01e9\037" +
    "\u01f8\040\u01e7\041\u01ed\042\u01eb\043\u01e3\044\u01e5\045\u01f7" +
    "\046\u01f5\047\u01f4\050\u01ec\051\uffce\052\u01db\053\u01da\054" +
    "\u01dc\001\002\000\004\051\uffe1\001\002\000\004\051\uffda" +
    "\001\002\000\004\051\uffd4\001\002\000\004\051\uffe5\001" +
    "\002\000\004\051\uffd3\001\002\000\004\051\uffd2\001\002" +
    "\000\004\051\uffe4\001\002\000\004\051\uffdd\001\002\000" +
    "\004\051\uffdc\001\002\000\004\051\uffe6\001\002\000\004" +
    "\051\uffe9\001\002\000\004\051\uffef\001\002\000\004\051" +
    "\uffd8\001\002\000\004\051\uffd1\001\002\000\004\051\uffd7" +
    "\001\002\000\004\051\uffea\001\002\000\004\051\uffdb\001" +
    "\002\000\004\051\uffe7\001\002\000\004\051\uffd9\001\002" +
    "\000\004\051\uffee\001\002\000\004\051\uffd5\001\002\000" +
    "\004\051\uffec\001\002\000\004\051\uffd6\001\002\000\004" +
    "\051\ufff1\001\002\000\004\051\uffe2\001\002\000\004\051" +
    "\uffdf\001\002\000\004\051\uffde\001\002\000\036\004\ufff4" +
    "\007\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\044\ufff4\046\ufff4\047\ufff4\051\ufff4" +
    "\001\002\000\004\051\uffeb\001\002\000\004\051\ufff2\001" +
    "\002\000\004\051\uffd0\001\002\000\004\051\uffcf\001\002" +
    "\000\004\051\uffe8\001\002\000\004\051\uffed\001\002\000" +
    "\004\051\uffe3\001\002\000\004\051\ufff0\001\002\000\004" +
    "\051\uffe0\001\002\000\004\002\uffff\001\002\000\030\004" +
    "\ufff6\007\ufff6\015\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\044\ufff6\046\ufff6\047\ufff6\001\002\000\030\004" +
    "\ufff7\007\ufff7\015\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\044\ufff7\046\ufff7\047\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021f\000\012\002\010\005\007\010\003\011\004\001" +
    "\001\000\010\005\u0220\010\003\011\004\001\001\000\010" +
    "\005\u021f\010\003\011\004\001\001\000\002\001\001\000" +
    "\004\006\u01dd\001\001\000\006\003\131\004\132\001\001" +
    "\000\002\001\001\000\010\005\127\010\003\011\004\001" +
    "\001\000\004\007\040\001\001\000\004\007\126\001\001" +
    "\000\004\007\125\001\001\000\004\007\124\001\001\000" +
    "\004\007\123\001\001\000\004\007\122\001\001\000\004" +
    "\007\121\001\001\000\004\007\120\001\001\000\004\007" +
    "\117\001\001\000\004\007\116\001\001\000\004\007\115" +
    "\001\001\000\004\007\114\001\001\000\004\007\113\001" +
    "\001\000\004\007\112\001\001\000\004\007\111\001\001" +
    "\000\004\007\110\001\001\000\004\007\107\001\001\000" +
    "\004\007\106\001\001\000\004\007\105\001\001\000\004" +
    "\007\104\001\001\000\004\007\103\001\001\000\004\007" +
    "\102\001\001\000\002\001\001\000\004\007\100\001\001" +
    "\000\004\007\077\001\001\000\004\007\076\001\001\000" +
    "\004\007\075\001\001\000\004\007\074\001\001\000\004" +
    "\007\073\001\001\000\004\007\072\001\001\000\004\007" +
    "\071\001\001\000\004\007\070\001\001\000\004\007\067" +
    "\001\001\000\004\007\066\001\001\000\004\007\065\001" +
    "\001\000\004\007\064\001\001\000\004\007\063\001\001" +
    "\000\004\007\062\001\001\000\004\007\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\173\004\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\143\001\001\000\002\001" +
    "\001\000\004\032\145\001\001\000\002\001\001\000\004" +
    "\033\150\001\001\000\004\033\153\001\001\000\002\001" +
    "\001\000\004\032\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\160\001\001\000\002\001\001" +
    "\000\004\012\162\001\001\000\002\001\001\000\004\033" +
    "\164\001\001\000\002\001\001\000\004\032\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\240\014\244\001\001\000\004\014\u01d3\001" +
    "\001\000\004\014\u01d2\001\001\000\004\014\u01d1\001\001" +
    "\000\004\014\u01d0\001\001\000\004\014\u01cf\001\001\000" +
    "\004\014\u01ce\001\001\000\004\014\u01cd\001\001\000\004" +
    "\014\u01cc\001\001\000\004\014\u01cb\001\001\000\004\014" +
    "\u01ca\001\001\000\004\014\u01c9\001\001\000\004\014\u01c8" +
    "\001\001\000\004\014\u01c7\001\001\000\004\014\u01c6\001" +
    "\001\000\004\014\u01c5\001\001\000\004\014\u01c4\001\001" +
    "\000\004\014\u01c3\001\001\000\004\014\u01c2\001\001\000" +
    "\004\014\u01c1\001\001\000\004\014\u01c0\001\001\000\004" +
    "\014\u01bf\001\001\000\004\014\u01be\001\001\000\004\014" +
    "\u01bd\001\001\000\004\014\u01bc\001\001\000\004\014\u01bb" +
    "\001\001\000\004\014\u01ba\001\001\000\004\014\u01b9\001" +
    "\001\000\004\014\u01b8\001\001\000\004\014\u01b7\001\001" +
    "\000\004\014\u01b6\001\001\000\004\014\u01b5\001\001\000" +
    "\004\014\u01b4\001\001\000\004\014\u01b3\001\001\000\004" +
    "\014\u01b2\001\001\000\004\014\u01b1\001\001\000\002\001" +
    "\001\000\004\014\253\001\001\000\004\014\252\001\001" +
    "\000\004\014\251\001\001\000\002\001\001\000\004\014" +
    "\250\001\001\000\004\014\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\255\010\003\011\004\001\001" +
    "\000\006\015\260\016\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\266\036\263\001\001\000\006\017\u0131\036\263\001" +
    "\001\000\006\017\u0130\036\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\u0125\036\263\001\001\000" +
    "\006\017\u0118\036\263\001\001\000\006\017\u0117\036\263" +
    "\001\001\000\006\017\u0116\036\263\001\001\000\004\035" +
    "\343\001\001\000\006\017\310\036\263\001\001\000\002" +
    "\001\001\000\006\017\277\036\263\001\001\000\002\001" +
    "\001\000\006\017\307\036\263\001\001\000\006\017\306" +
    "\036\263\001\001\000\006\017\305\036\263\001\001\000" +
    "\006\017\304\036\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\312\036\263\001\001\000\002\001\001" +
    "\000\004\035\u0115\001\001\000\004\035\u0114\001\001\000" +
    "\004\035\u0113\001\001\000\004\035\u0112\001\001\000\004" +
    "\035\u0111\001\001\000\004\035\u0110\001\001\000\004\035" +
    "\u010f\001\001\000\004\035\u010e\001\001\000\004\035\u010d" +
    "\001\001\000\004\035\u010c\001\001\000\004\035\u010b\001" +
    "\001\000\004\035\u010a\001\001\000\004\035\u0109\001\001" +
    "\000\004\035\u0108\001\001\000\004\035\u0107\001\001\000" +
    "\004\035\u0106\001\001\000\004\035\u0105\001\001\000\004" +
    "\035\u0104\001\001\000\004\035\u0103\001\001\000\004\035" +
    "\u0102\001\001\000\004\035\u0101\001\001\000\004\035\u0100" +
    "\001\001\000\004\035\377\001\001\000\004\035\376\001" +
    "\001\000\002\001\001\000\004\035\373\001\001\000\004" +
    "\035\372\001\001\000\004\035\371\001\001\000\004\035" +
    "\370\001\001\000\004\035\367\001\001\000\004\035\366" +
    "\001\001\000\004\035\365\001\001\000\004\035\364\001" +
    "\001\000\004\035\363\001\001\000\004\035\362\001\001" +
    "\000\004\035\361\001\001\000\004\035\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\375\036" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u011e\036\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\u0122\036" +
    "\263\001\001\000\002\001\001\000\006\017\u0124\036\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u0127\001\001\000\010\010\u0128\011\u0129\034\u012a\001\001" +
    "\000\010\010\u0128\011\u0129\034\u012f\001\001\000\010\010" +
    "\u0128\011\u0129\034\u012e\001\001\000\004\016\u012d\001\001" +
    "\000\010\010\u0128\011\u0129\034\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u0133\010" +
    "\003\011\004\001\001\000\004\020\u0135\001\001\000\004" +
    "\022\u01a3\001\001\000\002\001\001\000\004\023\u0138\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u013b\001\001\000\002\001\001\000\010\005" +
    "\u013d\010\003\011\004\001\001\000\004\020\u013e\001\001" +
    "\000\002\001\001\000\004\023\u0140\001\001\000\002\001" +
    "\001\000\010\005\u0142\010\003\011\004\001\001\000\010" +
    "\021\u0144\024\u0143\036\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u0147\036\u0148" +
    "\001\001\000\004\027\u014e\001\001\000\004\026\u0149\001" +
    "\001\000\006\025\u014c\036\u0148\001\001\000\004\036\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\u016a\031\u0153\001\001\000\002\001\001\000\004\032\u0150" +
    "\001\001\000\006\024\u0151\036\u0145\001\001\000\002\001" +
    "\001\000\004\031\u01a0\001\001\000\002\001\001\000\004" +
    "\031\u019f\001\001\000\004\031\u019e\001\001\000\004\031" +
    "\u019d\001\001\000\004\031\u019c\001\001\000\004\031\u019b" +
    "\001\001\000\004\031\u019a\001\001\000\004\031\u0199\001" +
    "\001\000\004\031\u0198\001\001\000\004\031\u0197\001\001" +
    "\000\004\031\u0196\001\001\000\004\031\u0195\001\001\000" +
    "\004\031\u0194\001\001\000\004\031\u0193\001\001\000\004" +
    "\031\u0192\001\001\000\004\031\u0191\001\001\000\004\031" +
    "\u0190\001\001\000\004\031\u018f\001\001\000\004\031\u018e" +
    "\001\001\000\004\031\u018d\001\001\000\004\031\u018c\001" +
    "\001\000\004\031\u018b\001\001\000\004\031\u018a\001\001" +
    "\000\002\001\001\000\004\031\u0188\001\001\000\004\031" +
    "\u0187\001\001\000\004\031\u0186\001\001\000\004\031\u0185" +
    "\001\001\000\004\031\u0184\001\001\000\004\031\u0183\001" +
    "\001\000\004\031\u0182\001\001\000\004\031\u0181\001\001" +
    "\000\004\031\u0180\001\001\000\004\031\u017f\001\001\000" +
    "\004\031\u017e\001\001\000\004\031\u017d\001\001\000\004" +
    "\031\u017c\001\001\000\004\031\u017b\001\001\000\004\031" +
    "\u017a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\u01a5\010\003\011\004\001\001\000" +
    "\004\020\u01a6\001\001\000\002\001\001\000\004\022\u01a8" +
    "\001\001\000\002\001\001\000\004\022\u01aa\001\001\000" +
    "\002\001\001\000\006\017\u01ac\036\263\001\001\000\002" +
    "\001\001\000\004\037\u01ae\001\001\000\010\010\u0128\011" +
    "\u0129\034\u01af\001\001\000\004\016\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u021d\001\001\000\004\006\u021c\001\001\000\004" +
    "\006\u021b\001\001\000\004\006\u021a\001\001\000\004\006" +
    "\u0219\001\001\000\004\006\u0218\001\001\000\004\006\u0217" +
    "\001\001\000\004\006\u0216\001\001\000\004\006\u0215\001" +
    "\001\000\002\001\001\000\004\006\u0213\001\001\000\004" +
    "\006\u0212\001\001\000\004\006\u0211\001\001\000\004\006" +
    "\u0210\001\001\000\004\006\u020f\001\001\000\004\006\u020e" +
    "\001\001\000\004\006\u020d\001\001\000\004\006\u020c\001" +
    "\001\000\004\006\u020b\001\001\000\004\006\u020a\001\001" +
    "\000\004\006\u0209\001\001\000\004\006\u0208\001\001\000" +
    "\004\006\u0207\001\001\000\004\006\u0206\001\001\000\004" +
    "\006\u0205\001\001\000\004\006\u0204\001\001\000\004\006" +
    "\u0203\001\001\000\004\006\u0202\001\001\000\004\006\u0201" +
    "\001\001\000\004\006\u0200\001\001\000\004\006\u01ff\001" +
    "\001\000\004\006\u01fe\001\001\000\004\006\u01fd\001\001" +
    "\000\004\006\u01fc\001\001\000\004\006\u01fb\001\001\000" +
    "\004\006\u01fa\001\001\000\004\006\u01f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<ExpresionRegular> listaExpReg = new ArrayList<>();
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    ManejadorNodos manejadorNodos = new ManejadorNodos();
    ArrayList<Arbol> listaArboles = new ArrayList<>();
    ArrayList<ExpresionRegular> listaExpReg = new ArrayList<>();
    Arbol arbol;
    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // lo_quesea_semantica ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // lo_quesea_semantica ::= SALTO_LINEA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // lo_quesea_semantica ::= COMENTARIO_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // lo_quesea_semantica ::= COMENTARIO_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // lo_quesea_semantica ::= COMENTARIO_SIMPLE lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // lo_quesea_semantica ::= COMA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // lo_quesea_semantica ::= NO_TERMINAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // lo_quesea_semantica ::= TERMINAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // lo_quesea_semantica ::= LINEA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // lo_quesea_semantica ::= IGNORAR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // lo_quesea_semantica ::= IGUAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // lo_quesea_semantica ::= COMILLAS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // lo_quesea_semantica ::= ESPACIO_BLANCO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // lo_quesea_semantica ::= TAB_RESERV lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // lo_quesea_semantica ::= SALTO_RESERV lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // lo_quesea_semantica ::= GUION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // lo_quesea_semantica ::= PARENTESIS_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // lo_quesea_semantica ::= PARENTESIS_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // lo_quesea_semantica ::= CORCHETE_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // lo_quesea_semantica ::= CORCHETE_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // lo_quesea_semantica ::= BETA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // lo_quesea_semantica ::= MAS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // lo_quesea_semantica ::= ASTERISCO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // lo_quesea_semantica ::= INTERROGACION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // lo_quesea_semantica ::= EXTENSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // lo_quesea_semantica ::= LANZAMIENTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // lo_quesea_semantica ::= AUTOR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // lo_quesea_semantica ::= VERSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // lo_quesea_semantica ::= NOMBRE lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // lo_quesea_semantica ::= PUNTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // lo_quesea_semantica ::= PUNTO_COMA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // lo_quesea_semantica ::= DOS_PUNTOS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // lo_quesea_semantica ::= NUM_VERSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // lo_quesea_semantica ::= DOBLE_PUNTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // lo_quesea_semantica ::= LETRA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // lo_quesea_semantica ::= NUM_VER lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // lo_quesea_semantica ::= NUMERO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // lo_quesea_semantica ::= IDENTIFICADOR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // lo_quesea_semantica ::= CUALQUIER_SIM lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // reglas_semanticas ::= lo_quesea_semantica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("reglas_semanticas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // estructura_semantica ::= LLAVES_A reglas_semanticas LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_semantica",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // valor ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // valor ::= DOS_PUNTOS ids 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ids ::= LETRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ids ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // estructura_produccion ::= ids valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_produccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // estructura_produccion ::= ids valor estructura_produccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_produccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // estructura_gramatica ::= ids DOBLE_PUNTO estructura_produccion estructura_semantica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_gramatica",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // estructura_gramatica ::= ids DOBLE_PUNTO estructura_produccion estructura_semantica PUNTO_COMA saltos1 estructura_gramatica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_gramatica",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // bloque_gramatica ::= estructura_gramatica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_gramatica",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // letras_may ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // letras_may ::= LETRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // letras_may ::= LETRA COMA letras_may 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // letras_may ::= IDENTIFICADOR COMA letras_may 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // letras_min ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // letras_min ::= LETRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // letras_min ::= LETRA COMA letras_min 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // letras_min ::= IDENTIFICADOR COMA letras_min 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bloque_simbolos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // bloque_simbolos ::= NO_TERMINAL letras_may PUNTO_COMA saltos bloque_simbolos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // bloque_simbolos ::= TERMINAL letras_min PUNTO_COMA saltos bloque_simbolos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // lo_que_sea_exp ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // lo_que_sea_exp ::= LLAVES_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // lo_que_sea_exp ::= LLAVES_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // lo_que_sea_exp ::= SALTO_LINEA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // lo_que_sea_exp ::= COMA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // lo_que_sea_exp ::= NO_TERMINAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // lo_que_sea_exp ::= TERMINAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // lo_que_sea_exp ::= LINEA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // lo_que_sea_exp ::= IGNORAR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // lo_que_sea_exp ::= IGUAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // lo_que_sea_exp ::= ESPACIO_BLANCO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // lo_que_sea_exp ::= TAB_RESERV lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // lo_que_sea_exp ::= SALTO_RESERV lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // lo_que_sea_exp ::= GUION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // lo_que_sea_exp ::= PARENTESIS_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // lo_que_sea_exp ::= PARENTESIS_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // lo_que_sea_exp ::= CORCHETE_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // lo_que_sea_exp ::= CORCHETE_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // lo_que_sea_exp ::= BETA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // lo_que_sea_exp ::= MAS lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // lo_que_sea_exp ::= ASTERISCO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // lo_que_sea_exp ::= INTERROGACION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // lo_que_sea_exp ::= EXTENSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // lo_que_sea_exp ::= LANZAMIENTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // lo_que_sea_exp ::= AUTOR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // lo_que_sea_exp ::= VERSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // lo_que_sea_exp ::= NOMBRE lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // lo_que_sea_exp ::= PUNTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // lo_que_sea_exp ::= PUNTO_COMA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // lo_que_sea_exp ::= DOS_PUNTOS lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // lo_que_sea_exp ::= NUM_VERSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // lo_que_sea_exp ::= DOBLE_PUNTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // lo_que_sea_exp ::= LETRA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // lo_que_sea_exp ::= NUM_VER lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // lo_que_sea_exp ::= NUMERO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lo_que_sea_exp ::= IDENTIFICADOR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // lo_que_sea_exp ::= CUALQUIER_SIM lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // exp_regular ::= 
            {
              Object RESULT =null;
		 Nodo node = new Nodo(6,"#",false); RESULT = null; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // exp_regular ::= PUNTO exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre(new Nodo(5,(String) a,false), (Nodo)b,1,".",false); RESULT = (Nodo) node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // exp_regular ::= ids exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Nodo node1 = manejadorNodos.generarNodosTexto((String) a);
                    Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b)); 
                    RESULT = (Nodo) node2;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // exp_regular ::= CUALQUIER_SIM exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre(new Nodo(5,(String) a,false), (Nodo)b,1,".",false); RESULT = (Nodo) node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // exp_regular ::= COMILLAS lo_que_sea_exp COMILLAS exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Nodo node1 = manejadorNodos.generarNodosTexto((String) a);
                    Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b)); 
                    RESULT = (Nodo) node2;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // exp_regular ::= ESPACIO_BLANCO exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre(new Nodo(5,(String) a,false), (Nodo)b,1,".",false); RESULT = (Nodo) node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // exp_regular ::= TAB_RESERV exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre(new Nodo(5,(String) a,false), (Nodo)b,1,".",false); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // exp_regular ::= SALTO_RESERV exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre(new Nodo(5,(String) a,false), (Nodo)b,1,".",false); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // exp_regular ::= exp_regular LINEA exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,4,"|",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b)); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // exp_regular ::= exp_regular MAS exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(3,"+",true); node1.setIzquierdaNodo((Nodo)b);
                                //System.out.println("nodoa: "+(String)a+"     Nodob: "+(String)b);
                                Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b));
                                RESULT = (Nodo) node2;
                 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // exp_regular ::= exp_regular ASTERISCO exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, null,2,"*",true); 
                                Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b));
                                RESULT = (Nodo) node2;
                 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // exp_regular ::= exp_regular INTERROGACION exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, new Nodo(8,"",true),4,"|",true); 
                                Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b));
                                RESULT = (Nodo) node2;
                 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // exp_regular ::= CORCHETE_A LETRA GUION LETRA CORCHETE_C exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                        if(manejadorNodos.isMenor((String)a, (String)b)){
                            Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false);
                            nodo1.generarListaCaracteres((String)a, (String)b);
                            Nodo nodo2 = manejadorNodos.generarPadre(nodo1, (Nodo)c,1,".",false); RESULT = (Nodo) nodo2;
                           /* if(c == null){
                                RESULT = (Nodo) nodo1;
                            }else{
                                RESULT = (Nodo) nodo2;
                            }*/
                        }else{

                        }
                    }else{
                        
                    }

                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // exp_regular ::= CORCHETE_A NUMERO GUION NUMERO CORCHETE_C exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                        if(manejadorNodos.isMenor((String)a, (String)b)){
                            Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false);
                            nodo1.generarListaCaracteres((String)a, (String)b);
                            Nodo nodo2 = manejadorNodos.generarPadre(nodo1, (Nodo)c,1,".",false); RESULT = (Nodo) nodo2;
                            /*if(c == null){
                                RESULT = (Nodo) nodo1;
                            }else{
                                RESULT = (Nodo) nodo2;
                            }*/
                        }else{

                        }
                    }else{
                        
                    }

                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // exp_regular ::= CORCHETE_A exp_regular CORCHETE_C exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b)); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // exp_regular ::= PARENTESIS_A exp_regular PARENTESIS_C exp_regular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b)); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // estructura_exp_regular ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // estructura_exp_regular ::= IGNORAR IGUAL exp_regular PUNTO_COMA NT$1 salto_simple estructura_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 ExpresionRegular exp = new ExpresionRegular(new Arbol((Nodo)b),(String)a); listaExpReg.add(exp);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // estructura_exp_regular ::= IDENTIFICADOR IGUAL exp_regular PUNTO_COMA NT$0 salto_simple estructura_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 ExpresionRegular exp = new ExpresionRegular(new Arbol((Nodo)b),(String)a); listaExpReg.add(exp);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // bloque_exp_regular ::= estructura_exp_regular 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_exp_regular",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lo_que_sea_bloque_code ::= 
            {
              Object RESULT =null;
		RESULT = (String)"";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lo_que_sea_bloque_code ::= SALTO_LINEA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lo_que_sea_bloque_code ::= COMENTARIO_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lo_que_sea_bloque_code ::= COMENTARIO_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lo_que_sea_bloque_code ::= COMENTARIO_SIMPLE lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lo_que_sea_bloque_code ::= LLAVES_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lo_que_sea_bloque_code ::= LLAVES_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lo_que_sea_bloque_code ::= COMA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lo_que_sea_bloque_code ::= NO_TERMINAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lo_que_sea_bloque_code ::= TERMINAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lo_que_sea_bloque_code ::= LINEA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lo_que_sea_bloque_code ::= IGNORAR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lo_que_sea_bloque_code ::= IGUAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lo_que_sea_bloque_code ::= COMILLAS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lo_que_sea_bloque_code ::= ESPACIO_BLANCO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lo_que_sea_bloque_code ::= TAB_RESERV lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lo_que_sea_bloque_code ::= SALTO_RESERV lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lo_que_sea_bloque_code ::= GUION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lo_que_sea_bloque_code ::= PARENTESIS_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lo_que_sea_bloque_code ::= PARENTESIS_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lo_que_sea_bloque_code ::= CORCHETE_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lo_que_sea_bloque_code ::= CORCHETE_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lo_que_sea_bloque_code ::= BETA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lo_que_sea_bloque_code ::= MAS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lo_que_sea_bloque_code ::= ASTERISCO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lo_que_sea_bloque_code ::= INTERROGACION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lo_que_sea_bloque_code ::= EXTENSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lo_que_sea_bloque_code ::= LANZAMIENTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lo_que_sea_bloque_code ::= AUTOR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lo_que_sea_bloque_code ::= VERSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lo_que_sea_bloque_code ::= NOMBRE lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lo_que_sea_bloque_code ::= PUNTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lo_que_sea_bloque_code ::= PUNTO_COMA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lo_que_sea_bloque_code ::= DOS_PUNTOS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lo_que_sea_bloque_code ::= NUM_VERSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lo_que_sea_bloque_code ::= DOBLE_PUNTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lo_que_sea_bloque_code ::= LETRA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lo_que_sea_bloque_code ::= NUM_VER lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lo_que_sea_bloque_code ::= NUMERO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lo_que_sea_bloque_code ::= IDENTIFICADOR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lo_que_sea_bloque_code ::= CUALQUIER_SIM lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bloque_code ::= lo_que_sea_bloque_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_code",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cadena_identificadores ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena_identificadores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cadena_identificadores ::= IDENTIFICADOR cadena_identificadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena_identificadores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // datos_info ::= EXTENSION DOS_PUNTOS IDENTIFICADOR PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // datos_info ::= LANZAMIENTO DOS_PUNTOS NUMERO PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // datos_info ::= AUTOR DOS_PUNTOS cadena_identificadores PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // datos_info ::= VERSION DOS_PUNTOS num_version PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // datos_info ::= NOMBRE DOS_PUNTOS cadena_identificadores PUNTO_COMA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // num_version ::= NUMERO PUNTO num_version 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("num_version",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // num_version ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("num_version",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bloque_inf ::= datos_info 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bloque_inf ::= datos_info bloque_inf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lo_que_sea_v ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lo_que_sea_v ::= LLAVES_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lo_que_sea_v ::= LLAVES_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lo_que_sea_v ::= SALTO_LINEA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lo_que_sea_v ::= COMA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lo_que_sea_v ::= NO_TERMINAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lo_que_sea_v ::= TERMINAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lo_que_sea_v ::= LINEA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lo_que_sea_v ::= IGNORAR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lo_que_sea_v ::= IGUAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lo_que_sea_v ::= COMILLAS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lo_que_sea_v ::= ESPACIO_BLANCO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lo_que_sea_v ::= TAB_RESERV lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lo_que_sea_v ::= SALTO_RESERV lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lo_que_sea_v ::= GUION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lo_que_sea_v ::= PARENTESIS_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lo_que_sea_v ::= PARENTESIS_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lo_que_sea_v ::= CORCHETE_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lo_que_sea_v ::= CORCHETE_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lo_que_sea_v ::= BETA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lo_que_sea_v ::= MAS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lo_que_sea_v ::= ASTERISCO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lo_que_sea_v ::= INTERROGACION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lo_que_sea_v ::= EXTENSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lo_que_sea_v ::= LANZAMIENTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lo_que_sea_v ::= AUTOR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lo_que_sea_v ::= VERSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lo_que_sea_v ::= NOMBRE lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lo_que_sea_v ::= PUNTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lo_que_sea_v ::= PUNTO_COMA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lo_que_sea_v ::= DOS_PUNTOS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lo_que_sea_v ::= NUM_VERSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lo_que_sea_v ::= DOBLE_PUNTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lo_que_sea_v ::= LETRA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lo_que_sea_v ::= NUM_VER lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lo_que_sea_v ::= NUMERO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lo_que_sea_v ::= IDENTIFICADOR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lo_que_sea_v ::= CUALQUIER_SIM lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lo_que_sea_1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lo_que_sea_1 ::= LLAVES_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lo_que_sea_1 ::= LLAVES_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lo_que_sea_1 ::= COMA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lo_que_sea_1 ::= NO_TERMINAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lo_que_sea_1 ::= TERMINAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lo_que_sea_1 ::= LINEA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lo_que_sea_1 ::= IGNORAR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lo_que_sea_1 ::= IGUAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lo_que_sea_1 ::= COMILLAS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lo_que_sea_1 ::= ESPACIO_BLANCO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lo_que_sea_1 ::= TAB_RESERV lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lo_que_sea_1 ::= SALTO_RESERV lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lo_que_sea_1 ::= GUION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lo_que_sea_1 ::= PARENTESIS_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lo_que_sea_1 ::= PARENTESIS_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lo_que_sea_1 ::= CORCHETE_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lo_que_sea_1 ::= CORCHETE_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lo_que_sea_1 ::= BETA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lo_que_sea_1 ::= MAS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lo_que_sea_1 ::= ASTERISCO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lo_que_sea_1 ::= INTERROGACION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lo_que_sea_1 ::= EXTENSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lo_que_sea_1 ::= LANZAMIENTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lo_que_sea_1 ::= AUTOR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lo_que_sea_1 ::= VERSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lo_que_sea_1 ::= NOMBRE lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lo_que_sea_1 ::= PUNTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lo_que_sea_1 ::= PUNTO_COMA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lo_que_sea_1 ::= DOS_PUNTOS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lo_que_sea_1 ::= NUM_VERSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lo_que_sea_1 ::= DOBLE_PUNTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lo_que_sea_1 ::= LETRA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lo_que_sea_1 ::= NUM_VER lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lo_que_sea_1 ::= NUMERO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lo_que_sea_1 ::= IDENTIFICADOR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lo_que_sea_1 ::= CUALQUIER_SIM lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comentario_varias_lineas ::= COMENTARIO_A lo_que_sea_v COMENTARIO_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comentario_varias_lineas",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comentario_linea ::= COMENTARIO_SIMPLE lo_que_sea_1 SALTO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comentario_linea",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saltos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // saltos ::= comentario_varias_lineas saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // saltos ::= comentario_linea saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // saltos ::= SALTO_LINEA saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // salto_simple ::= SALTO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // salto_simple ::= comentario_varias_lineas salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // salto_simple ::= comentario_linea salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // salto_simple ::= SALTO_LINEA salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // saltos1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // saltos1 ::= SALTO_LINEA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= saltos bloque_inf SEPARACION bloque_code SEPARACION saltos bloque_exp_regular SEPARACION saltos bloque_simbolos SEPARACION saltos bloque_gramatica 
            {
              Object RESULT =null;
		parser.listaExpReg = listaExpReg; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

