
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 31 17:41:17 CST 2020
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import objetos.*;
import java.util.ArrayList;
import analisis.comprobaciones.*;
import lalr.*;
import error.Error;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 31 17:41:17 CST 2020
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\002\002\004\000\002\045\002\000\002\046" +
    "\002\000\002\047\002\000\002\050\002\000\002\002\023" +
    "\000\002\032\004\000\002\032\002\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\002\000\002\010\005\000\002\011\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\002\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\003" +
    "\004\000\002\003\003\000\002\051\002\000\002\003\005" +
    "\000\002\012\003\000\002\012\005\000\002\052\002\000" +
    "\002\004\010\000\002\053\002\000\002\004\010\000\002" +
    "\054\002\000\002\004\010\000\002\055\002\000\002\004" +
    "\010\000\002\056\002\000\002\004\010\000\002\033\004" +
    "\000\002\033\002\000\002\013\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\002\000\002\015\003\000\002\057\002\000\002" +
    "\015\005\000\002\060\002\000\002\061\002\000\002\016" +
    "\012\000\002\062\002\000\002\016\011\000\002\016\002" +
    "\000\002\044\003\000\002\044\003\000\002\017\003\000" +
    "\002\037\003\000\002\037\002\000\002\041\007\000\002" +
    "\041\007\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\040\010\000\002\040\010\000" +
    "\002\040\006\000\002\040\006\000\002\040\006\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\002\000\002\063\002" +
    "\000\002\020\010\000\002\064\002\000\002\020\010\000" +
    "\002\020\002\000\002\065\002\000\002\020\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\021\003\000\002\066\002\000" +
    "\002\021\005\000\002\042\003\000\002\042\002\000\002" +
    "\067\002\000\002\070\002\000\002\024\013\000\002\043" +
    "\003\000\002\043\002\000\002\071\002\000\002\025\006" +
    "\000\002\025\004\000\002\036\003\000\002\036\003\000" +
    "\002\026\004\000\002\026\002\000\002\027\005\000\002" +
    "\027\002\000\002\030\003\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u023a\000\024\003\ufff2\016\006\017\011\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\051\012\001\002\000\040" +
    "\003\ufff2\004\ufff2\007\ufff2\015\ufff2\016\006\017\011\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\044\ufff2\046\ufff2" +
    "\047\ufff2\051\012\001\002\000\040\003\ufff2\004\ufff2\007" +
    "\ufff2\015\ufff2\016\006\017\011\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\044\ufff2\046\ufff2\047\ufff2\051\012\001" +
    "\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010\u01f4" +
    "\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204\023" +
    "\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031\u01f1" +
    "\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214\040" +
    "\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046\u0211" +
    "\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8\001" +
    "\002\000\016\003\000\021\000\022\000\023\000\024\000" +
    "\025\000\001\002\000\004\002\130\001\002\000\116\004" +
    "\030\005\015\006\045\007\034\010\017\011\032\012\024" +
    "\013\040\014\046\020\uffa5\021\020\022\036\023\047\024" +
    "\056\025\052\026\016\027\027\030\061\031\014\032\026" +
    "\033\025\034\051\035\050\036\037\037\060\040\035\041" +
    "\044\042\042\043\031\044\033\045\057\046\055\047\054" +
    "\050\043\051\053\052\022\053\021\054\023\001\002\000" +
    "\040\003\ufff2\004\ufff2\007\ufff2\015\ufff2\016\006\017\011" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\044\ufff2\046" +
    "\ufff2\047\ufff2\051\012\001\002\000\032\003\ufff5\004\ufff5" +
    "\007\ufff5\015\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\044\ufff5\046\ufff5\047\ufff5\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa5\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\116" +
    "\004\030\005\015\006\045\007\034\010\017\011\032\012" +
    "\024\013\040\014\046\020\uffa5\021\020\022\036\023\047" +
    "\024\056\025\052\026\016\027\027\030\061\031\014\032" +
    "\026\033\025\034\051\035\050\036\037\037\060\040\035" +
    "\041\044\042\042\043\031\044\033\045\057\046\055\047" +
    "\054\050\043\051\053\052\022\053\021\054\023\001\002" +
    "\000\116\004\030\005\015\006\045\007\034\010\017\011" +
    "\032\012\024\013\040\014\046\020\uffa5\021\020\022\036" +
    "\023\047\024\056\025\052\026\016\027\027\030\061\031" +
    "\014\032\026\033\025\034\051\035\050\036\037\037\060" +
    "\040\035\041\044\042\042\043\031\044\033\045\057\046" +
    "\055\047\054\050\043\051\053\052\022\053\021\054\023" +
    "\001\002\000\116\004\030\005\015\006\045\007\034\010" +
    "\017\011\032\012\024\013\040\014\046\020\uffa5\021\020" +
    "\022\036\023\047\024\056\025\052\026\016\027\027\030" +
    "\061\031\014\032\026\033\025\034\051\035\050\036\037" +
    "\037\060\040\035\041\044\042\042\043\031\044\033\045" +
    "\057\046\055\047\054\050\043\051\053\052\022\053\021" +
    "\054\023\001\002\000\116\004\030\005\015\006\045\007" +
    "\034\010\017\011\032\012\024\013\040\014\046\020\uffa5" +
    "\021\020\022\036\023\047\024\056\025\052\026\016\027" +
    "\027\030\061\031\014\032\026\033\025\034\051\035\050" +
    "\036\037\037\060\040\035\041\044\042\042\043\031\044" +
    "\033\045\057\046\055\047\054\050\043\051\053\052\022" +
    "\053\021\054\023\001\002\000\116\004\030\005\015\006" +
    "\045\007\034\010\017\011\032\012\024\013\040\014\046" +
    "\020\uffa5\021\020\022\036\023\047\024\056\025\052\026" +
    "\016\027\027\030\061\031\014\032\026\033\025\034\051" +
    "\035\050\036\037\037\060\040\035\041\044\042\042\043" +
    "\031\044\033\045\057\046\055\047\054\050\043\051\053" +
    "\052\022\053\021\054\023\001\002\000\116\004\030\005" +
    "\015\006\045\007\034\010\017\011\032\012\024\013\040" +
    "\014\046\020\uffa5\021\020\022\036\023\047\024\056\025" +
    "\052\026\016\027\027\030\061\031\014\032\026\033\025" +
    "\034\051\035\050\036\037\037\060\040\035\041\044\042" +
    "\042\043\031\044\033\045\057\046\055\047\054\050\043" +
    "\051\053\052\022\053\021\054\023\001\002\000\116\004" +
    "\030\005\015\006\045\007\034\010\017\011\032\012\024" +
    "\013\040\014\046\020\uffa5\021\020\022\036\023\047\024" +
    "\056\025\052\026\016\027\027\030\061\031\014\032\026" +
    "\033\025\034\051\035\050\036\037\037\060\040\035\041" +
    "\044\042\042\043\031\044\033\045\057\046\055\047\054" +
    "\050\043\051\053\052\022\053\021\054\023\001\002\000" +
    "\116\004\030\005\015\006\045\007\034\010\017\011\032" +
    "\012\024\013\040\014\046\020\uffa5\021\020\022\036\023" +
    "\047\024\056\025\052\026\016\027\027\030\061\031\014" +
    "\032\026\033\025\034\051\035\050\036\037\037\060\040" +
    "\035\041\044\042\042\043\031\044\033\045\057\046\055" +
    "\047\054\050\043\051\053\052\022\053\021\054\023\001" +
    "\002\000\116\004\030\005\015\006\045\007\034\010\017" +
    "\011\032\012\024\013\040\014\046\020\uffa5\021\020\022" +
    "\036\023\047\024\056\025\052\026\016\027\027\030\061" +
    "\031\014\032\026\033\025\034\051\035\050\036\037\037" +
    "\060\040\035\041\044\042\042\043\031\044\033\045\057" +
    "\046\055\047\054\050\043\051\053\052\022\053\021\054" +
    "\023\001\002\000\116\004\030\005\015\006\045\007\034" +
    "\010\017\011\032\012\024\013\040\014\046\020\uffa5\021" +
    "\020\022\036\023\047\024\056\025\052\026\016\027\027" +
    "\030\061\031\014\032\026\033\025\034\051\035\050\036" +
    "\037\037\060\040\035\041\044\042\042\043\031\044\033" +
    "\045\057\046\055\047\054\050\043\051\053\052\022\053" +
    "\021\054\023\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa5\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\116\004\030\005\015" +
    "\006\045\007\034\010\017\011\032\012\024\013\040\014" +
    "\046\020\uffa5\021\020\022\036\023\047\024\056\025\052" +
    "\026\016\027\027\030\061\031\014\032\026\033\025\034" +
    "\051\035\050\036\037\037\060\040\035\041\044\042\042" +
    "\043\031\044\033\045\057\046\055\047\054\050\043\051" +
    "\053\052\022\053\021\054\023\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa5\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\116" +
    "\004\030\005\015\006\045\007\034\010\017\011\032\012" +
    "\024\013\040\014\046\020\uffa5\021\020\022\036\023\047" +
    "\024\056\025\052\026\016\027\027\030\061\031\014\032" +
    "\026\033\025\034\051\035\050\036\037\037\060\040\035" +
    "\041\044\042\042\043\031\044\033\045\057\046\055\047" +
    "\054\050\043\051\053\052\022\053\021\054\023\001\002" +
    "\000\116\004\030\005\015\006\045\007\034\010\017\011" +
    "\032\012\024\013\040\014\046\020\uffa5\021\020\022\036" +
    "\023\047\024\056\025\052\026\016\027\027\030\061\031" +
    "\014\032\026\033\025\034\051\035\050\036\037\037\060" +
    "\040\035\041\044\042\042\043\031\044\033\045\057\046" +
    "\055\047\054\050\043\051\053\052\022\053\021\054\023" +
    "\001\002\000\116\004\030\005\015\006\045\007\034\010" +
    "\017\011\032\012\024\013\040\014\046\020\uffa5\021\020" +
    "\022\036\023\047\024\056\025\052\026\016\027\027\030" +
    "\061\031\014\032\026\033\025\034\051\035\050\036\037" +
    "\037\060\040\035\041\044\042\042\043\031\044\033\045" +
    "\057\046\055\047\054\050\043\051\053\052\022\053\021" +
    "\054\023\001\002\000\116\004\030\005\015\006\045\007" +
    "\034\010\017\011\032\012\024\013\040\014\046\020\uffa5" +
    "\021\020\022\036\023\047\024\056\025\052\026\016\027" +
    "\027\030\061\031\014\032\026\033\025\034\051\035\050" +
    "\036\037\037\060\040\035\041\044\042\042\043\031\044" +
    "\033\045\057\046\055\047\054\050\043\051\053\052\022" +
    "\053\021\054\023\001\002\000\116\004\030\005\015\006" +
    "\045\007\034\010\017\011\032\012\024\013\040\014\046" +
    "\020\uffa5\021\020\022\036\023\047\024\056\025\052\026" +
    "\016\027\027\030\061\031\014\032\026\033\025\034\051" +
    "\035\050\036\037\037\060\040\035\041\044\042\042\043" +
    "\031\044\033\045\057\046\055\047\054\050\043\051\053" +
    "\052\022\053\021\054\023\001\002\000\116\004\030\005" +
    "\015\006\045\007\034\010\017\011\032\012\024\013\040" +
    "\014\046\020\uffa5\021\020\022\036\023\047\024\056\025" +
    "\052\026\016\027\027\030\061\031\014\032\026\033\025" +
    "\034\051\035\050\036\037\037\060\040\035\041\044\042" +
    "\042\043\031\044\033\045\057\046\055\047\054\050\043" +
    "\051\053\052\022\053\021\054\023\001\002\000\116\004" +
    "\030\005\015\006\045\007\034\010\017\011\032\012\024" +
    "\013\040\014\046\020\uffa5\021\020\022\036\023\047\024" +
    "\056\025\052\026\016\027\027\030\061\031\014\032\026" +
    "\033\025\034\051\035\050\036\037\037\060\040\035\041" +
    "\044\042\042\043\031\044\033\045\057\046\055\047\054" +
    "\050\043\051\053\052\022\053\021\054\023\001\002\000" +
    "\004\020\102\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa5\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\116\004\030\005\015" +
    "\006\045\007\034\010\017\011\032\012\024\013\040\014" +
    "\046\020\uffa5\021\020\022\036\023\047\024\056\025\052" +
    "\026\016\027\027\030\061\031\014\032\026\033\025\034" +
    "\051\035\050\036\037\037\060\040\035\041\044\042\042" +
    "\043\031\044\033\045\057\046\055\047\054\050\043\051" +
    "\053\052\022\053\021\054\023\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa5\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\116" +
    "\004\030\005\015\006\045\007\034\010\017\011\032\012" +
    "\024\013\040\014\046\020\uffa5\021\020\022\036\023\047" +
    "\024\056\025\052\026\016\027\027\030\061\031\014\032" +
    "\026\033\025\034\051\035\050\036\037\037\060\040\035" +
    "\041\044\042\042\043\031\044\033\045\057\046\055\047" +
    "\054\050\043\051\053\052\022\053\021\054\023\001\002" +
    "\000\116\004\030\005\015\006\045\007\034\010\017\011" +
    "\032\012\024\013\040\014\046\020\uffa5\021\020\022\036" +
    "\023\047\024\056\025\052\026\016\027\027\030\061\031" +
    "\014\032\026\033\025\034\051\035\050\036\037\037\060" +
    "\040\035\041\044\042\042\043\031\044\033\045\057\046" +
    "\055\047\054\050\043\051\053\052\022\053\021\054\023" +
    "\001\002\000\116\004\030\005\015\006\045\007\034\010" +
    "\017\011\032\012\024\013\040\014\046\020\uffa5\021\020" +
    "\022\036\023\047\024\056\025\052\026\016\027\027\030" +
    "\061\031\014\032\026\033\025\034\051\035\050\036\037" +
    "\037\060\040\035\041\044\042\042\043\031\044\033\045" +
    "\057\046\055\047\054\050\043\051\053\052\022\053\021" +
    "\054\023\001\002\000\116\004\030\005\015\006\045\007" +
    "\034\010\017\011\032\012\024\013\040\014\046\020\uffa5" +
    "\021\020\022\036\023\047\024\056\025\052\026\016\027" +
    "\027\030\061\031\014\032\026\033\025\034\051\035\050" +
    "\036\037\037\060\040\035\041\044\042\042\043\031\044" +
    "\033\045\057\046\055\047\054\050\043\051\053\052\022" +
    "\053\021\054\023\001\002\000\116\004\030\005\015\006" +
    "\045\007\034\010\017\011\032\012\024\013\040\014\046" +
    "\020\uffa5\021\020\022\036\023\047\024\056\025\052\026" +
    "\016\027\027\030\061\031\014\032\026\033\025\034\051" +
    "\035\050\036\037\037\060\040\035\041\044\042\042\043" +
    "\031\044\033\045\057\046\055\047\054\050\043\051\053" +
    "\052\022\053\021\054\023\001\002\000\116\004\030\005" +
    "\015\006\045\007\034\010\017\011\032\012\024\013\040" +
    "\014\046\020\uffa5\021\020\022\036\023\047\024\056\025" +
    "\052\026\016\027\027\030\061\031\014\032\026\033\025" +
    "\034\051\035\050\036\037\037\060\040\035\041\044\042" +
    "\042\043\031\044\033\045\057\046\055\047\054\050\043" +
    "\051\053\052\022\053\021\054\023\001\002\000\116\004" +
    "\030\005\015\006\045\007\034\010\017\011\032\012\024" +
    "\013\040\014\046\020\uffa5\021\020\022\036\023\047\024" +
    "\056\025\052\026\016\027\027\030\061\031\014\032\026" +
    "\033\025\034\051\035\050\036\037\037\060\040\035\041" +
    "\044\042\042\043\031\044\033\045\057\046\055\047\054" +
    "\050\043\051\053\052\022\053\021\054\023\001\002\000" +
    "\116\004\030\005\015\006\045\007\034\010\017\011\032" +
    "\012\024\013\040\014\046\020\uffa5\021\020\022\036\023" +
    "\047\024\056\025\052\026\016\027\027\030\061\031\014" +
    "\032\026\033\025\034\051\035\050\036\037\037\060\040" +
    "\035\041\044\042\042\043\031\044\033\045\057\046\055" +
    "\047\054\050\043\051\053\052\022\053\021\054\023\001" +
    "\002\000\116\004\030\005\015\006\045\007\034\010\017" +
    "\011\032\012\024\013\040\014\046\020\uffa5\021\020\022" +
    "\036\023\047\024\056\025\052\026\016\027\027\030\061" +
    "\031\014\032\026\033\025\034\051\035\050\036\037\037" +
    "\060\040\035\041\044\042\042\043\031\044\033\045\057" +
    "\046\055\047\054\050\043\051\053\052\022\053\021\054" +
    "\023\001\002\000\116\004\030\005\015\006\045\007\034" +
    "\010\017\011\032\012\024\013\040\014\046\020\uffa5\021" +
    "\020\022\036\023\047\024\056\025\052\026\016\027\027" +
    "\030\061\031\014\032\026\033\025\034\051\035\050\036" +
    "\037\037\060\040\035\041\044\042\042\043\031\044\033" +
    "\045\057\046\055\047\054\050\043\051\053\052\022\053" +
    "\021\054\023\001\002\000\116\004\030\005\015\006\045" +
    "\007\034\010\017\011\032\012\024\013\040\014\046\020" +
    "\uffa5\021\020\022\036\023\047\024\056\025\052\026\016" +
    "\027\027\030\061\031\014\032\026\033\025\034\051\035" +
    "\050\036\037\037\060\040\035\041\044\042\042\043\031" +
    "\044\033\045\057\046\055\047\054\050\043\051\053\052" +
    "\022\053\021\054\023\001\002\000\116\004\030\005\015" +
    "\006\045\007\034\010\017\011\032\012\024\013\040\014" +
    "\046\020\uffa5\021\020\022\036\023\047\024\056\025\052" +
    "\026\016\027\027\030\061\031\014\032\026\033\025\034" +
    "\051\035\050\036\037\037\060\040\035\041\044\042\042" +
    "\043\031\044\033\045\057\046\055\047\054\050\043\051" +
    "\053\052\022\053\021\054\023\001\002\000\116\004\030" +
    "\005\015\006\045\007\034\010\017\011\032\012\024\013" +
    "\040\014\046\020\uffa5\021\020\022\036\023\047\024\056" +
    "\025\052\026\016\027\027\030\061\031\014\032\026\033" +
    "\025\034\051\035\050\036\037\037\060\040\035\041\044" +
    "\042\042\043\031\044\033\045\057\046\055\047\054\050" +
    "\043\051\053\052\022\053\021\054\023\001\002\000\004" +
    "\020\uffb9\001\002\000\004\020\uffb2\001\002\000\004\020" +
    "\uffac\001\002\000\004\020\uffbd\001\002\000\004\020\uffab" +
    "\001\002\000\004\020\uffaa\001\002\000\004\020\uffa8\001" +
    "\002\000\004\020\uffbc\001\002\000\004\020\uffb5\001\002" +
    "\000\004\020\uffb4\001\002\000\004\020\uffbe\001\002\000" +
    "\004\020\uffc1\001\002\000\004\020\uffc7\001\002\000\004" +
    "\020\uffb0\001\002\000\004\020\uffa9\001\002\000\004\020" +
    "\uffaf\001\002\000\040\003\ufff0\004\ufff0\007\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\044\ufff0\046\ufff0\047\ufff0\051\ufff0\001\002\000\004" +
    "\020\uffc2\001\002\000\004\020\uffb3\001\002\000\004\020" +
    "\uffbf\001\002\000\004\020\uffb1\001\002\000\004\020\uffc6" +
    "\001\002\000\004\020\uffad\001\002\000\004\020\uffc4\001" +
    "\002\000\004\020\uffae\001\002\000\004\020\uffc9\001\002" +
    "\000\004\020\uffba\001\002\000\004\020\uffb7\001\002\000" +
    "\004\020\uffb6\001\002\000\004\020\uffc3\001\002\000\004" +
    "\020\uffca\001\002\000\004\020\uffa7\001\002\000\004\020" +
    "\uffa6\001\002\000\004\020\uffc0\001\002\000\004\020\uffc5" +
    "\001\002\000\004\020\uffbb\001\002\000\004\020\uffc8\001" +
    "\002\000\004\020\uffb8\001\002\000\004\002\001\001\002" +
    "\000\016\003\134\021\141\022\137\023\136\024\135\025" +
    "\140\001\002\000\004\015\uffff\001\002\000\020\003\134" +
    "\015\uffa3\021\141\022\137\023\136\024\135\025\140\001" +
    "\002\000\016\003\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\001\002\000\004\012\175\001\002\000\004\012" +
    "\170\001\002\000\004\012\160\001\002\000\004\012\153" +
    "\001\002\000\004\012\142\001\002\000\006\004\143\013" +
    "\uff93\001\002\000\006\004\143\013\uff93\001\002\000\004" +
    "\013\145\001\002\000\022\003\uff9e\015\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\051\uff9e\001\002\000\022" +
    "\003\ufffa\015\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\051\150\001\002\000\020\003\uff9d\015\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\001\002\000\030\002" +
    "\ufffa\003\ufffa\004\ufffa\007\ufffa\015\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\051\150\001\002\000\026\002" +
    "\ufffb\003\ufffb\004\ufffb\007\ufffb\015\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\001\002\000\004\013\uff94\001" +
    "\002\000\004\004\154\001\002\000\004\013\155\001\002" +
    "\000\022\003\uff96\015\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\051\uff96\001\002\000\022\003\ufffa\015\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\051\150\001" +
    "\002\000\020\003\uff95\015\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\001\002\000\004\005\161\001\002\000" +
    "\006\013\uffa0\014\166\001\002\000\004\013\163\001\002" +
    "\000\022\003\uff9c\015\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\051\uff9c\001\002\000\022\003\ufffa\015\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\051\150\001" +
    "\002\000\020\003\uff9b\015\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\001\002\000\004\005\161\001\002\000" +
    "\004\013\uff9f\001\002\000\006\004\143\013\uff93\001\002" +
    "\000\004\013\172\001\002\000\022\003\uff9a\015\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\051\uff9a\001\002" +
    "\000\022\003\ufffa\015\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\051\150\001\002\000\020\003\uff99\015\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\001\002\000" +
    "\004\005\176\001\002\000\004\013\177\001\002\000\022" +
    "\003\uff98\015\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\051\uff98\001\002\000\022\003\ufffa\015\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\051\150\001\002\000" +
    "\020\003\uff97\015\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\001\002\000\016\003\134\021\141\022\137\023" +
    "\136\024\135\025\140\001\002\000\004\015\uffa1\001\002" +
    "\000\004\015\uffa4\001\002\000\004\015\206\001\002\000" +
    "\124\004\223\005\210\006\241\007\227\010\212\011\225" +
    "\012\217\013\233\014\243\015\uff69\016\242\017\235\020" +
    "\234\021\213\022\231\023\244\024\254\025\247\026\211" +
    "\027\222\030\260\031\207\032\221\033\220\034\246\035" +
    "\245\036\232\037\257\040\230\041\240\042\236\043\224" +
    "\044\226\045\255\046\253\047\251\050\237\051\250\052" +
    "\215\053\214\054\216\001\002\000\124\004\223\005\210" +
    "\006\241\007\227\010\212\011\225\012\217\013\233\014" +
    "\243\015\uff69\016\242\017\235\020\234\021\213\022\231" +
    "\023\244\024\254\025\247\026\211\027\222\030\260\031" +
    "\207\032\221\033\220\034\246\035\245\036\232\037\257" +
    "\040\230\041\240\042\236\043\224\044\226\045\255\046" +
    "\253\047\251\050\237\051\250\052\215\053\214\054\216" +
    "\001\002\000\124\004\223\005\210\006\241\007\227\010" +
    "\212\011\225\012\217\013\233\014\243\015\uff69\016\242" +
    "\017\235\020\234\021\213\022\231\023\244\024\254\025" +
    "\247\026\211\027\222\030\260\031\207\032\221\033\220" +
    "\034\246\035\245\036\232\037\257\040\230\041\240\042" +
    "\236\043\224\044\226\045\255\046\253\047\251\050\237" +
    "\051\250\052\215\053\214\054\216\001\002\000\124\004" +
    "\223\005\210\006\241\007\227\010\212\011\225\012\217" +
    "\013\233\014\243\015\uff69\016\242\017\235\020\234\021" +
    "\213\022\231\023\244\024\254\025\247\026\211\027\222" +
    "\030\260\031\207\032\221\033\220\034\246\035\245\036" +
    "\232\037\257\040\230\041\240\042\236\043\224\044\226" +
    "\045\255\046\253\047\251\050\237\051\250\052\215\053" +
    "\214\054\216\001\002\000\124\004\223\005\210\006\241" +
    "\007\227\010\212\011\225\012\217\013\233\014\243\015" +
    "\uff69\016\242\017\235\020\234\021\213\022\231\023\244" +
    "\024\254\025\247\026\211\027\222\030\260\031\207\032" +
    "\221\033\220\034\246\035\245\036\232\037\257\040\230" +
    "\041\240\042\236\043\224\044\226\045\255\046\253\047" +
    "\251\050\237\051\250\052\215\053\214\054\216\001\002" +
    "\000\124\004\223\005\210\006\241\007\227\010\212\011" +
    "\225\012\217\013\233\014\243\015\uff69\016\242\017\235" +
    "\020\234\021\213\022\231\023\244\024\254\025\247\026" +
    "\211\027\222\030\260\031\207\032\221\033\220\034\246" +
    "\035\245\036\232\037\257\040\230\041\240\042\236\043" +
    "\224\044\226\045\255\046\253\047\251\050\237\051\250" +
    "\052\215\053\214\054\216\001\002\000\124\004\223\005" +
    "\210\006\241\007\227\010\212\011\225\012\217\013\233" +
    "\014\243\015\uff69\016\242\017\235\020\234\021\213\022" +
    "\231\023\244\024\254\025\247\026\211\027\222\030\260" +
    "\031\207\032\221\033\220\034\246\035\245\036\232\037" +
    "\257\040\230\041\240\042\236\043\224\044\226\045\255" +
    "\046\253\047\251\050\237\051\250\052\215\053\214\054" +
    "\216\001\002\000\124\004\223\005\210\006\241\007\227" +
    "\010\212\011\225\012\217\013\233\014\243\015\uff69\016" +
    "\242\017\235\020\234\021\213\022\231\023\244\024\254" +
    "\025\247\026\211\027\222\030\260\031\207\032\221\033" +
    "\220\034\246\035\245\036\232\037\257\040\230\041\240" +
    "\042\236\043\224\044\226\045\255\046\253\047\251\050" +
    "\237\051\250\052\215\053\214\054\216\001\002\000\124" +
    "\004\223\005\210\006\241\007\227\010\212\011\225\012" +
    "\217\013\233\014\243\015\uff69\016\242\017\235\020\234" +
    "\021\213\022\231\023\244\024\254\025\247\026\211\027" +
    "\222\030\260\031\207\032\221\033\220\034\246\035\245" +
    "\036\232\037\257\040\230\041\240\042\236\043\224\044" +
    "\226\045\255\046\253\047\251\050\237\051\250\052\215" +
    "\053\214\054\216\001\002\000\124\004\223\005\210\006" +
    "\241\007\227\010\212\011\225\012\217\013\233\014\243" +
    "\015\uff69\016\242\017\235\020\234\021\213\022\231\023" +
    "\244\024\254\025\247\026\211\027\222\030\260\031\207" +
    "\032\221\033\220\034\246\035\245\036\232\037\257\040" +
    "\230\041\240\042\236\043\224\044\226\045\255\046\253" +
    "\047\251\050\237\051\250\052\215\053\214\054\216\001" +
    "\002\000\124\004\223\005\210\006\241\007\227\010\212" +
    "\011\225\012\217\013\233\014\243\015\uff69\016\242\017" +
    "\235\020\234\021\213\022\231\023\244\024\254\025\247" +
    "\026\211\027\222\030\260\031\207\032\221\033\220\034" +
    "\246\035\245\036\232\037\257\040\230\041\240\042\236" +
    "\043\224\044\226\045\255\046\253\047\251\050\237\051" +
    "\250\052\215\053\214\054\216\001\002\000\124\004\223" +
    "\005\210\006\241\007\227\010\212\011\225\012\217\013" +
    "\233\014\243\015\uff69\016\242\017\235\020\234\021\213" +
    "\022\231\023\244\024\254\025\247\026\211\027\222\030" +
    "\260\031\207\032\221\033\220\034\246\035\245\036\232" +
    "\037\257\040\230\041\240\042\236\043\224\044\226\045" +
    "\255\046\253\047\251\050\237\051\250\052\215\053\214" +
    "\054\216\001\002\000\124\004\223\005\210\006\241\007" +
    "\227\010\212\011\225\012\217\013\233\014\243\015\uff69" +
    "\016\242\017\235\020\234\021\213\022\231\023\244\024" +
    "\254\025\247\026\211\027\222\030\260\031\207\032\221" +
    "\033\220\034\246\035\245\036\232\037\257\040\230\041" +
    "\240\042\236\043\224\044\226\045\255\046\253\047\251" +
    "\050\237\051\250\052\215\053\214\054\216\001\002\000" +
    "\124\004\223\005\210\006\241\007\227\010\212\011\225" +
    "\012\217\013\233\014\243\015\uff69\016\242\017\235\020" +
    "\234\021\213\022\231\023\244\024\254\025\247\026\211" +
    "\027\222\030\260\031\207\032\221\033\220\034\246\035" +
    "\245\036\232\037\257\040\230\041\240\042\236\043\224" +
    "\044\226\045\255\046\253\047\251\050\237\051\250\052" +
    "\215\053\214\054\216\001\002\000\124\004\223\005\210" +
    "\006\241\007\227\010\212\011\225\012\217\013\233\014" +
    "\243\015\uff69\016\242\017\235\020\234\021\213\022\231" +
    "\023\244\024\254\025\247\026\211\027\222\030\260\031" +
    "\207\032\221\033\220\034\246\035\245\036\232\037\257" +
    "\040\230\041\240\042\236\043\224\044\226\045\255\046" +
    "\253\047\251\050\237\051\250\052\215\053\214\054\216" +
    "\001\002\000\124\004\223\005\210\006\241\007\227\010" +
    "\212\011\225\012\217\013\233\014\243\015\uff69\016\242" +
    "\017\235\020\234\021\213\022\231\023\244\024\254\025" +
    "\247\026\211\027\222\030\260\031\207\032\221\033\220" +
    "\034\246\035\245\036\232\037\257\040\230\041\240\042" +
    "\236\043\224\044\226\045\255\046\253\047\251\050\237" +
    "\051\250\052\215\053\214\054\216\001\002\000\124\004" +
    "\223\005\210\006\241\007\227\010\212\011\225\012\217" +
    "\013\233\014\243\015\uff69\016\242\017\235\020\234\021" +
    "\213\022\231\023\244\024\254\025\247\026\211\027\222" +
    "\030\260\031\207\032\221\033\220\034\246\035\245\036" +
    "\232\037\257\040\230\041\240\042\236\043\224\044\226" +
    "\045\255\046\253\047\251\050\237\051\250\052\215\053" +
    "\214\054\216\001\002\000\124\004\223\005\210\006\241" +
    "\007\227\010\212\011\225\012\217\013\233\014\243\015" +
    "\uff69\016\242\017\235\020\234\021\213\022\231\023\244" +
    "\024\254\025\247\026\211\027\222\030\260\031\207\032" +
    "\221\033\220\034\246\035\245\036\232\037\257\040\230" +
    "\041\240\042\236\043\224\044\226\045\255\046\253\047" +
    "\251\050\237\051\250\052\215\053\214\054\216\001\002" +
    "\000\124\004\223\005\210\006\241\007\227\010\212\011" +
    "\225\012\217\013\233\014\243\015\uff69\016\242\017\235" +
    "\020\234\021\213\022\231\023\244\024\254\025\247\026" +
    "\211\027\222\030\260\031\207\032\221\033\220\034\246" +
    "\035\245\036\232\037\257\040\230\041\240\042\236\043" +
    "\224\044\226\045\255\046\253\047\251\050\237\051\250" +
    "\052\215\053\214\054\216\001\002\000\124\004\223\005" +
    "\210\006\241\007\227\010\212\011\225\012\217\013\233" +
    "\014\243\015\uff69\016\242\017\235\020\234\021\213\022" +
    "\231\023\244\024\254\025\247\026\211\027\222\030\260" +
    "\031\207\032\221\033\220\034\246\035\245\036\232\037" +
    "\257\040\230\041\240\042\236\043\224\044\226\045\255" +
    "\046\253\047\251\050\237\051\250\052\215\053\214\054" +
    "\216\001\002\000\124\004\223\005\210\006\241\007\227" +
    "\010\212\011\225\012\217\013\233\014\243\015\uff69\016" +
    "\242\017\235\020\234\021\213\022\231\023\244\024\254" +
    "\025\247\026\211\027\222\030\260\031\207\032\221\033" +
    "\220\034\246\035\245\036\232\037\257\040\230\041\240" +
    "\042\236\043\224\044\226\045\255\046\253\047\251\050" +
    "\237\051\250\052\215\053\214\054\216\001\002\000\124" +
    "\004\223\005\210\006\241\007\227\010\212\011\225\012" +
    "\217\013\233\014\243\015\uff69\016\242\017\235\020\234" +
    "\021\213\022\231\023\244\024\254\025\247\026\211\027" +
    "\222\030\260\031\207\032\221\033\220\034\246\035\245" +
    "\036\232\037\257\040\230\041\240\042\236\043\224\044" +
    "\226\045\255\046\253\047\251\050\237\051\250\052\215" +
    "\053\214\054\216\001\002\000\124\004\223\005\210\006" +
    "\241\007\227\010\212\011\225\012\217\013\233\014\243" +
    "\015\uff69\016\242\017\235\020\234\021\213\022\231\023" +
    "\244\024\254\025\247\026\211\027\222\030\260\031\207" +
    "\032\221\033\220\034\246\035\245\036\232\037\257\040" +
    "\230\041\240\042\236\043\224\044\226\045\255\046\253" +
    "\047\251\050\237\051\250\052\215\053\214\054\216\001" +
    "\002\000\124\004\223\005\210\006\241\007\227\010\212" +
    "\011\225\012\217\013\233\014\243\015\uff69\016\242\017" +
    "\235\020\234\021\213\022\231\023\244\024\254\025\247" +
    "\026\211\027\222\030\260\031\207\032\221\033\220\034" +
    "\246\035\245\036\232\037\257\040\230\041\240\042\236" +
    "\043\224\044\226\045\255\046\253\047\251\050\237\051" +
    "\250\052\215\053\214\054\216\001\002\000\124\004\223" +
    "\005\210\006\241\007\227\010\212\011\225\012\217\013" +
    "\233\014\243\015\uff69\016\242\017\235\020\234\021\213" +
    "\022\231\023\244\024\254\025\247\026\211\027\222\030" +
    "\260\031\207\032\221\033\220\034\246\035\245\036\232" +
    "\037\257\040\230\041\240\042\236\043\224\044\226\045" +
    "\255\046\253\047\251\050\237\051\250\052\215\053\214" +
    "\054\216\001\002\000\124\004\223\005\210\006\241\007" +
    "\227\010\212\011\225\012\217\013\233\014\243\015\uff69" +
    "\016\242\017\235\020\234\021\213\022\231\023\244\024" +
    "\254\025\247\026\211\027\222\030\260\031\207\032\221" +
    "\033\220\034\246\035\245\036\232\037\257\040\230\041" +
    "\240\042\236\043\224\044\226\045\255\046\253\047\251" +
    "\050\237\051\250\052\215\053\214\054\216\001\002\000" +
    "\124\004\223\005\210\006\241\007\227\010\212\011\225" +
    "\012\217\013\233\014\243\015\uff69\016\242\017\235\020" +
    "\234\021\213\022\231\023\244\024\254\025\247\026\211" +
    "\027\222\030\260\031\207\032\221\033\220\034\246\035" +
    "\245\036\232\037\257\040\230\041\240\042\236\043\224" +
    "\044\226\045\255\046\253\047\251\050\237\051\250\052" +
    "\215\053\214\054\216\001\002\000\124\004\223\005\210" +
    "\006\241\007\227\010\212\011\225\012\217\013\233\014" +
    "\243\015\uff69\016\242\017\235\020\234\021\213\022\231" +
    "\023\244\024\254\025\247\026\211\027\222\030\260\031" +
    "\207\032\221\033\220\034\246\035\245\036\232\037\257" +
    "\040\230\041\240\042\236\043\224\044\226\045\255\046" +
    "\253\047\251\050\237\051\250\052\215\053\214\054\216" +
    "\001\002\000\124\004\223\005\210\006\241\007\227\010" +
    "\212\011\225\012\217\013\233\014\243\015\uff69\016\242" +
    "\017\235\020\234\021\213\022\231\023\244\024\254\025" +
    "\247\026\211\027\222\030\260\031\207\032\221\033\220" +
    "\034\246\035\245\036\232\037\257\040\230\041\240\042" +
    "\236\043\224\044\226\045\255\046\253\047\251\050\237" +
    "\051\250\052\215\053\214\054\216\001\002\000\124\004" +
    "\223\005\210\006\241\007\227\010\212\011\225\012\217" +
    "\013\233\014\243\015\uff69\016\242\017\235\020\234\021" +
    "\213\022\231\023\244\024\254\025\247\026\211\027\222" +
    "\030\260\031\207\032\221\033\220\034\246\035\245\036" +
    "\232\037\257\040\230\041\240\042\236\043\224\044\226" +
    "\045\255\046\253\047\251\050\237\051\250\052\215\053" +
    "\214\054\216\001\002\000\124\004\223\005\210\006\241" +
    "\007\227\010\212\011\225\012\217\013\233\014\243\015" +
    "\uff69\016\242\017\235\020\234\021\213\022\231\023\244" +
    "\024\254\025\247\026\211\027\222\030\260\031\207\032" +
    "\221\033\220\034\246\035\245\036\232\037\257\040\230" +
    "\041\240\042\236\043\224\044\226\045\255\046\253\047" +
    "\251\050\237\051\250\052\215\053\214\054\216\001\002" +
    "\000\124\004\223\005\210\006\241\007\227\010\212\011" +
    "\225\012\217\013\233\014\243\015\uff69\016\242\017\235" +
    "\020\234\021\213\022\231\023\244\024\254\025\247\026" +
    "\211\027\222\030\260\031\207\032\221\033\220\034\246" +
    "\035\245\036\232\037\257\040\230\041\240\042\236\043" +
    "\224\044\226\045\255\046\253\047\251\050\237\051\250" +
    "\052\215\053\214\054\216\001\002\000\124\004\223\005" +
    "\210\006\241\007\227\010\212\011\225\012\217\013\233" +
    "\014\243\015\uff69\016\242\017\235\020\234\021\213\022" +
    "\231\023\244\024\254\025\247\026\211\027\222\030\260" +
    "\031\207\032\221\033\220\034\246\035\245\036\232\037" +
    "\257\040\230\041\240\042\236\043\224\044\226\045\255" +
    "\046\253\047\251\050\237\051\250\052\215\053\214\054" +
    "\216\001\002\000\124\004\223\005\210\006\241\007\227" +
    "\010\212\011\225\012\217\013\233\014\243\015\uff69\016" +
    "\242\017\235\020\234\021\213\022\231\023\244\024\254" +
    "\025\247\026\211\027\222\030\260\031\207\032\221\033" +
    "\220\034\246\035\245\036\232\037\257\040\230\041\240" +
    "\042\236\043\224\044\226\045\255\046\253\047\251\050" +
    "\237\051\250\052\215\053\214\054\216\001\002\000\124" +
    "\004\223\005\210\006\241\007\227\010\212\011\225\012" +
    "\217\013\233\014\243\015\uff69\016\242\017\235\020\234" +
    "\021\213\022\231\023\244\024\254\025\247\026\211\027" +
    "\222\030\260\031\207\032\221\033\220\034\246\035\245" +
    "\036\232\037\257\040\230\041\240\042\236\043\224\044" +
    "\226\045\255\046\253\047\251\050\237\051\250\052\215" +
    "\053\214\054\216\001\002\000\124\004\223\005\210\006" +
    "\241\007\227\010\212\011\225\012\217\013\233\014\243" +
    "\015\uff69\016\242\017\235\020\234\021\213\022\231\023" +
    "\244\024\254\025\247\026\211\027\222\030\260\031\207" +
    "\032\221\033\220\034\246\035\245\036\232\037\257\040" +
    "\230\041\240\042\236\043\224\044\226\045\255\046\253" +
    "\047\251\050\237\051\250\052\215\053\214\054\216\001" +
    "\002\000\004\015\266\001\002\000\124\004\223\005\210" +
    "\006\241\007\227\010\212\011\225\012\217\013\233\014" +
    "\243\015\uff69\016\242\017\235\020\234\021\213\022\231" +
    "\023\244\024\254\025\247\026\211\027\222\030\260\031" +
    "\207\032\221\033\220\034\246\035\245\036\232\037\257" +
    "\040\230\041\240\042\236\043\224\044\226\045\255\046" +
    "\253\047\251\050\237\051\250\052\215\053\214\054\216" +
    "\001\002\000\124\004\223\005\210\006\241\007\227\010" +
    "\212\011\225\012\217\013\233\014\243\015\uff69\016\242" +
    "\017\235\020\234\021\213\022\231\023\244\024\254\025" +
    "\247\026\211\027\222\030\260\031\207\032\221\033\220" +
    "\034\246\035\245\036\232\037\257\040\230\041\240\042" +
    "\236\043\224\044\226\045\255\046\253\047\251\050\237" +
    "\051\250\052\215\053\214\054\216\001\002\000\124\004" +
    "\223\005\210\006\241\007\227\010\212\011\225\012\217" +
    "\013\233\014\243\015\uff69\016\242\017\235\020\234\021" +
    "\213\022\231\023\244\024\254\025\247\026\211\027\222" +
    "\030\260\031\207\032\221\033\220\034\246\035\245\036" +
    "\232\037\257\040\230\041\240\042\236\043\224\044\226" +
    "\045\255\046\253\047\251\050\237\051\250\052\215\053" +
    "\214\054\216\001\002\000\004\015\uff92\001\002\000\124" +
    "\004\223\005\210\006\241\007\227\010\212\011\225\012" +
    "\217\013\233\014\243\015\uff69\016\242\017\235\020\234" +
    "\021\213\022\231\023\244\024\254\025\247\026\211\027" +
    "\222\030\260\031\207\032\221\033\220\034\246\035\245" +
    "\036\232\037\257\040\230\041\240\042\236\043\224\044" +
    "\226\045\255\046\253\047\251\050\237\051\250\052\215" +
    "\053\214\054\216\001\002\000\124\004\223\005\210\006" +
    "\241\007\227\010\212\011\225\012\217\013\233\014\243" +
    "\015\uff69\016\242\017\235\020\234\021\213\022\231\023" +
    "\244\024\254\025\247\026\211\027\222\030\260\031\207" +
    "\032\221\033\220\034\246\035\245\036\232\037\257\040" +
    "\230\041\240\042\236\043\224\044\226\045\255\046\253" +
    "\047\251\050\237\051\250\052\215\053\214\054\216\001" +
    "\002\000\004\015\uff80\001\002\000\004\015\uff79\001\002" +
    "\000\004\015\uff73\001\002\000\004\015\uff84\001\002\000" +
    "\004\015\uff72\001\002\000\022\003\ufff2\004\ufff2\007\ufff2" +
    "\015\ufff2\016\006\017\011\044\ufff2\051\012\001\002\000" +
    "\014\003\271\004\274\007\270\015\uff60\044\276\001\002" +
    "\000\004\043\uff5e\001\002\000\014\003\uff67\004\uff67\007" +
    "\uff67\015\uff67\044\uff67\001\002\000\004\043\uff65\001\002" +
    "\000\004\015\uff68\001\002\000\004\043\uff5f\001\002\000" +
    "\004\015\ufffe\001\002\000\004\043\277\001\002\000\020" +
    "\014\301\032\304\034\310\037\306\040\303\041\305\042" +
    "\307\001\002\000\006\013\uff5d\045\317\001\002\000\036" +
    "\013\uff5b\014\301\026\uff53\027\uff53\030\uff53\032\304\033" +
    "\uff5b\034\310\035\uff5b\037\306\040\303\041\305\042\307" +
    "\045\uff5b\001\002\000\004\013\u0131\001\002\000\036\013" +
    "\uff5b\014\301\026\uff54\027\uff54\030\uff54\032\304\033\uff5b" +
    "\034\310\035\uff5b\037\306\040\303\041\305\042\307\045" +
    "\uff5b\001\002\000\024\005\u0125\007\u0124\014\301\032\304" +
    "\034\310\037\306\040\303\041\305\042\307\001\002\000" +
    "\036\013\uff5b\014\301\026\uff52\027\uff52\030\uff52\032\304" +
    "\033\uff5b\034\310\035\uff5b\037\306\040\303\041\305\042" +
    "\307\045\uff5b\001\002\000\036\013\uff5b\014\301\026\uff55" +
    "\027\uff55\030\uff55\032\304\033\uff5b\034\310\035\uff5b\037" +
    "\306\040\303\041\305\042\307\045\uff5b\001\002\000\114" +
    "\004\342\005\327\006\355\007\346\010\331\011\344\012" +
    "\336\013\352\014\357\021\332\022\350\023\360\024\367" +
    "\025\363\026\330\027\341\030\372\031\326\032\340\033" +
    "\337\034\362\035\361\036\351\037\371\040\347\041\354" +
    "\042\uff20\043\343\044\345\045\370\046\366\047\365\050" +
    "\353\051\364\052\334\053\333\054\335\001\002\000\020" +
    "\014\301\032\304\034\310\037\306\040\303\041\305\042" +
    "\307\001\002\000\010\026\314\027\312\030\313\001\002" +
    "\000\030\013\uff5b\014\301\032\304\033\uff5b\034\310\035" +
    "\uff5b\037\306\040\303\041\305\042\307\045\uff5b\001\002" +
    "\000\030\013\uff5b\014\301\032\304\033\uff5b\034\310\035" +
    "\uff5b\037\306\040\303\041\305\042\307\045\uff5b\001\002" +
    "\000\030\013\uff5b\014\301\032\304\033\uff5b\034\310\035" +
    "\uff5b\037\306\040\303\041\305\042\307\045\uff5b\001\002" +
    "\000\012\013\uff5c\033\uff5c\035\uff5c\045\317\001\002\000" +
    "\012\013\uff48\033\uff48\035\uff48\045\uff48\001\002\000\020" +
    "\014\301\032\304\034\310\037\306\040\303\041\305\042" +
    "\307\001\002\000\012\013\uff45\033\uff45\035\uff45\045\uff45" +
    "\001\002\000\012\013\uff46\033\uff46\035\uff46\045\uff46\001" +
    "\002\000\012\013\uff47\033\uff47\035\uff47\045\uff47\001\002" +
    "\000\006\035\324\045\317\001\002\000\036\013\uff5b\014" +
    "\301\026\uff58\027\uff58\030\uff58\032\304\033\uff5b\034\310" +
    "\035\uff5b\037\306\040\303\041\305\042\307\045\uff5b\001" +
    "\002\000\012\013\uff4f\033\uff4f\035\uff4f\045\uff4f\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\114\004\342\005\327\006\355\007\346\010\331\011" +
    "\344\012\336\013\352\014\357\021\332\022\350\023\360" +
    "\024\367\025\363\026\330\027\341\030\372\031\326\032" +
    "\340\033\337\034\362\035\361\036\351\037\371\040\347" +
    "\041\354\042\uff20\043\343\044\345\045\370\046\366\047" +
    "\365\050\353\051\364\052\334\053\333\054\335\001\002" +
    "\000\004\042\u0107\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\114\004\342\005\327\006" +
    "\355\007\346\010\331\011\344\012\336\013\352\014\357" +
    "\021\332\022\350\023\360\024\367\025\363\026\330\027" +
    "\341\030\372\031\326\032\340\033\337\034\362\035\361" +
    "\036\351\037\371\040\347\041\354\042\uff20\043\343\044" +
    "\345\045\370\046\366\047\365\050\353\051\364\052\334" +
    "\053\333\054\335\001\002\000\004\042\uff33\001\002\000" +
    "\004\042\uff2c\001\002\000\004\042\uff27\001\002\000\004" +
    "\042\uff37\001\002\000\004\042\uff26\001\002\000\004\042" +
    "\uff25\001\002\000\004\042\uff23\001\002\000\004\042\uff36" +
    "\001\002\000\004\042\uff2f\001\002\000\004\042\uff2e\001" +
    "\002\000\004\042\uff38\001\002\000\004\042\uff3b\001\002" +
    "\000\036\013\uff5b\014\301\026\uff56\027\uff56\030\uff56\032" +
    "\304\033\uff5b\034\310\035\uff5b\037\306\040\303\041\305" +
    "\042\307\045\uff5b\001\002\000\012\013\uff4d\033\uff4d\035" +
    "\uff4d\045\uff4d\001\002\000\004\042\uff41\001\002\000\004" +
    "\042\uff2a\001\002\000\004\042\uff24\001\002\000\004\042" +
    "\uff3c\001\002\000\004\042\uff2d\001\002\000\004\042\uff39" +
    "\001\002\000\004\042\uff2b\001\002\000\004\042\uff40\001" +
    "\002\000\004\042\uff28\001\002\000\004\042\uff3e\001\002" +
    "\000\004\042\uff29\001\002\000\004\042\uff43\001\002\000" +
    "\004\042\uff34\001\002\000\004\042\uff31\001\002\000\004" +
    "\042\uff30\001\002\000\004\042\uff3d\001\002\000\004\042" +
    "\uff44\001\002\000\004\042\uff22\001\002\000\004\042\uff21" +
    "\001\002\000\004\042\uff3a\001\002\000\004\042\uff3f\001" +
    "\002\000\004\042\uff35\001\002\000\004\042\uff42\001\002" +
    "\000\004\042\uff32\001\002\000\012\013\uff4c\033\uff4c\035" +
    "\uff4c\045\uff4c\001\002\000\012\013\uff4a\033\uff4a\035\uff4a" +
    "\045\uff4a\001\002\000\006\033\u012e\045\317\001\002\000" +
    "\004\036\u012a\001\002\000\004\036\u0126\001\002\000\004" +
    "\005\u0127\001\002\000\004\033\u0128\001\002\000\036\013" +
    "\uff5b\014\301\026\uff5a\027\uff5a\030\uff5a\032\304\033\uff5b" +
    "\034\310\035\uff5b\037\306\040\303\041\305\042\307\045" +
    "\uff5b\001\002\000\012\013\uff51\033\uff51\035\uff51\045\uff51" +
    "\001\002\000\004\007\u012b\001\002\000\004\033\u012c\001" +
    "\002\000\036\013\uff5b\014\301\026\uff59\027\uff59\030\uff59" +
    "\032\304\033\uff5b\034\310\035\uff5b\037\306\040\303\041" +
    "\305\042\307\045\uff5b\001\002\000\012\013\uff50\033\uff50" +
    "\035\uff50\045\uff50\001\002\000\036\013\uff5b\014\301\026" +
    "\uff57\027\uff57\030\uff57\032\304\033\uff5b\034\310\035\uff5b" +
    "\037\306\040\303\041\305\042\307\045\uff5b\001\002\000" +
    "\012\013\uff4e\033\uff4e\035\uff4e\045\uff4e\001\002\000\012" +
    "\013\uff4b\033\uff4b\035\uff4b\045\uff4b\001\002\000\010\016" +
    "\uff62\017\uff62\051\uff62\001\002\000\010\016\006\017\011" +
    "\051\u0136\001\002\000\010\016\006\017\011\051\u0136\001" +
    "\002\000\010\016\006\017\011\051\u0136\001\002\000\012" +
    "\004\274\007\270\015\uff60\044\276\001\002\000\020\004" +
    "\ufff6\007\ufff6\015\ufff6\016\006\017\011\044\ufff6\051\u0136" +
    "\001\002\000\012\004\ufff9\007\ufff9\015\ufff9\044\ufff9\001" +
    "\002\000\004\015\uff61\001\002\000\012\004\ufff7\007\ufff7" +
    "\015\ufff7\044\ufff7\001\002\000\012\004\ufff8\007\ufff8\015" +
    "\ufff8\044\ufff8\001\002\000\012\013\uff49\033\uff49\035\uff49" +
    "\045\uff49\001\002\000\004\015\u013d\001\002\000\020\003" +
    "\ufff2\015\ufff2\016\006\017\011\046\ufff2\047\ufff2\051\012" +
    "\001\002\000\012\003\u0140\015\uff1b\046\u013f\047\u0142\001" +
    "\002\000\006\004\u01bb\007\u01ba\001\002\000\012\003\uff1a" +
    "\015\uff1a\046\uff1a\047\uff1a\001\002\000\004\015\ufffd\001" +
    "\002\000\006\004\u0145\007\u0143\001\002\000\006\013\uff12" +
    "\050\u014c\001\002\000\004\013\u0148\001\002\000\006\013" +
    "\uff11\050\u0146\001\002\000\006\004\u0145\007\u0143\001\002" +
    "\000\004\013\uff14\001\002\000\020\003\uff1d\015\uff1d\016" +
    "\uff1d\017\uff1d\046\uff1d\047\uff1d\051\uff1d\001\002\000\020" +
    "\003\ufff2\015\ufff2\016\006\017\011\046\ufff2\047\ufff2\051" +
    "\012\001\002\000\012\003\u0140\015\uff1b\046\u013f\047\u0142" +
    "\001\002\000\004\015\uff1c\001\002\000\006\004\u0145\007" +
    "\u0143\001\002\000\004\013\uff13\001\002\000\004\015\u014f" +
    "\001\002\000\016\003\ufff2\004\ufff2\007\ufff2\016\006\017" +
    "\011\051\012\001\002\000\010\003\u0153\004\u0154\007\u0152" +
    "\001\002\000\004\002\uff10\001\002\000\016\004\uff02\007" +
    "\uff02\010\uff02\012\uff02\013\uff02\052\uff02\001\002\000\010" +
    "\003\uff0f\004\uff0f\007\uff0f\001\002\000\016\004\uff03\007" +
    "\uff03\010\uff03\012\uff03\013\uff03\052\uff03\001\002\000\004" +
    "\010\uff0b\001\002\000\004\002\ufffc\001\002\000\004\010" +
    "\u0158\001\002\000\006\004\u0154\007\u0152\001\002\000\006" +
    "\013\ufefe\052\u0160\001\002\000\014\004\uff00\007\uff00\012" +
    "\u015c\013\uff00\052\uff00\001\002\000\012\004\uff06\007\uff06" +
    "\013\uff04\052\uff04\001\002\000\006\004\u0154\007\u0152\001" +
    "\002\000\012\004\uff01\007\uff01\013\uff01\052\uff01\001\002" +
    "\000\006\004\u0154\007\u0152\001\002\000\006\013\uff05\052" +
    "\uff05\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176" +
    "\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017" +
    "\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187" +
    "\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034" +
    "\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d" +
    "\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051" +
    "\u0188\053\ufed6\054\u016d\001\002\000\004\013\u0162\001\002" +
    "\000\012\002\uff0a\004\uff0a\007\uff0a\051\uff0a\001\002\000" +
    "\012\002\ufffa\004\ufffa\007\ufffa\051\150\001\002\000\010" +
    "\002\uff0c\004\u0154\007\u0152\001\002\000\004\002\uff0d\001" +
    "\002\000\004\002\uff09\001\002\000\120\004\u0172\005\u0169" +
    "\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014" +
    "\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184" +
    "\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032" +
    "\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177" +
    "\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047" +
    "\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\004" +
    "\053\ufefd\001\002\000\120\004\u0172\005\u0169\006\u0181\007" +
    "\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182" +
    "\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025" +
    "\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f" +
    "\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042" +
    "\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e" +
    "\051\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172\005" +
    "\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a" +
    "\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023" +
    "\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167" +
    "\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040" +
    "\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a" +
    "\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000" +
    "\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174" +
    "\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021" +
    "\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171" +
    "\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036" +
    "\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175" +
    "\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054" +
    "\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176" +
    "\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017" +
    "\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187" +
    "\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034" +
    "\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d" +
    "\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051" +
    "\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169" +
    "\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014" +
    "\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184" +
    "\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032" +
    "\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177" +
    "\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047" +
    "\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120" +
    "\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012" +
    "\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c" +
    "\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030" +
    "\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179" +
    "\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045" +
    "\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d" +
    "\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010" +
    "\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c" +
    "\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026" +
    "\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186" +
    "\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043" +
    "\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188" +
    "\053\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169\006" +
    "\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183" +
    "\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024" +
    "\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170" +
    "\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041" +
    "\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189" +
    "\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120\004" +
    "\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e" +
    "\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022" +
    "\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e" +
    "\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037" +
    "\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c" +
    "\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001" +
    "\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b" +
    "\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020" +
    "\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a" +
    "\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035" +
    "\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173" +
    "\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053" +
    "\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181" +
    "\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016" +
    "\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b" +
    "\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033" +
    "\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180" +
    "\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050" +
    "\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172" +
    "\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013" +
    "\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178" +
    "\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031" +
    "\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d" +
    "\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046" +
    "\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002" +
    "\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011" +
    "\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b" +
    "\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027" +
    "\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185" +
    "\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044" +
    "\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6" +
    "\054\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181\007" +
    "\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182" +
    "\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025" +
    "\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f" +
    "\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042" +
    "\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e" +
    "\051\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172\005" +
    "\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a" +
    "\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023" +
    "\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167" +
    "\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040" +
    "\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a" +
    "\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000" +
    "\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174" +
    "\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021" +
    "\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171" +
    "\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036" +
    "\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175" +
    "\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054" +
    "\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176" +
    "\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017" +
    "\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187" +
    "\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034" +
    "\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d" +
    "\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051" +
    "\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169" +
    "\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014" +
    "\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184" +
    "\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032" +
    "\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177" +
    "\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047" +
    "\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120" +
    "\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012" +
    "\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c" +
    "\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030" +
    "\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179" +
    "\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045" +
    "\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d" +
    "\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010" +
    "\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c" +
    "\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026" +
    "\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186" +
    "\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043" +
    "\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188" +
    "\053\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169\006" +
    "\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183" +
    "\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024" +
    "\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170" +
    "\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041" +
    "\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189" +
    "\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120\004" +
    "\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e" +
    "\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022" +
    "\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e" +
    "\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037" +
    "\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c" +
    "\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001" +
    "\002\000\004\053\u019e\001\002\000\120\004\u0172\005\u0169" +
    "\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014" +
    "\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184" +
    "\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032" +
    "\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177" +
    "\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047" +
    "\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120" +
    "\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012" +
    "\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c" +
    "\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030" +
    "\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179" +
    "\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045" +
    "\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d" +
    "\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010" +
    "\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c" +
    "\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026" +
    "\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186" +
    "\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043" +
    "\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188" +
    "\053\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169\006" +
    "\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183" +
    "\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024" +
    "\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170" +
    "\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041" +
    "\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189" +
    "\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120\004" +
    "\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e" +
    "\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022" +
    "\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e" +
    "\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037" +
    "\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c" +
    "\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001" +
    "\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b" +
    "\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020" +
    "\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a" +
    "\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035" +
    "\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173" +
    "\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053" +
    "\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181" +
    "\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016" +
    "\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b" +
    "\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033" +
    "\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180" +
    "\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050" +
    "\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172" +
    "\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013" +
    "\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178" +
    "\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031" +
    "\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d" +
    "\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046" +
    "\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002" +
    "\000\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011" +
    "\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b" +
    "\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027" +
    "\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185" +
    "\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044" +
    "\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6" +
    "\054\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181\007" +
    "\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182" +
    "\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025" +
    "\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f" +
    "\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042" +
    "\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e" +
    "\051\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172\005" +
    "\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a" +
    "\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023" +
    "\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167" +
    "\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040" +
    "\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a" +
    "\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000" +
    "\120\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174" +
    "\012\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021" +
    "\u016c\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171" +
    "\030\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036" +
    "\u0179\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175" +
    "\045\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054" +
    "\u016d\001\002\000\120\004\u0172\005\u0169\006\u0181\007\u0176" +
    "\010\u016b\011\u0174\012\u016e\013\u017a\014\u0183\016\u0182\017" +
    "\u017c\020\u017b\021\u016c\022\u0178\023\u0184\024\u018b\025\u0187" +
    "\026\u016a\027\u0171\030\u018e\031\u0167\032\u0170\033\u016f\034" +
    "\u0186\035\u0185\036\u0179\037\u018d\040\u0177\041\u0180\042\u017d" +
    "\043\u0173\044\u0175\045\u018c\046\u018a\047\u0189\050\u017e\051" +
    "\u0188\053\ufed6\054\u016d\001\002\000\120\004\u0172\005\u0169" +
    "\006\u0181\007\u0176\010\u016b\011\u0174\012\u016e\013\u017a\014" +
    "\u0183\016\u0182\017\u017c\020\u017b\021\u016c\022\u0178\023\u0184" +
    "\024\u018b\025\u0187\026\u016a\027\u0171\030\u018e\031\u0167\032" +
    "\u0170\033\u016f\034\u0186\035\u0185\036\u0179\037\u018d\040\u0177" +
    "\041\u0180\042\u017d\043\u0173\044\u0175\045\u018c\046\u018a\047" +
    "\u0189\050\u017e\051\u0188\053\ufed6\054\u016d\001\002\000\120" +
    "\004\u0172\005\u0169\006\u0181\007\u0176\010\u016b\011\u0174\012" +
    "\u016e\013\u017a\014\u0183\016\u0182\017\u017c\020\u017b\021\u016c" +
    "\022\u0178\023\u0184\024\u018b\025\u0187\026\u016a\027\u0171\030" +
    "\u018e\031\u0167\032\u0170\033\u016f\034\u0186\035\u0185\036\u0179" +
    "\037\u018d\040\u0177\041\u0180\042\u017d\043\u0173\044\u0175\045" +
    "\u018c\046\u018a\047\u0189\050\u017e\051\u0188\053\ufed6\054\u016d" +
    "\001\002\000\004\053\ufeeb\001\002\000\004\053\ufee4\001" +
    "\002\000\004\053\ufede\001\002\000\004\053\ufeef\001\002" +
    "\000\004\053\ufedd\001\002\000\004\053\ufedc\001\002\000" +
    "\004\053\ufed7\001\002\000\004\053\ufeee\001\002\000\004" +
    "\053\ufee7\001\002\000\004\053\ufee6\001\002\000\004\053" +
    "\ufef0\001\002\000\004\053\ufef3\001\002\000\004\053\ufeda" +
    "\001\002\000\004\053\ufef9\001\002\000\004\053\ufee2\001" +
    "\002\000\004\013\ufeff\001\002\000\004\053\ufedb\001\002" +
    "\000\004\053\ufee1\001\002\000\004\053\ufed9\001\002\000" +
    "\004\053\ufed8\001\002\000\004\053\ufef4\001\002\000\004" +
    "\053\ufee5\001\002\000\004\053\ufef1\001\002\000\004\053" +
    "\ufee3\001\002\000\004\053\ufef8\001\002\000\004\053\ufedf" +
    "\001\002\000\004\053\ufef6\001\002\000\004\053\ufee0\001" +
    "\002\000\004\053\ufefb\001\002\000\004\053\ufeec\001\002" +
    "\000\004\053\ufee9\001\002\000\004\053\ufee8\001\002\000" +
    "\004\053\ufef5\001\002\000\004\053\ufefc\001\002\000\004" +
    "\053\ufef2\001\002\000\004\053\ufef7\001\002\000\004\053" +
    "\ufeed\001\002\000\004\053\ufefa\001\002\000\004\053\ufeea" +
    "\001\002\000\010\003\u0153\004\u0154\007\u0152\001\002\000" +
    "\004\002\uff0e\001\002\000\012\003\u0140\015\uff1b\046\u013f" +
    "\047\u0142\001\002\000\004\015\uff19\001\002\000\006\013" +
    "\uff16\050\u01c3\001\002\000\006\013\uff15\050\u01c1\001\002" +
    "\000\004\013\u01bd\001\002\000\020\003\uff1f\015\uff1f\016" +
    "\uff1f\017\uff1f\046\uff1f\047\uff1f\051\uff1f\001\002\000\020" +
    "\003\ufff2\015\ufff2\016\006\017\011\046\ufff2\047\ufff2\051" +
    "\012\001\002\000\012\003\u0140\015\uff1b\046\u013f\047\u0142" +
    "\001\002\000\004\015\uff1e\001\002\000\006\004\u01bb\007" +
    "\u01ba\001\002\000\004\013\uff18\001\002\000\006\004\u01bb" +
    "\007\u01ba\001\002\000\004\013\uff17\001\002\000\004\043" +
    "\u01c6\001\002\000\020\014\301\032\304\034\310\037\306" +
    "\040\303\041\305\042\307\001\002\000\004\013\u01c8\001" +
    "\002\000\010\016\uff64\017\uff64\051\uff64\001\002\000\010" +
    "\016\006\017\011\051\u0136\001\002\000\012\004\274\007" +
    "\270\015\uff60\044\276\001\002\000\004\015\uff63\001\002" +
    "\000\014\003\271\004\274\007\270\015\uff60\044\276\001" +
    "\002\000\004\015\uff66\001\002\000\004\015\uff71\001\002" +
    "\000\004\015\uff6a\001\002\000\004\015\uff83\001\002\000" +
    "\004\015\uff7c\001\002\000\004\015\uff7b\001\002\000\004" +
    "\015\uff85\001\002\000\004\015\uff88\001\002\000\004\015" +
    "\uff6d\001\002\000\004\015\uff8e\001\002\000\004\015\uff77" +
    "\001\002\000\004\015\uff70\001\002\000\004\015\uff76\001" +
    "\002\000\004\015\uff6c\001\002\000\004\015\uff6b\001\002" +
    "\000\004\015\uff89\001\002\000\004\015\uff7a\001\002\000" +
    "\004\015\uff86\001\002\000\004\015\uff78\001\002\000\004" +
    "\015\uff8d\001\002\000\004\015\uff74\001\002\000\004\015" +
    "\uff8b\001\002\000\004\015\uff75\001\002\000\004\015\uff90" +
    "\001\002\000\004\015\uff81\001\002\000\004\015\uff7e\001" +
    "\002\000\004\015\uff7d\001\002\000\004\015\uff8a\001\002" +
    "\000\004\015\uff91\001\002\000\004\015\uff6f\001\002\000" +
    "\004\015\uff6e\001\002\000\004\015\uff87\001\002\000\004" +
    "\015\uff8c\001\002\000\004\015\uff82\001\002\000\004\015" +
    "\uff8f\001\002\000\004\015\uff7f\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\114\004\u01fe" +
    "\005\u01f2\006\u020a\007\u0202\010\u01f4\011\u0200\012\u01f9\013" +
    "\u0206\014\u020b\021\u01f5\022\u0204\023\u020c\024\u0212\025\u020f" +
    "\026\u01f3\027\u01fd\030\u0215\031\u01f1\032\u01fc\033\u01fb\034" +
    "\u020e\035\u020d\036\u0205\037\u0214\040\u0203\041\u0209\042\u0207" +
    "\043\u01ff\044\u0201\045\u0213\046\u0211\047\u0210\050\u0208\051" +
    "\uffcb\052\u01f7\053\u01f6\054\u01f8\001\002\000\004\051\u0231" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\114\004\u01fe\005\u01f2\006\u020a\007\u0202\010" +
    "\u01f4\011\u0200\012\u01f9\013\u0206\014\u020b\021\u01f5\022\u0204" +
    "\023\u020c\024\u0212\025\u020f\026\u01f3\027\u01fd\030\u0215\031" +
    "\u01f1\032\u01fc\033\u01fb\034\u020e\035\u020d\036\u0205\037\u0214" +
    "\040\u0203\041\u0209\042\u0207\043\u01ff\044\u0201\045\u0213\046" +
    "\u0211\047\u0210\050\u0208\051\uffcb\052\u01f7\053\u01f6\054\u01f8" +
    "\001\002\000\004\051\uffde\001\002\000\004\051\uffd7\001" +
    "\002\000\004\051\uffd1\001\002\000\004\051\uffe2\001\002" +
    "\000\004\051\uffd0\001\002\000\004\051\uffcf\001\002\000" +
    "\004\051\uffe1\001\002\000\004\051\uffda\001\002\000\004" +
    "\051\uffd9\001\002\000\004\051\uffe3\001\002\000\004\051" +
    "\uffe6\001\002\000\004\051\uffec\001\002\000\004\051\uffd5" +
    "\001\002\000\004\051\uffce\001\002\000\004\051\uffd4\001" +
    "\002\000\004\051\uffe7\001\002\000\004\051\uffd8\001\002" +
    "\000\004\051\uffe4\001\002\000\004\051\uffd6\001\002\000" +
    "\004\051\uffeb\001\002\000\004\051\uffd2\001\002\000\004" +
    "\051\uffe9\001\002\000\004\051\uffd3\001\002\000\004\051" +
    "\uffee\001\002\000\004\051\uffdf\001\002\000\004\051\uffdc" +
    "\001\002\000\004\051\uffdb\001\002\000\040\003\ufff1\004" +
    "\ufff1\007\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\044\ufff1\046\ufff1\047\ufff1\051" +
    "\ufff1\001\002\000\004\051\uffe8\001\002\000\004\051\uffef" +
    "\001\002\000\004\051\uffcd\001\002\000\004\051\uffcc\001" +
    "\002\000\004\051\uffe5\001\002\000\004\051\uffea\001\002" +
    "\000\004\051\uffe0\001\002\000\004\051\uffed\001\002\000" +
    "\004\051\uffdd\001\002\000\032\003\ufff4\004\ufff4\007\ufff4" +
    "\015\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\044" +
    "\ufff4\046\ufff4\047\ufff4\001\002\000\032\003\ufff3\004\ufff3" +
    "\007\ufff3\015\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\044\ufff3\046\ufff3\047\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u023a\000\012\002\007\005\006\010\004\011\003\001" +
    "\001\000\010\005\u023b\010\004\011\003\001\001\000\010" +
    "\005\u023a\010\004\011\003\001\001\000\004\006\u01f9\001" +
    "\001\000\004\045\130\001\001\000\002\001\001\000\004" +
    "\007\040\001\001\000\010\005\012\010\004\011\003\001" +
    "\001\000\002\001\001\000\004\007\126\001\001\000\004" +
    "\007\125\001\001\000\004\007\124\001\001\000\004\007" +
    "\123\001\001\000\004\007\122\001\001\000\004\007\121" +
    "\001\001\000\004\007\120\001\001\000\004\007\117\001" +
    "\001\000\004\007\116\001\001\000\004\007\115\001\001" +
    "\000\004\007\114\001\001\000\004\007\113\001\001\000" +
    "\004\007\112\001\001\000\004\007\111\001\001\000\004" +
    "\007\110\001\001\000\004\007\107\001\001\000\004\007" +
    "\106\001\001\000\004\007\105\001\001\000\004\007\104" +
    "\001\001\000\004\007\103\001\001\000\004\007\102\001" +
    "\001\000\002\001\001\000\004\007\100\001\001\000\004" +
    "\007\077\001\001\000\004\007\076\001\001\000\004\007" +
    "\075\001\001\000\004\007\074\001\001\000\004\007\073" +
    "\001\001\000\004\007\072\001\001\000\004\007\071\001" +
    "\001\000\004\007\070\001\001\000\004\007\067\001\001" +
    "\000\004\007\066\001\001\000\004\007\065\001\001\000" +
    "\004\007\064\001\001\000\004\007\063\001\001\000\004" +
    "\007\062\001\001\000\004\007\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\131\004\132\001\001\000\004\046\204\001\001\000\006" +
    "\003\203\004\132\001\001\000\004\051\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\143\001\001\000" +
    "\004\033\151\001\001\000\002\001\001\000\004\052\145" +
    "\001\001\000\004\032\146\001\001\000\002\001\001\000" +
    "\004\032\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\155\001" +
    "\001\000\004\032\156\001\001\000\002\001\001\000\004" +
    "\012\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\163\001\001\000\004\032\164\001\001\000\002" +
    "\001\001\000\004\012\166\001\001\000\002\001\001\000" +
    "\004\033\170\001\001\000\002\001\001\000\004\054\172" +
    "\001\001\000\004\032\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\177\001\001" +
    "\000\004\032\200\001\001\000\002\001\001\000\006\003" +
    "\202\004\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\251\014\255\001\001\000" +
    "\004\014\u01ef\001\001\000\004\014\u01ee\001\001\000\004" +
    "\014\u01ed\001\001\000\004\014\u01ec\001\001\000\004\014" +
    "\u01eb\001\001\000\004\014\u01ea\001\001\000\004\014\u01e9" +
    "\001\001\000\004\014\u01e8\001\001\000\004\014\u01e7\001" +
    "\001\000\004\014\u01e6\001\001\000\004\014\u01e5\001\001" +
    "\000\004\014\u01e4\001\001\000\004\014\u01e3\001\001\000" +
    "\004\014\u01e2\001\001\000\004\014\u01e1\001\001\000\004" +
    "\014\u01e0\001\001\000\004\014\u01df\001\001\000\004\014" +
    "\u01de\001\001\000\004\014\u01dd\001\001\000\004\014\u01dc" +
    "\001\001\000\004\014\u01db\001\001\000\004\014\u01da\001" +
    "\001\000\004\014\u01d9\001\001\000\004\014\u01d8\001\001" +
    "\000\004\014\u01d7\001\001\000\004\014\u01d6\001\001\000" +
    "\004\014\u01d5\001\001\000\004\014\u01d4\001\001\000\004" +
    "\014\u01d3\001\001\000\004\014\u01d2\001\001\000\004\014" +
    "\u01d1\001\001\000\004\014\u01d0\001\001\000\004\014\u01cf" +
    "\001\001\000\004\014\u01ce\001\001\000\004\014\u01cd\001" +
    "\001\000\002\001\001\000\004\014\264\001\001\000\004" +
    "\014\263\001\001\000\004\014\262\001\001\000\002\001" +
    "\001\000\004\014\261\001\001\000\004\014\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\266\010\004" +
    "\011\003\001\001\000\010\015\274\016\272\044\271\001" +
    "\001\000\002\001\001\000\004\057\u01cb\001\001\000\004" +
    "\060\u01c4\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u013b\001\001\000\002\001\001\000\010\017\301" +
    "\040\277\041\310\001\001\000\002\001\001\000\010\037" +
    "\u013a\040\314\041\310\001\001\000\002\001\001\000\010" +
    "\037\u012f\040\314\041\310\001\001\000\006\040\u0122\041" +
    "\310\001\001\000\010\037\u0121\040\314\041\310\001\001" +
    "\000\010\037\u0120\040\314\041\310\001\001\000\004\035" +
    "\355\001\001\000\006\040\322\041\310\001\001\000\002" +
    "\001\001\000\010\037\321\040\314\041\310\001\001\000" +
    "\010\037\320\040\314\041\310\001\001\000\010\037\315" +
    "\040\314\041\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\317\041\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\324\040\314\041\310\001\001\000\002\001\001" +
    "\000\004\035\u011f\001\001\000\004\035\u011e\001\001\000" +
    "\004\035\u011d\001\001\000\004\035\u011c\001\001\000\004" +
    "\035\u011b\001\001\000\004\035\u011a\001\001\000\004\035" +
    "\u0119\001\001\000\004\035\u0118\001\001\000\004\035\u0117" +
    "\001\001\000\004\035\u0116\001\001\000\004\035\u0115\001" +
    "\001\000\004\035\u0114\001\001\000\004\035\u0113\001\001" +
    "\000\004\035\u0112\001\001\000\004\035\u0111\001\001\000" +
    "\004\035\u0110\001\001\000\004\035\u010f\001\001\000\004" +
    "\035\u010e\001\001\000\004\035\u010d\001\001\000\004\035" +
    "\u010c\001\001\000\004\035\u010b\001\001\000\004\035\u010a" +
    "\001\001\000\004\035\u0109\001\001\000\004\035\u0108\001" +
    "\001\000\002\001\001\000\004\035\u0105\001\001\000\004" +
    "\035\u0104\001\001\000\004\035\u0103\001\001\000\004\035" +
    "\u0102\001\001\000\004\035\u0101\001\001\000\004\035\u0100" +
    "\001\001\000\004\035\377\001\001\000\004\035\376\001" +
    "\001\000\004\035\375\001\001\000\004\035\374\001\001" +
    "\000\004\035\373\001\001\000\004\035\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\u0107\040" +
    "\314\041\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\037\u0128\040\314\041\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\u012c\040\314\041\310\001\001\000\002\001\001" +
    "\000\010\037\u012e\040\314\041\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0131\001\001\000\010" +
    "\010\u0132\011\u0133\034\u0134\001\001\000\010\010\u0132\011" +
    "\u0133\034\u0139\001\001\000\010\010\u0132\011\u0133\034\u0138" +
    "\001\001\000\006\016\u0137\044\271\001\001\000\010\010" +
    "\u0132\011\u0133\034\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\u013d\010\004\011\003" +
    "\001\001\000\004\020\u0140\001\001\000\004\022\u01bb\001" +
    "\001\000\004\065\u01b7\001\001\000\004\050\u014d\001\001" +
    "\000\004\023\u0143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0146\001\001\000\002" +
    "\001\001\000\004\064\u0148\001\001\000\010\005\u0149\010" +
    "\004\011\003\001\001\000\004\020\u014a\001\001\000\002" +
    "\001\001\000\004\023\u014c\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u014f\010\004\011\003\001\001" +
    "\000\010\021\u0155\024\u0150\036\u0154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\u01b5\001\001\000\002" +
    "\001\001\000\004\067\u0156\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u0158\036\u0159\001\001\000\004" +
    "\027\u0160\001\001\000\004\026\u015a\001\001\000\004\071" +
    "\u015d\001\001\000\004\036\u015c\001\001\000\002\001\001" +
    "\000\006\025\u015e\036\u0159\001\001\000\002\001\001\000" +
    "\006\030\u017e\031\u0167\001\001\000\002\001\001\000\004" +
    "\070\u0162\001\001\000\004\032\u0163\001\001\000\010\024" +
    "\u0164\036\u0154\042\u0165\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u01b4\001\001\000\002\001\001\000" +
    "\004\031\u01b3\001\001\000\004\031\u01b2\001\001\000\004" +
    "\031\u01b1\001\001\000\004\031\u01b0\001\001\000\004\031" +
    "\u01af\001\001\000\004\031\u01ae\001\001\000\004\031\u01ad" +
    "\001\001\000\004\031\u01ac\001\001\000\004\031\u01ab\001" +
    "\001\000\004\031\u01aa\001\001\000\004\031\u01a9\001\001" +
    "\000\004\031\u01a8\001\001\000\004\031\u01a7\001\001\000" +
    "\004\031\u01a6\001\001\000\004\031\u01a5\001\001\000\004" +
    "\031\u01a4\001\001\000\004\031\u01a3\001\001\000\004\031" +
    "\u01a2\001\001\000\004\031\u01a1\001\001\000\004\031\u01a0" +
    "\001\001\000\004\031\u019f\001\001\000\004\031\u019e\001" +
    "\001\000\002\001\001\000\004\031\u019c\001\001\000\004" +
    "\031\u019b\001\001\000\004\031\u019a\001\001\000\004\031" +
    "\u0199\001\001\000\004\031\u0198\001\001\000\004\031\u0197" +
    "\001\001\000\004\031\u0196\001\001\000\004\031\u0195\001" +
    "\001\000\004\031\u0194\001\001\000\004\031\u0193\001\001" +
    "\000\004\031\u0192\001\001\000\004\031\u0191\001\001\000" +
    "\004\031\u0190\001\001\000\004\031\u018f\001\001\000\004" +
    "\031\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\u01b6\024\u0150\036\u0154\001" +
    "\001\000\002\001\001\000\004\020\u01b8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u01bd\001\001\000\010\005\u01be\010\004" +
    "\011\003\001\001\000\004\020\u01bf\001\001\000\002\001" +
    "\001\000\004\022\u01c1\001\001\000\002\001\001\000\004" +
    "\022\u01c3\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u01c6\040\277\041\310\001\001\000\002\001\001" +
    "\000\004\061\u01c8\001\001\000\010\010\u0132\011\u0133\034" +
    "\u01c9\001\001\000\006\016\u01ca\044\271\001\001\000\002" +
    "\001\001\000\010\015\u01cc\016\272\044\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0239\001\001\000\004\006\u0238\001\001\000" +
    "\004\006\u0237\001\001\000\004\006\u0236\001\001\000\004" +
    "\006\u0235\001\001\000\004\006\u0234\001\001\000\004\006" +
    "\u0233\001\001\000\004\006\u0232\001\001\000\004\006\u0231" +
    "\001\001\000\002\001\001\000\004\006\u022f\001\001\000" +
    "\004\006\u022e\001\001\000\004\006\u022d\001\001\000\004" +
    "\006\u022c\001\001\000\004\006\u022b\001\001\000\004\006" +
    "\u022a\001\001\000\004\006\u0229\001\001\000\004\006\u0228" +
    "\001\001\000\004\006\u0227\001\001\000\004\006\u0226\001" +
    "\001\000\004\006\u0225\001\001\000\004\006\u0224\001\001" +
    "\000\004\006\u0223\001\001\000\004\006\u0222\001\001\000" +
    "\004\006\u0221\001\001\000\004\006\u0220\001\001\000\004" +
    "\006\u021f\001\001\000\004\006\u021e\001\001\000\004\006" +
    "\u021d\001\001\000\004\006\u021c\001\001\000\004\006\u021b" +
    "\001\001\000\004\006\u021a\001\001\000\004\006\u0219\001" +
    "\001\000\004\006\u0218\001\001\000\004\006\u0217\001\001" +
    "\000\004\006\u0216\001\001\000\004\006\u0215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<ExpresionRegular> listaExpReg = new ArrayList<>();
    public TablaTerminalesNoT tablaTerminalesNoT;
    public TablaProducciones tablaProducciones;
    public ArrayList<Error> erroresSintacticos = new ArrayList<>();;
    public ArrayList<Error> erroresSemanticos = new ArrayList<>();;
    public Lenguaje lenguaje;
    public ExpresionRegular expIgnorados;
    
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                //ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                //listaErrores.add(e);
                Error error = new Error((String) s.value,s.right, s.left, 2, "Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                erroresSemanticos.add(error);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    ManejadorNodos manejadorNodos = new ManejadorNodos();
    ArrayList<Arbol> listaArboles = new ArrayList<>();
    ArrayList<ExpresionRegular> listaExpReg = new ArrayList<>();
    Arbol arbol;
    String nombreToken;
    boolean corretaProduccion;
    TablaTerminalesNoT tablaTerminalesNoT = new TablaTerminalesNoT();
    AnalizadorLexicoC analizadorLexicoC;
    AnalizadorSintacticoC analizadorSintacticoC;
    Produccion produccion;
    TablaProducciones tablaProducciones;
    ArrayList<Error> erroresSintacticos = new ArrayList<>();
    ArrayList<Error> erroresSemanticos = new ArrayList<>();
    Lenguaje lenguaje;
    ManejadorDatos manejador = new ManejadorDatos();
    ExpresionRegular expIgnorados;
    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // lo_quesea_semantica ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // lo_quesea_semantica ::= SALTO_LINEA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // lo_quesea_semantica ::= COMENTARIO_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // lo_quesea_semantica ::= COMENTARIO_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // lo_quesea_semantica ::= COMENTARIO_SIMPLE lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // lo_quesea_semantica ::= COMA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // lo_quesea_semantica ::= NO_TERMINAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // lo_quesea_semantica ::= TERMINAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // lo_quesea_semantica ::= LINEA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // lo_quesea_semantica ::= IGNORAR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // lo_quesea_semantica ::= IGUAL lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // lo_quesea_semantica ::= COMILLAS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // lo_quesea_semantica ::= ESPACIO_BLANCO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // lo_quesea_semantica ::= TAB_RESERV lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // lo_quesea_semantica ::= SALTO_RESERV lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // lo_quesea_semantica ::= GUION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // lo_quesea_semantica ::= PARENTESIS_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // lo_quesea_semantica ::= PARENTESIS_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // lo_quesea_semantica ::= CORCHETE_C lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // lo_quesea_semantica ::= CORCHETE_A lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // lo_quesea_semantica ::= BETA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // lo_quesea_semantica ::= MAS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // lo_quesea_semantica ::= ASTERISCO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // lo_quesea_semantica ::= INTERROGACION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // lo_quesea_semantica ::= EXTENSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // lo_quesea_semantica ::= LANZAMIENTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // lo_quesea_semantica ::= AUTOR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // lo_quesea_semantica ::= VERSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // lo_quesea_semantica ::= NOMBRE lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // lo_quesea_semantica ::= PUNTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // lo_quesea_semantica ::= PUNTO_COMA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // lo_quesea_semantica ::= DOS_PUNTOS lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // lo_quesea_semantica ::= NUM_VERSION lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // lo_quesea_semantica ::= DOBLE_PUNTO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // lo_quesea_semantica ::= LETRA lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // lo_quesea_semantica ::= NUM_VER lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // lo_quesea_semantica ::= NUMERO lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // lo_quesea_semantica ::= IDENTIFICADOR lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // lo_quesea_semantica ::= CUALQUIER_SIM lo_quesea_semantica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_quesea_semantica",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // reglas_semanticas ::= lo_quesea_semantica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("reglas_semanticas",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // estructura_semantica ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_semantica",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // estructura_semantica ::= LLAVES_A reglas_semanticas LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_semantica",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // valor ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // valor ::= DOS_PUNTOS ids 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ids ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String) a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ids ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String) a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // estructura_produccion ::= ids valor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                            if(tablaTerminalesNoT.buscarExpresion((String)a)){
                                produccion.agregarNuevaExpresion(new Expresion((String)a, tablaTerminalesNoT.getBandera()));
                            }else{
                               Error error = new Error((String) a,aright+1, aleft+1, 3, "No a sido declarado el Simbolo");
                               parser.erroresSemanticos.add(error);
                               corretaProduccion = false;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_produccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // estructura_produccion ::= ids valor NT$20 estructura_produccion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_produccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                            if(tablaTerminalesNoT.buscarExpresion((String)a)){
                                produccion.agregarNuevaExpresion(new Expresion((String)a, tablaTerminalesNoT.getBandera()));
                                
                            }else{
                               Error error = new Error((String) a,aright+1, aleft+1, 3, "No a sido declarado el Simbolo");
                               parser.erroresSemanticos.add(error);
                               corretaProduccion = false;
                            }
                            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // s2 ::= 
            {
              Object RESULT =null;
		produccion.agregarNuevaExpresion(new Expresion("λ", 3));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("s2",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // s2 ::= estructura_produccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("s2",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // estructura_gramatica ::= ids NT$18 DOBLE_PUNTO estructura_produccion estructura_semantica PUNTO_COMA NT$19 saltos1 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_gramatica",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;

                            if(tablaTerminalesNoT.buscarNoTerminal((String)a)){
                                if(corretaProduccion){
                                    tablaProducciones.agregarProduccion(produccion);
                                }
                            }else{
                               Error error = new Error((String) a,aright+1, aleft+1, 3, "No a sido declarado el Simbolo no terminal");
                               parser.erroresSemanticos.add(error);
                            }
                            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
corretaProduccion = true; produccion = new Produccion((String)a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("s1",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // s1 ::= estructura_gramatica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("s1",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // bloque_gramatica ::= error NT$17 bloque_gramatica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_gramatica",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // NT$17 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // bloque_gramatica ::= estructura_gramatica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_gramatica",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // letras_may ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un no terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error); 
                            }
                            break;
                        case 0:
                        case 1:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras mayusculas");
                            parser.erroresSintacticos.add(error);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // letras_may ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un no terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error); 
                            }
                            break;
                        case 0:
                        case 1:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras mayusculas");
                            parser.erroresSintacticos.add(error);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // letras_may ::= LETRA COMA letras_may 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(tablaTerminalesNoT.isExistNoTerminal((String) a)){
                               Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un no terminal con el mismo nombre");
                               parser.erroresSemanticos.add(error); 
                            }
                            break;
                        case 0:
                        case 1:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras mayusculas");
                            parser.erroresSintacticos.add(error);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // letras_may ::= IDENTIFICADOR COMA letras_may 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 2:
                            System.out.println("Es un no terminal: "+(String) a);
                            if(tablaTerminalesNoT.isExistNoTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un no terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error);
                            }
                            break;
                        case 0:
                        case 1:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras mayusculas");
                            parser.erroresSintacticos.add(error);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_may",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // letras_min ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(manejador.buscarExpresionExistenteN(listaExpReg,(String) a)){
                                if(tablaTerminalesNoT.isExistTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error);
                                }
                            }else{
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Esta expresion no existe");
                                parser.erroresSemanticos.add(error);
                            }
                            break;
                        case 0:
                        case 2:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras minusculas");
                            parser.erroresSintacticos.add(error);
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // letras_min ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(manejador.buscarExpresionExistenteN(listaExpReg,(String) a)){
                                if(tablaTerminalesNoT.isExistTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error);
                                }
                            }else{
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Esta expresion no existe");
                                parser.erroresSemanticos.add(error);
                            }
                            break;
                        case 0:
                        case 2:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras minusculas");
                            parser.erroresSintacticos.add(error);
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // letras_min ::= LETRA COMA letras_min 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(manejador.buscarExpresionExistenteN(listaExpReg,(String) a)){
                                if(tablaTerminalesNoT.isExistTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error);
                                }
                            }else{
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Esta expresion no existe");
                                parser.erroresSemanticos.add(error);
                            }
                            break;
                        case 0:
                        case 2:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras minusculas");
                            parser.erroresSintacticos.add(error);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // letras_min ::= IDENTIFICADOR COMA letras_min 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            System.out.println("Es un terminal: "+(String) a);
                            if(manejador.buscarExpresionExistenteN(listaExpReg,(String) a)){
                                if(tablaTerminalesNoT.isExistTerminal((String) a)){
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Ya exsite un terminal con el mismo nombre");
                                parser.erroresSemanticos.add(error);
                                }
                            }else{
                                Error error = new Error((String) a,aright+1, aleft+1, 3, "Esta expresion no existe");
                                parser.erroresSemanticos.add(error);
                            }
                            
                            break;
                        case 0:
                        case 2:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras minusculas");
                            parser.erroresSintacticos.add(error);
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("letras_min",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // bloque_simbolos ::= error NT$16 bloque_simbolos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // bloque_simbolos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // bloque_simbolos ::= NO_TERMINAL letras_may PUNTO_COMA NT$15 saltos bloque_simbolos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // bloque_simbolos ::= TERMINAL letras_min PUNTO_COMA NT$14 saltos bloque_simbolos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_simbolos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // lo_que_sea_exp ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // lo_que_sea_exp ::= LLAVES_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // lo_que_sea_exp ::= LLAVES_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // lo_que_sea_exp ::= SALTO_LINEA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // lo_que_sea_exp ::= COMA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // lo_que_sea_exp ::= NO_TERMINAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // lo_que_sea_exp ::= TERMINAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // lo_que_sea_exp ::= LINEA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // lo_que_sea_exp ::= IGNORAR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // lo_que_sea_exp ::= IGUAL lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // lo_que_sea_exp ::= ESPACIO_BLANCO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // lo_que_sea_exp ::= TAB_RESERV lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // lo_que_sea_exp ::= SALTO_RESERV lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // lo_que_sea_exp ::= GUION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // lo_que_sea_exp ::= PARENTESIS_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // lo_que_sea_exp ::= PARENTESIS_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // lo_que_sea_exp ::= CORCHETE_C lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // lo_que_sea_exp ::= CORCHETE_A lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // lo_que_sea_exp ::= BETA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // lo_que_sea_exp ::= MAS lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // lo_que_sea_exp ::= ASTERISCO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // lo_que_sea_exp ::= INTERROGACION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // lo_que_sea_exp ::= EXTENSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // lo_que_sea_exp ::= LANZAMIENTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // lo_que_sea_exp ::= AUTOR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // lo_que_sea_exp ::= VERSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // lo_que_sea_exp ::= NOMBRE lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // lo_que_sea_exp ::= PUNTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // lo_que_sea_exp ::= PUNTO_COMA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // lo_que_sea_exp ::= DOS_PUNTOS lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // lo_que_sea_exp ::= NUM_VERSION lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // lo_que_sea_exp ::= DOBLE_PUNTO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // lo_que_sea_exp ::= LETRA lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // lo_que_sea_exp ::= NUM_VER lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // lo_que_sea_exp ::= NUMERO lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // lo_que_sea_exp ::= IDENTIFICADOR lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // lo_que_sea_exp ::= CUALQUIER_SIM lo_que_sea_exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // exp_regular_despues ::= exp_regular_despues LINEA exp_regular_despues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,4,"|",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b), nombreToken); RESULT = (Nodo) node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // exp_regular_despues ::= exp_regular_p MAS exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 /*Nodo nodeMas = new Nodo(3,"+",true, nombreToken); nodeMas.setIzquierdaNodo((Nodo)a);*/
                                Nodo node = (Nodo)a ;
                                Nodo nuevo = new Nodo (node.getTipo(),node.getLexema(),node.isAnulable(), nombreToken);
                                nuevo.listaCaracteres = node.listaCaracteres;
                                Nodo nodeAs = new Nodo(2,"*",true, nombreToken); nodeAs.setIzquierdaNodo(node);
                                Nodo nodoConcat = manejadorNodos.generarPadre(nuevo,nodeAs ,1,".",manejadorNodos.determinarAnulabilidad(nuevo, nodeAs), nombreToken);
                                if(b==null ){
                                    RESULT = (Nodo) nodoConcat;
                                }else{
                                    Nodo node2 = manejadorNodos.generarPadre(nodoConcat, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(nodoConcat, (Nodo)b), nombreToken);
                                    RESULT = (Nodo) node2;
                                }            
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // exp_regular_despues ::= exp_regular_p ASTERISCO exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo nodeAs = new Nodo(2,"*",true, nombreToken);
                                if(b==null ){
                                    RESULT = (Nodo) nodeAs;
                                }else{
                                    Nodo node2 = manejadorNodos.generarPadre(nodeAs, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(nodeAs, (Nodo)b), nombreToken);
                                    RESULT = (Nodo) node2;
                                }  
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // exp_regular_despues ::= exp_regular_p INTERROGACION exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = manejadorNodos.generarPadre((Nodo)a, new Nodo(8,"",true, nombreToken),4,"|",true, nombreToken); 
                                if(b==null ){
                                    RESULT = (Nodo) node1;
                                }else{
                                    Nodo node2 = manejadorNodos.generarPadre(node1, (Nodo) b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken);
                                    RESULT = (Nodo) node2;
                                }  
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // exp_regular_despues ::= PUNTO exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // exp_regular_despues ::= ESPACIO_BLANCO exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // exp_regular_despues ::= TAB_RESERV exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // exp_regular_despues ::= SALTO_RESERV exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // exp_regular_despues ::= COMILLAS lo_que_sea_exp COMILLAS exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                            Nodo node1 = manejadorNodos.generarNodosTexto((String) a, nombreToken);
                            if(b==null){
                                RESULT = node1;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre(node1, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad(node1, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // exp_regular_despues ::= CORCHETE_A exp_regular_despues CORCHETE_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                            if(b==null){
                                RESULT = (Nodo)a;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // exp_regular_despues ::= PARENTESIS_A exp_regular_despues PARENTESIS_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                            if(b==null){
                                RESULT = (Nodo)a;
                            }else{
                                Nodo nodo2 = manejadorNodos.generarPadre((Nodo)a, (Nodo)b,1,".",manejadorNodos.determinarAnulabilidad((Nodo)a, (Nodo)b), nombreToken); RESULT = (Nodo) nodo2;
                            }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // exp_regular_despues ::= CORCHETE_A LETRA GUION LETRA CORCHETE_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                if(c == null){
                                    RESULT = (Nodo) nodo1;
                                }else{
                                    Nodo nodo2 = manejadorNodos.generarPadre(nodo1, (Nodo)c,1,".",false, nombreToken); RESULT = (Nodo) nodo2;
                                    RESULT = (Nodo) nodo2;
                                }
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // exp_regular_despues ::= CORCHETE_A NUMERO GUION NUMERO CORCHETE_C exp_regular_contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                if(c == null){
                                    RESULT = (Nodo) nodo1;
                                }else{
                                    Nodo nodo2 = manejadorNodos.generarPadre(nodo1, (Nodo)c,1,".",false, nombreToken); RESULT = (Nodo) nodo2;
                                    RESULT = (Nodo) nodo2;
                                }
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_despues",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // exp_regular_p ::= ESPACIO_BLANCO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // exp_regular_p ::= PUNTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exp_regular_p ::= TAB_RESERV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exp_regular_p ::= SALTO_RESERV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo node1 = new Nodo(5,(String) a,false, nombreToken); RESULT = node1; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // exp_regular_p ::= COMILLAS lo_que_sea_exp COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 Nodo node1 = manejadorNodos.generarNodosTexto((String) a, nombreToken); RESULT = node1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // exp_regular_p ::= CORCHETE_A exp_regular_despues CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // exp_regular_p ::= PARENTESIS_A exp_regular_despues PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // exp_regular_p ::= CORCHETE_A LETRA GUION LETRA CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                RESULT = (Nodo) nodo1;
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // exp_regular_p ::= CORCHETE_A NUMERO GUION NUMERO CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        if(manejadorNodos.verificarTamanio((String)a, (String)b)){
                            if(manejadorNodos.isMenor((String)a, (String)b)){
                                Nodo nodo1 = new Nodo(5,(String)a+"-"+(String)b,false, nombreToken);
                                nodo1.generarListaCaracteres((String)a, (String)b);
                                //Nodo nuevoNodo = manejadorNodos.generarPadreCadenas(nodo1,);
                                RESULT = (Nodo) nodo1;
                            }else{

                            }
                        }else{

                        }
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_p",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // exp_regular_contenido ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_contenido",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // exp_regular_contenido ::= exp_regular_despues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular_contenido",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // exp_regular ::= exp_regular_despues 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp_regular",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // identificacion ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            break;
                        case 0:
                        case 2:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras minusculas");
                            parser.erroresSintacticos.add(error);
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                    RESULT = (String)a;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("identificacion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // identificacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 analizadorLexicoC = new AnalizadorLexicoC(new StringReader((String)a));
                    analizadorSintacticoC = new AnalizadorSintacticoC(analizadorLexicoC);
                    analizadorSintacticoC.parse();
                    switch(analizadorSintacticoC.getTipo()){
                        case 1:
                            break;
                        case 0:
                        case 2:
                            Error error = new Error((String) a,aright+1, aleft+1, 2, "Debe den de ser Letras minusculas");
                            parser.erroresSintacticos.add(error);
                            System.out.println("Error no es terminal: "+(String) a);
                            break;
                    }
                    RESULT = (String)a;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("identificacion",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // estructura_exp_regular ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // estructura_exp_regular ::= IGNORAR IGUAL exp_regular PUNTO_COMA NT$13 salto_simple estructura_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 ExpresionRegular exp = new ExpresionRegular(new Arbol((Nodo)b),(String)a); expIgnorados = exp;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // estructura_exp_regular ::= identificacion NT$11 IGUAL exp_regular PUNTO_COMA NT$12 salto_simple estructura_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura_exp_regular",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 
                                Nodo node = new Nodo(6,"#",false, nombreToken);
                                 Nodo raiz = manejadorNodos.generarPadre((Nodo)b, node,1,".",manejadorNodos.determinarAnulabilidad((Nodo)b, node), nombreToken);
                                ExpresionRegular exp = new ExpresionRegular(new Arbol((Nodo)b),(String)a); 
                                if(manejador.buscarExpresionExistente(listaExpReg, exp)){
                                    listaExpReg.add(exp);
                                }else{
                                    Error error = new Error((String)a,aright+1, aleft+1, 3, "Ya exsite una expresion regular con el mismo nombre");
                                    parser.erroresSemanticos.add(error);
                                }
                                
                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
nombreToken = (String)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bloque_exp_regular ::= error NT$10 bloque_exp_regular 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_exp_regular",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bloque_exp_regular ::= estructura_exp_regular 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_exp_regular",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // lo_que_sea_bloque_code ::= 
            {
              Object RESULT =null;
		RESULT = (String)"";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // lo_que_sea_bloque_code ::= SALTO_LINEA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // lo_que_sea_bloque_code ::= COMENTARIO_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // lo_que_sea_bloque_code ::= COMENTARIO_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // lo_que_sea_bloque_code ::= COMENTARIO_SIMPLE lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // lo_que_sea_bloque_code ::= LLAVES_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // lo_que_sea_bloque_code ::= LLAVES_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // lo_que_sea_bloque_code ::= COMA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // lo_que_sea_bloque_code ::= NO_TERMINAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // lo_que_sea_bloque_code ::= TERMINAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lo_que_sea_bloque_code ::= LINEA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lo_que_sea_bloque_code ::= IGNORAR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lo_que_sea_bloque_code ::= IGUAL lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lo_que_sea_bloque_code ::= COMILLAS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lo_que_sea_bloque_code ::= ESPACIO_BLANCO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lo_que_sea_bloque_code ::= TAB_RESERV lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lo_que_sea_bloque_code ::= SALTO_RESERV lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lo_que_sea_bloque_code ::= GUION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lo_que_sea_bloque_code ::= PARENTESIS_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lo_que_sea_bloque_code ::= PARENTESIS_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lo_que_sea_bloque_code ::= CORCHETE_C lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lo_que_sea_bloque_code ::= CORCHETE_A lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lo_que_sea_bloque_code ::= BETA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lo_que_sea_bloque_code ::= MAS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lo_que_sea_bloque_code ::= ASTERISCO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lo_que_sea_bloque_code ::= INTERROGACION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lo_que_sea_bloque_code ::= EXTENSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lo_que_sea_bloque_code ::= LANZAMIENTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lo_que_sea_bloque_code ::= AUTOR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lo_que_sea_bloque_code ::= VERSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lo_que_sea_bloque_code ::= NOMBRE lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lo_que_sea_bloque_code ::= PUNTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lo_que_sea_bloque_code ::= PUNTO_COMA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lo_que_sea_bloque_code ::= DOS_PUNTOS lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lo_que_sea_bloque_code ::= NUM_VERSION lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lo_que_sea_bloque_code ::= DOBLE_PUNTO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lo_que_sea_bloque_code ::= LETRA lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lo_que_sea_bloque_code ::= NUM_VER lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lo_que_sea_bloque_code ::= NUMERO lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lo_que_sea_bloque_code ::= IDENTIFICADOR lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lo_que_sea_bloque_code ::= CUALQUIER_SIM lo_que_sea_bloque_code 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_bloque_code",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bloque_code ::= lo_que_sea_bloque_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_code",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cadena_identificadores ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena_identificadores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cadena_identificadores ::= IDENTIFICADOR cadena_identificadores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a +" "+ (String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena_identificadores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // datos_info ::= EXTENSION DOS_PUNTOS IDENTIFICADOR PUNTO_COMA NT$9 saltos1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
lenguaje.setExtension((String) a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // datos_info ::= LANZAMIENTO DOS_PUNTOS NUMERO PUNTO_COMA NT$8 saltos1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
lenguaje.setLanzamiento((String) a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // datos_info ::= AUTOR DOS_PUNTOS cadena_identificadores PUNTO_COMA NT$7 saltos1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
lenguaje.setAutor((String) a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // datos_info ::= VERSION DOS_PUNTOS num_version PUNTO_COMA NT$6 saltos1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
lenguaje.setVersion((String) a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // datos_info ::= NOMBRE DOS_PUNTOS cadena_identificadores PUNTO_COMA NT$5 saltos1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("datos_info",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
lenguaje.setNombre((String) a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // num_version ::= NUMERO PUNTO num_version 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String) a + (String) b + (String) c;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("num_version",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // num_version ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String) a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("num_version",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloque_inf ::= error NT$4 bloque_inf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloque_inf ::= datos_info 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    if(lenguaje.getNombre()==null || lenguaje.getNombre().isEmpty()){
                        Error error = new Error("NOMBRE",aright+1, aleft+1, 3, "No se encontro el campo Nombre, este campo es obligatorio");
                        parser.erroresSemanticos.add(error);
                        System.out.println("Error Fila: "+(aright+1)+", Columna: "+(aleft+1)+"   nombre: "+lenguaje.getNombre());
                    }
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bloque_inf ::= datos_info bloque_inf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque_inf",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lo_que_sea_v ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lo_que_sea_v ::= LLAVES_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lo_que_sea_v ::= LLAVES_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lo_que_sea_v ::= SALTO_LINEA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lo_que_sea_v ::= COMA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lo_que_sea_v ::= NO_TERMINAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lo_que_sea_v ::= TERMINAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lo_que_sea_v ::= LINEA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lo_que_sea_v ::= IGNORAR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lo_que_sea_v ::= IGUAL lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lo_que_sea_v ::= COMILLAS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lo_que_sea_v ::= ESPACIO_BLANCO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lo_que_sea_v ::= TAB_RESERV lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lo_que_sea_v ::= SALTO_RESERV lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lo_que_sea_v ::= GUION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lo_que_sea_v ::= PARENTESIS_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lo_que_sea_v ::= PARENTESIS_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lo_que_sea_v ::= CORCHETE_C lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lo_que_sea_v ::= CORCHETE_A lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lo_que_sea_v ::= BETA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lo_que_sea_v ::= MAS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lo_que_sea_v ::= ASTERISCO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lo_que_sea_v ::= INTERROGACION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lo_que_sea_v ::= EXTENSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lo_que_sea_v ::= LANZAMIENTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lo_que_sea_v ::= AUTOR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lo_que_sea_v ::= VERSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lo_que_sea_v ::= NOMBRE lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lo_que_sea_v ::= PUNTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lo_que_sea_v ::= PUNTO_COMA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lo_que_sea_v ::= DOS_PUNTOS lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lo_que_sea_v ::= NUM_VERSION lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lo_que_sea_v ::= DOBLE_PUNTO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lo_que_sea_v ::= LETRA lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lo_que_sea_v ::= NUM_VER lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lo_que_sea_v ::= NUMERO lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lo_que_sea_v ::= IDENTIFICADOR lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lo_que_sea_v ::= CUALQUIER_SIM lo_que_sea_v 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_v",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lo_que_sea_1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lo_que_sea_1 ::= LLAVES_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lo_que_sea_1 ::= LLAVES_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lo_que_sea_1 ::= COMA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lo_que_sea_1 ::= NO_TERMINAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lo_que_sea_1 ::= TERMINAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lo_que_sea_1 ::= LINEA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lo_que_sea_1 ::= IGNORAR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lo_que_sea_1 ::= IGUAL lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lo_que_sea_1 ::= COMILLAS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lo_que_sea_1 ::= ESPACIO_BLANCO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lo_que_sea_1 ::= TAB_RESERV lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lo_que_sea_1 ::= SALTO_RESERV lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lo_que_sea_1 ::= GUION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lo_que_sea_1 ::= PARENTESIS_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lo_que_sea_1 ::= PARENTESIS_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lo_que_sea_1 ::= CORCHETE_C lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lo_que_sea_1 ::= CORCHETE_A lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lo_que_sea_1 ::= BETA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lo_que_sea_1 ::= MAS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lo_que_sea_1 ::= ASTERISCO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lo_que_sea_1 ::= INTERROGACION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lo_que_sea_1 ::= EXTENSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lo_que_sea_1 ::= LANZAMIENTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lo_que_sea_1 ::= AUTOR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lo_que_sea_1 ::= VERSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lo_que_sea_1 ::= NOMBRE lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lo_que_sea_1 ::= PUNTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lo_que_sea_1 ::= PUNTO_COMA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lo_que_sea_1 ::= DOS_PUNTOS lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lo_que_sea_1 ::= NUM_VERSION lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lo_que_sea_1 ::= DOBLE_PUNTO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lo_que_sea_1 ::= LETRA lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lo_que_sea_1 ::= NUM_VER lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lo_que_sea_1 ::= NUMERO lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lo_que_sea_1 ::= IDENTIFICADOR lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lo_que_sea_1 ::= CUALQUIER_SIM lo_que_sea_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lo_que_sea_1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comentario_varias_lineas ::= COMENTARIO_A lo_que_sea_v COMENTARIO_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comentario_varias_lineas",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comentario_linea ::= COMENTARIO_SIMPLE lo_que_sea_1 SALTO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comentario_linea",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // saltos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // saltos ::= comentario_varias_lineas saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // saltos ::= comentario_linea saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saltos ::= SALTO_LINEA saltos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // salto_simple ::= SALTO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // salto_simple ::= comentario_varias_lineas salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // salto_simple ::= comentario_linea salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // salto_simple ::= SALTO_LINEA salto_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("salto_simple",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // saltos1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // saltos1 ::= SALTO_LINEA saltos1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("saltos1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= saltos NT$0 bloque_inf NT$1 SEPARACION bloque_code SEPARACION saltos bloque_exp_regular NT$2 SEPARACION saltos bloque_simbolos NT$3 SEPARACION saltos bloque_gramatica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		parser.tablaProducciones = tablaProducciones; 
                    parser.lenguaje = lenguaje;
                    //parser.erroresSintacticos = erroresSintacticos;
                    //parser.erroresSemanticos = erroresSemanticos;
             
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-16)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
parser.tablaTerminalesNoT = tablaTerminalesNoT; tablaProducciones = new TablaProducciones();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
parser.listaExpReg = listaExpReg; parser.expIgnorados = expIgnorados;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
System.out.println(lenguaje.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
lenguaje = new Lenguaje();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

